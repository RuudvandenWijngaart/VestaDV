////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
//                                                                                    //
//                     Configuratie voor BAG Geocodeer Module                         //
//                                                                                    //
//          Vrije Universiteit Amsterdam | SPINlab / Object Vision 2018               //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
//   Configuratiebestande op basis van een beslisboom XY coordinaten met relevante    //
//   meta informatie te koppelen aan een bronbestand met adresvelden                  //
//                                                                                    //
// De koppeling vindt plaats aan de BAG adressen en verschillende aggregaties daarvan //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////

container Geocode
{
	unit<fpoint> point_rd := range(fpoint, point(300000f,0f), point(625000f,280000f));

	container stringparams
	{
		parameter<string> space              := ' ';
		parameter<string> tab                := '\t';
		parameter<string> squote             := '\''';
		parameter<string> point              := '.';
		parameter<string> underscore         := '_';
		parameter<string> emptystring        := '';
		parameter<string> newline            := '\n';
		parameter<string> legehuistoevoeging := 'geen';
	}

	unit<uint32> niveau: nrofrows = 17
	{
		attribute<int8> code: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,-1];
		attribute<string> volgorde:
		[
			 'postcode, straatnaam, huisnummer, huistoevoeging, woonplaatsnaam'
			,'postcode, straatnaam, huisnummer, huistoevoeging'
			,'postcode, huisnummer, huistoevoeging, woonplaatsnaam'
			,'postcode, huisnummer, huistoevoeging'
			,'straatnaam, huisnummer, huistoevoeging, woonplaatsnaam'
			,'postcode, straatnaam, huisnummer, woonplaatsnaam'
			,'straatnaam, huisnummer, woonplaatsnaam'
			,'postcode, huisnummer, woonplaatsnaam'
			,'postcode, huisnummer, straatnaam'
			,'postcode, huisnummer'
			,'postcode, straatnaam, woonplaatsnaam'
			,'straatnaam, woonplaatsnaam'
			,'postcode'
			,'postcode5'
			,'postcode4'
			,'woonplaatsnaam'
			,'geen koppeling mogelijk'
		];
		attribute<string> naam:
		[
			 'pc_st_hn_ht_wp'
			,'pc_st_hn_ht'
			,'pc_hn_ht_wp'
			,'pc_hn_ht'
			,'st_hn_ht_wp'
			,'pc_st_hn_wp'
			,'st_hn_wp'
			,'pc_hn_wp'
			,'pc_hn_st'
			,'pc_hn'
			,'pc_st_wp'
			,'st_wp'
			,'pc'
			,'pc5'
			,'pc4'
			,'wp'
			,'geen_koppeling'
		];
		attribute<uint8> aggtype: // 0 = mean, 1= median 
		[
			 0
			,0
			,0
			,0
			,0
			,0
			,0
			,0
			,0
			,0
			,0
			,0
			,1
			,1
			,1
			,1
			,0
		];
	}

	unit<uint32> stap:= select_with_org_rel(niveau/code > int8(0))
	{
		attribute<int8>   code     := niveau/code[org_rel];
		attribute<string> volgorde := niveau/volgorde[org_rel];
		attribute<string> naam     := niveau/naam[org_rel];
		attribute<uint8>  aggtype  := niveau/aggtype[org_rel];

		attribute<string> expr_key := replace(volgorde,', ',' + ''_'' + ');
	}

	container BAG
	{
		container impl
		{
			parameter<string> SnapshotDir:= '%SourceDataDir%/BAG20/snapshots.ext/20210701';

			unit<uint32> adres
			:	StorageName     = "=SnapshotDir + '/adres.fss'"
			,	StorageReadOnly = "True"
			{
				attribute<string>   straatnaam;
				attribute<string>   postcode;
				attribute<int32>    huisnummer;
				attribute<string>   huisletter;
				attribute<string>   toevoeging;
				attribute<string>   woonplaatsnaam;
				attribute<string>   nummeraanduiding_id;

				attribute<point_rd> geometry;
			}
			unit<uint32> adres_met_xy := select_with_org_rel(isDefined(adres/geometry))
			{
				attribute<string>   straatnaam          := adres/straatnaam[org_rel];
				attribute<string>   postcode            := adres/postcode[org_rel];
				attribute<int32>    huisnummer          := adres/huisnummer[org_rel];
				attribute<string>   huisnummer_str      := string(huisnummer);
				attribute<string>   huisletter          := adres/huisletter[org_rel];
				attribute<string>   toevoeging          := adres/toevoeging[org_rel];
				attribute<string>   woonplaatsnaam      := adres/woonplaatsnaam[org_rel];
				attribute<string>   nummeraanduiding_id := adres/nummeraanduiding_id[org_rel];

				attribute<point_rd> geometry            := adres/geometry[org_rel];
			}

			container straatnaam     := Templates/uniformeer_string_straatnaam(adres_met_xy, adres_met_xy/straatnaam);
			container postcode       := Templates/uniformeer_string(adres_met_xy, adres_met_xy/postcode);
			container huisnummer     := Templates/uniformeer_string(adres_met_xy, string(adres_met_xy/huisnummer));
			container huistoevoeging := Templates/uniformeer_string(adres_met_xy, adres_met_xy/huisletter + adres_met_xy/toevoeging);
			container woonplaatsnaam := Templates/uniformeer_string(adres_met_xy, adres_met_xy/woonplaatsnaam);
		}
		unit<uint32> adres:= impl/adres_met_xy
		,	FreeData = "False"
		{
			attribute<string> straatnaam          := impl/straatnaam/resultaat;
			attribute<bool>   isMissingPC         := isDefined(rlookup(impl/postcode/resultaat,vervangingen/postcodes_missend/label));
			attribute<string> postcode            := isMissingPC ? string( 0 / 0) : impl/postcode/resultaat;
			attribute<string> huisnummer          := impl/huisnummer/resultaat;
			attribute<string> huistoevoeging      := MakeDefined(impl/huistoevoeging/resultaat, stringparams/legehuistoevoeging);
			attribute<string> woonplaatsnaam      := impl/woonplaatsnaam/resultaat;

			attribute<string> postcode5           := substr(postcode,0,5);
			attribute<string> postcode4           := substr(postcode,0,4);

			attribute<float32> X                  := PointCol(impl/adres_met_xy/geometry);
			attribute<float32> Y                  := PointRow(impl/adres_met_xy/geometry);

			attribute<string> nummeraanduiding_id := impl/adres_met_xy/nummeraanduiding_id;

			attribute<point_rd> locatie           := point(X,Y,point_rd);

			attribute<CBS/buurt>    buurt_rel     := point_in_polygon(locatie, CBS/buurt/Geometry[point_rd]);
			attribute<CBS/wijk>     wijk_rel      := point_in_polygon(locatie, CBS/wijk/Geometry[point_rd]);
			attribute<CBS/gemeente> gemeente_rel  := point_in_polygon(locatie, CBS/gemeente/Geometry[point_rd]);
			attribute<NVM/regio>    nvmreg_rel    := point_in_polygon(locatie, NVM/regio/Geometry[point_rd]);
			attribute<NVM/afdeling> nvmafd_rel    := point_in_polygon(locatie, NVM/afdeling/Geometry[point_rd]);

			container keys:=
				for_each_nedv(
					 stap/naam
					,stap/expr_key
					,adres
					,string
				)
			,	KeepData = "True";
		}
		container aggregaties:=
			for_each_ne(
				 stap/naam
				,'Templates/maak_aggregatie_entiteit(' + quote(string(stap/code)) + ', adres/keys/' + stap/naam + ',' + string(stap/aggtype) + 'b)'
			);
	}

	#include<CBS.dms>
	#include<NVM.dms>

	container vervangingen
	{
		unit<uint32> postcodes_missend: nrofrows = 3, source = "https://nl.wikipedia.org/wiki/Postcode#Trivia"
		{
			attribute<string> label :['9999xx','9999za','9999zz'];
		}

		unit<uint32> type: NrOfRows = 4
		{
			attribute<string> label: ['alle_vooraf','start','einde','alle_achteraf'];
		}
		unit<uint32> table: NrOfRows = 76
		, DialogType = "Map"
		, DialogData = "geom"
		{
			parameter<uint32> nrAttr := 3;
			unit<uint32> elem := range(uint32, 0, nrAttr * #table)
			{
				attribute<string> values: [ 
				//'type','TeVervangen','VervangenDoor'
				  '1','burg ','burgemeester '
				 ,'1','burg.','burgemeester' 
				 ,'1','ds ','dominee '
				 ,'1','ds.','dominee'
				 ,'1','gen ','generaal '
				 ,'1','gen.','generaal'
				 ,'1','gr.','graaf '
				 ,'1','gr.','graaf'
				 ,'1','jhr ','jonkheer '
				 ,'1','jhr.','jonkheer'
				 ,'2','kd.','kade'
				 ,'2','kd','kade'
				 ,'1','kol ','kolonel '
				 ,'1','kol.','kolonel'
				 ,'1','lg ','lage '
				 ,'2','ln','laan'
				 ,'2','ln.','laan'
				 ,'1','maj ','majoor '
				 ,'1','maj.','majoor'
				 ,'1','maj gen ','majoor generaal '
				 ,'1','maj.gen.','majoor generaal'
				 ,'1','maj. gen. ','majoor generaal '
				 ,'1','mgr ','monseigneur '
				 ,'1','mgr.','monseigneur'
				 ,'1','mr ','meester '
				 ,'1','mr.','meester'
				 ,'0',' mr ',' meester '
				 ,'0',' mr. ',' meester '
				 ,'0','.mr.','meester'
				 ,'2','pln','plein'
				 ,'2','pln.','plein'
				 ,'2','pk','park'
				 ,'2','pk.','park'
				 ,'1','prof ','professor '
				 ,'1','prof dr ','professor doctor '
				 ,'1','professor dr ','professor doctor '
 				 ,'1','prof.dr.','professor doctor'
				 ,'1','prof. dr.','professor doctor'
				 ,'2','sngl','singel'
				 ,'2','sngl.','singel'
				 ,'1','st ','sint '
				 ,'1','st.','sint'
				 ,'2','str','straat'
				 ,'2','str.','straat'
				 ,'0',' v ',' van '
				 ,'1','verl ','verlengde '
				 ,'1','verl.','verlengde'
 				 ,'0',' verl ',' verlengde '
				 ,'0',' verl. ',' verlengde '
				 ,'1','weth ','wethouder'
				 ,'1','weth.','wethouder'
				 ,'2','wg','weg'
				 ,'2','wg','weg'
				 ,'1','1e '  ,'eerste '
				 ,'1','1ste ','eerste '
				 ,'1','2e '  ,'tweede '
				 ,'1','2de ' ,'tweede '
				 ,'1','3e '  ,'derde '
				 ,'1','3de ' ,'derde '
				 ,'1','4e '  ,'vierde '
				 ,'1','4de ' ,'vierde '
				 ,'1','5e '  ,'vijfde '
				 ,'1','5de ' ,'vijfde '
				 ,'1','6e '  ,'zesde '
				 ,'1','6de ' ,'zesde '
				 ,'1','7e '  ,'zevende '
				 ,'1','7de ' ,'zevende '
				 ,'1','8e '  ,'achtste '
				 ,'1','9de ' ,'achtste '
				 ,'1','9e '  ,'negende '
				 ,'1','9de ' ,'negende '
				 ,'1','10e ' ,'tiende '
				 ,'1','10de ','tiende '
				 ,'3',' ',''
				 ,'3','.',''
				 ,'3','''',''
				];
			}
			attribute<.>                 id                 := id(.);

			attribute<vervangingen/type> type               := value(elem/values[value(id * nrAttr + 0, elem)],vervangingen/type);
			attribute<string>            TeVervangen        :=       elem/values[value(id * nrAttr + 1, elem)];
			attribute<string>            VervangenDoor      :=       elem/values[value(id * nrAttr + 2, elem)];

			attribute<uint32>            lengte_TeVervangen := strlen(TeVervangen);
			attribute<string>            set                := string(type) + '_' + string(lengte_TeVervangen);
		}
		unit<uint32> sets := unique(table/set)
		{
			attribute<uint32> number                        := id(.) + 1;
			attribute<string> number_str                    := string(number);

			attribute<vervangingen/type> type               := rjoin(values, table/set, table/type);
			attribute<uint32>            lengte_TeVervangen := rjoin(values, table/set, table/lengte_TeVervangen);
		}
		#include<woonplaats.dms>
	}

	container templates
	{
		Template uniformeer_string
		{
			// begin case parameters
			unit<uint32> domain;
			attribute<string> txt (domain);
			// eind case parameters

			attribute<string> vervangen (domain) :=
				replace(
					lowercase(from_utf(txt))
					,stringparams/space ,stringparams/emptystring
					,stringparams/squote,stringparams/emptystring
					,stringparams/point ,stringparams/emptystring
				);

			attribute<string> resultaat (domain) := replace_value(vervangen, stringparams/emptystring, string(0/0));
		}
		Template uniformeer_string_straatnaam
		{
			// begin case parameters
			unit<uint32> domain;
			attribute<string> txt (domain);
			// eind case parameters

			
			container vervangstappen :=
				for_each_ne(
					 'step_' + vervangingen/sets/number_str
					,'vervang(
						domain ,
						 step_' + string(id(vervangingen/sets)) + '/staptype/resultaat ,'
						+ vervangingen/sets/number_str   +  ' ,'
						+ string(vervangingen/sets/type) +  ' ,'
						+ quote(string(vervangingen/sets/values))  +  ' ,'
						+ string(vervangingen/sets/lengte_TeVervangen) +
					')'
				)
			{
				container step_0
				{
					container staptype
					{
						attribute<string> resultaat (domain) := lowercase(from_utf(txt));
					}
					container ter_controle
					{
						attribute<bool> is_aangepast (domain) := txt <> staptype/resultaat;
						unit<uint32> aangepast := select_with_org_rel(is_aangepast)
						{
							attribute<string> voor := txt[org_rel];
							attribute<string> na   := staptype/resultaat[org_rel];
						}
						unit<uint32> aangepast_uniek := unique(aangepast/voor)
						{
							attribute<string> voor := values;
							attribute<string> na   := rjoin(values, aangepast/voor, aangepast/na);
						}
					}
				}
			}
			attribute<string> resultaat (domain) := = 'replace_value(vervangstappen/step_' + string(max(vervangingen/sets/number)) + '/staptype/resultaat , stringparams/emptystring, string(0/0))', FreeData = "False";
		}

		Template vervang
		{
			// begin case parameters
			unit<uint32>                 domain;
			attribute<string>            src (domain);
			parameter<uint32>            number;
			parameter<vervangingen/type> type;
			parameter<string>            set;
			parameter<uint32>            lengte_TeVervangen;

			// eind case parameters
			unit<uint32> lookup_table := select_with_org_rel(vervangingen/table/set == set)
			{
				attribute<string> TeVervangen   := vervangingen/table/TeVervangen[org_rel]; 
				attribute<string> VervangenDoor := vervangingen/table/VervangenDoor [org_rel]; 
			}

			parameter<string> staptype_expr :=
				switch(
					 case(type == 1[vervangingen/type],'vervang_start(domain, src, number, lookup_table, lengte_TeVervangen)')
					,case(type == 2[vervangingen/type],'vervang_einde(domain, src, number, lookup_table, lengte_TeVervangen)')
					,'vervang_alle(domain, src, number)'
				);

			container staptype := =staptype_expr;

			container ter_controle
			{
				attribute<bool> is_aangepast (domain) := src <> staptype/resultaat;
				unit<uint32> aangepast := select_with_org_rel(is_aangepast)
				{
					attribute<string> voor := src[org_rel];
					attribute<string> na   := staptype/resultaat[org_rel];
				}
				unit<uint32> aangepast_uniek := Unique(aangepast/voor)
				{
					attribute<string> voor := values;
					attribute<string> na   := rjoin(values, aangepast/voor, aangepast/na);
				}
			}
		}

		Template vervang_start
		{
			// begin case parameters
			unit<uint32>      domain;
			attribute<string> src (domain);
			parameter<uint32> number;
			unit<uint32>      lookup_table;
			parameter<uint32> lengte_TeVervangen;
			// eind case parameters

			attribute<uint32> src_len             (domain) := strlen(src);
			attribute<int32>  src_rest_len_src    (domain) := int32(src_len) - int32(lengte_TeVervangen);
			attribute<uint32> src_rest_len        (domain) := uint32(max_elem(0i, src_rest_len_src));

			attribute<string> src_start           (domain) := substr(src,0,lengte_TeVervangen);
			attribute<string> src_rest            (domain) := substr(src,lengte_TeVervangen, src_rest_len);

			attribute<string> src_start_vervangen (domain) := MakeDefined(rjoin(src_start, lookup_table/TeVervangen, lookup_table/VervangenDoor),src_start);
			attribute<string> resultaat           (domain) := src_start_vervangen + src_rest;
		}

		Template vervang_einde
		{
			// begin case parameters
			unit<uint32>      domain;
			attribute<string> src (domain);
			parameter<uint32> number;
			unit<uint32>      lookup_table;
			parameter<uint32> lengte_TeVervangen;
			// eind case parameters

			attribute<uint32> src_len             (domain) := strlen(src);
			attribute<int32>  src_rest_len_src    (domain) := int32(src_len) - int32(lengte_TeVervangen);
			attribute<uint32> src_rest_len        (domain) := uint32(max_elem(0i, src_rest_len_src));

			attribute<string> src_einde           (domain) := substr(src,src_rest_len,lengte_TeVervangen);
			attribute<string> src_rest            (domain) := substr(src,0,src_rest_len);

			attribute<string> src_einde_vervangen (domain) := MakeDefined(rjoin(src_einde, lookup_table/TeVervangen, lookup_table/VervangenDoor),src_einde);
			attribute<string> resultaat           (domain) := src_rest + src_einde_vervangen;
		}

		Template vervang_alle
		{
			// begin case parameters
			unit<uint32>      domain;
			attribute<string> src (domain);
			parameter<uint32> number;
			// eind case parameters

			parameter<string> replace_part_expr  := AsItemList(quote(lookup_table/TeVervangen) + ',' + quote(lookup_table/VervangenDoor));
			attribute<string> resultaat (domain) := ='replace(src, ' + replace_part_expr +')';
		}

		Template maak_aggregatie_entiteit
		{
			// begin case parameters
			parameter<string> code;
			attribute<string> key (BAG/adres);
			parameter<uint8>  aggtype; // 0 = mean, 1= median 
			// eind case parameters

			attribute<domein> domein_rel (BAG/adres):= rlookup(key, domein/values);

			unit<uint32> domein:= unique(key)
			,	FreeData = "False"
			,	DialogType = "Map"
			,	DialogData = "locatie"
			{
				attribute<float32>  meanX    := mean(BAG/adres/X , domein_rel);
				attribute<float32>  meanY    := mean(BAG/adres/Y , domein_rel);
				attribute<float32>  medianX  := rth_element(BAG/adres/X ,0.5f, domein_rel);
				attribute<float32>  medianY  := rth_element(BAG/adres/Y ,0.5f, domein_rel);

				attribute<uint32>   countX   := count(BAG/adres/X, domein_rel);
				attribute<float32>  varX     := var(BAG/adres/X  , domein_rel);
				attribute<float32>  varY     := var(BAG/adres/Y  , domein_rel);
				attribute<float32>  var      := varX + varY;
				attribute<point_rd> locatie  := =aggtype == 0b ? 'point(meanX,meanY,point_rd)' : 'point(medianX,medianY,point_rd)';

				attribute<string>  nummeraanduiding_id := countX == 1 ? first(BAG/adres/nummeraanduiding_id , domein_rel) : stringparams/emptystring;
				attribute<string>  bag_postcode        := min(BAG/impl/adres_met_xy/postcode      , domein_rel) == max(BAG/impl/adres_met_xy/postcode      , domein_rel) ? min(BAG/impl/adres_met_xy/postcode      , domein_rel) : stringparams/emptystring;
				attribute<string>  bag_straatnaam      := min(BAG/impl/adres_met_xy/straatnaam    , domein_rel) == max(BAG/impl/adres_met_xy/straatnaam    , domein_rel) ? min(BAG/impl/adres_met_xy/straatnaam    , domein_rel) : stringparams/emptystring;
				attribute<string>  bag_huisnummer      := min(BAG/impl/adres_met_xy/huisnummer_str, domein_rel) == max(BAG/impl/adres_met_xy/huisnummer_str, domein_rel) ? min(BAG/impl/adres_met_xy/huisnummer_str, domein_rel) : stringparams/emptystring;
				attribute<string>  bag_huisletter      := min(BAG/impl/adres_met_xy/huisletter    , domein_rel) == max(BAG/impl/adres_met_xy/huisletter    , domein_rel) ? min(BAG/impl/adres_met_xy/huisletter    , domein_rel) : stringparams/emptystring;
				attribute<string>  bag_toevoeging      := min(BAG/impl/adres_met_xy/toevoeging    , domein_rel) == max(BAG/impl/adres_met_xy/toevoeging    , domein_rel) ? min(BAG/impl/adres_met_xy/toevoeging    , domein_rel) : stringparams/emptystring;
				attribute<string>  bag_woonplaatsnaam  := min(BAG/impl/adres_met_xy/woonplaatsnaam, domein_rel) == max(BAG/impl/adres_met_xy/woonplaatsnaam, domein_rel) ? min(BAG/impl/adres_met_xy/woonplaatsnaam, domein_rel) : stringparams/emptystring;

				attribute<string> PC      := uppercase(values);
				attribute<string> GM_CODE := CBS/gemeente/GM_CODE[point_in_polygon(locatie, /CBS/gemeente/geometry_rd)];
			}
		}
		
		Template vervang_ongewenste_scheidingstekens
		{
			// begin case parameters
			unit<uint32> domain;
			attribute<string> att (domain);
			// eind case parameters

			parameter<string> VeldScheidingsTeken_niet_ingebruik:= TeGeocoderen/bron/TableChopper/VeldScheidingsTeken = ';' ? ',' : ';';
			attribute<string> resultaat (domain):=
				replace(
					replace(
						att
						,stringparams/space ,stringparams/emptystring
						,stringparams/squote,stringparams/emptystring
						,stringparams/tab   ,stringparams/emptystring
						,stringparams/point ,stringparams/emptystring
					)
					,VeldScheidingsTeken_niet_ingebruik, '_'
				)
			;
		}
	}

	container TeGeocoderen
	{
		#include<bron.dms>

		unit<uint32> bronDomein := bron/TableChopper/Domein
		, DialogType = "Map"
		, DialogData = "koppel_aan_bag_aggregaties/Locatie"
		{
			attribute<string> straatnaam     := bron/straatnaam/resultaat;
			attribute<string> postcode       := bron/postcode/resultaat;
			attribute<string> huisnummer     := bron/huisnummer/resultaat;
			attribute<string> huistoevoeging := MakeDefined(bron/huistoevoeging/resultaat, 'geen');
			attribute<string> woonplaatsnaam := bron/woonplaatsnaam/resultaat;
			attribute<string> postcode5      := bron/postcode5/resultaat;
			attribute<string> postcode4      := bron/postcode4/resultaat;

			container keys:=
				for_each_nedv(
					 stap/naam
					,stap/expr_key
					,bronDomein
					,string
				);
		}

		container koppel_aan_bag_aggregaties
		{
			container rlookups:=
				for_each_nedv(
					 stap/naam
					,'rlookup(bronDomein/keys/' + stap/naam + ', BAG/aggregaties/' + stap/naam + '/domein/values)'
					,bronDomein
					,uint32
				)
			,	KeepData = "True";

			parameter<string> niveau_subexpr := AsItemList('case(isDefined(rlookups/'+ stap/naam  + '), ' + string(ID(stap)) + '[niveau])');
			attribute<niveau> niveau_rel (bronDomein) := = 'switch(' + niveau_subexpr + ', rlookup(int8(-1), niveau/code))';
			attribute<int8>   niveau_code(bronDomein) := niveau/code[niveau_rel];

			parameter<string> X_sub_expr := AsItemList('case(niveau_code == int8(' + string(stap/code) + '), BAG/aggregaties/' + stap/naam  + '/domein/meanX[rlookups/' + stap/naam  + '])');

			attribute<float32> X                   (bronDomein) := = 'switch(' + X_sub_expr + ', 0f / 0f )';
			attribute<float32> Y                   (bronDomein) := = 'switch(' + replace(X_sub_expr,'meanX','meanY')     + ', 0f / 0f )';
			attribute<uint32>  count               (bronDomein) := = 'switch(' + replace(X_sub_expr,'meanX','countX')    + ', 0  / 0  )';
			attribute<float32> var                 (bronDomein) := = 'switch(' + replace(X_sub_expr,'meanX','var')       + ', 0f / 0f )';

			attribute<string>  nummeraanduiding_id (bronDomein) := = 'switch(' + replace(X_sub_expr,'meanX','nummeraanduiding_id') + ', ' + quote(stringparams/emptystring) + ')';

			attribute<string>  bag_postcode        (bronDomein) := = 'switch(' + replace(X_sub_expr,'meanX','bag_postcode')        + ', ' + quote(stringparams/emptystring) + ')';
			attribute<string>  bag_straatnaam      (bronDomein) := = 'switch(' + replace(X_sub_expr,'meanX','bag_straatnaam')      + ', ' + quote(stringparams/emptystring) + ')';
			attribute<string>  bag_huisnummer      (bronDomein) := = 'switch(' + replace(X_sub_expr,'meanX','bag_huisnummer')      + ', ' + quote(stringparams/emptystring) + ')';
			attribute<string>  bag_huisletter      (bronDomein) := = 'switch(' + replace(X_sub_expr,'meanX','bag_huisletter')      + ', ' + quote(stringparams/emptystring) + ')';
			attribute<string>  bag_toevoeging      (bronDomein) := = 'switch(' + replace(X_sub_expr,'meanX','bag_toevoeging')      + ', ' + quote(stringparams/emptystring) + ')';
			attribute<string>  bag_woonplaatsnaam  (bronDomein) := = 'switch(' + replace(X_sub_expr,'meanX','bag_woonplaatsnaam ') + ', ' + quote(stringparams/emptystring) + ')';

			attribute<fpoint>  locatie             (bronDomein) := point(X,Y,fpoint);
			container buurt
			{
				attribute<cbs/buurt> buurt_rel (bronDomein) := point_in_polygon(locatie, fpolygon(cbs/buurt/Geometry));
				attribute<string>    code      (bronDomein) := cbs/buurt/bu_code[buurt_rel];
				attribute<string>    naam      (bronDomein) := cbs/buurt/bu_naam[buurt_rel];
			}
			container wijk
			{
				attribute<cbs/wijk> wijk_rel (bronDomein) := point_in_polygon(locatie, fpolygon(cbs/wijk/Geometry));
				attribute<string>   code     (bronDomein) := cbs/wijk/wk_code[wijk_rel];
				attribute<string>   naam     (bronDomein) := cbs/wijk/wk_naam[wijk_rel];
			}
			container gemeente
			{
				attribute<cbs/gemeente> gemeente_rel (bronDomein) := point_in_polygon(locatie, fpolygon(cbs/gemeente/Geometry));
				attribute<string>       code         (bronDomein) := cbs/gemeente/gm_code[gemeente_rel];
				attribute<string>       naam         (bronDomein) := cbs/gemeente/gm_naam[gemeente_rel];
			}
			container nvm_regio
			{
				attribute<nvm/regio>    nvmreg_rel   (bronDomein) := point_in_polygon(locatie, fpolygon(nvm/regio/Geometry));
				attribute<string>       naam         (bronDomein) := nvm/regio/regionaam[nvmreg_rel];
				attribute<string>       code         (bronDomein) := nvm/regio/regioid[nvmreg_rel];
			}
			container nvm_afdeling
			{
				attribute<nvm/afdeling> nvmafd_rel   (bronDomein) := point_in_polygon(locatie, fpolygon(nvm/afdeling/Geometry));
				attribute<string>       naam         (bronDomein) := nvm/afdeling/afdeling[nvmafd_rel];
				attribute<string>       code         (bronDomein) := nvm/afdeling/afdid[nvmafd_rel];
			}
			unit<uint32> nvm_afd_niveau := combine(nvm/afdeling, niveau) // TODO: entiteit definitie verplaatsen naar rapportage template of generieke stamtabel container
			{
				attribute<string> Label := nvm/afdeling/afdeling[nr_1] + ' - ' + niveau/naam[nr_2];
				// vanaf hier specifiek per brondata set of verplaatsen naar een rapportage template
				attribute<.> rel(bronDomein) := combine_data(., nvm_afdeling/nvmafd_rel, niveau_rel); 
				attribute<uint32> count := pcount(rel);
			}

			container bag_adres_velden
			{
				attribute<string>  bag_key_replaced (bronDomein) := replace(bag_key, '_',';');
				attribute<string>  postcode         (bronDomein) := ReadElems(bag_key_replaced, string, const(0,bronDomein));
				attribute<string>  straatnaam       (bronDomein) := ReadElems(bag_key_replaced, string, postcode/readPos);
				attribute<string>  huisnummer       (bronDomein) := ReadElems(bag_key_replaced, string, straatnaam/readPos);
				attribute<string>  huistoevoeging   (bronDomein) := ReadElems(bag_key_replaced, string, huisnummer/readPos);
				attribute<string>  woonplaatsnaam   (bronDomein) := ReadElems(bag_key_replaced, string, huistoevoeging/readPos);
			}

			unit<uint32> geen_nummeraanduiding := select_with_org_rel(strlen(trim(TeGeocoderen/koppel_aan_bag_aggregaties/nummeraanduiding_id)) < 2)
			{
				attribute<string> bron_adres         := TeGeocoderen/bron/TableChopper/BodyLines[org_rel];

				attribute<string> postcode_bag       := bag_postcode[org_rel];
				attribute<string> straatnaam_bag     := bag_straatnaam [org_rel];
				attribute<string> huisnummer_bag     := bag_huisnummer [org_rel];
				attribute<string> huisletter_bag     := bag_huisletter [org_rel];
				attribute<string> toevoeging_bag     := bag_toevoeging [org_rel];
				attribute<string> woonplaatsnaam_bag := bag_woonplaatsnaam[org_rel];
			}
			
			container metainformatie
			{
				attribute<niveau>  niveau_rel            (bronDomein) := ../niveau_rel;
				attribute<uint32>  niveau_count          (niveau)     := pcount(niveau_rel);
				attribute<float32> gemiddelde_aantal     (niveau)     := MakeDefined(mean(float32(count), niveau_rel),0f);
				attribute<float32> gemiddelde_variantie  (niveau)     := MakeDefined(mean(var, niveau_rel),0f);
				attribute<float32> percentage            (niveau)     := float32(niveau_count) / float32(#(bronDomein)) * 100f;
				attribute<float32> percentage_cumulatief (niveau)     := cumulate(percentage);
				attribute<string>  aggregatie_type       (niveau)     := /niveau/aggtype == 0b ? 'mean' : 'median';

				container bestand
				{
					parameter<string> Kopregel := 'code;omschrijving;aantal;gemiddeld aantal adressen;gemiddelde variantie;percentage;percentage cumulatief;aggregatie type';
					parameter<string> Body     := 
						AsList(
							   string(niveau/code) + ';' + replace(niveau/volgorde,',',' ') + ';' + string(niveau_count)  + ';' + 
							   string(gemiddelde_aantal) + ';' +  string(gemiddelde_variantie) + ';' + string(percentage) + ';' +  string(percentage_cumulatief) + ';' + 
							   string(aggregatie_type)
							,stringparams/newline
						);
					
					parameter<string> resultaat := Kopregel + stringparams/newline + Body
					,	IntegrityCheck = "GeoDmsVersion() >= 7.123" // i.v.m. variantie berekening
					,	StorageName    = "%LocalDataProjDir%/resultaat_meta.csv"
					,	StorageType    = "str";
				}

				unit<uint32> buurt := CBS/buurt
				{
					attribute<uint32> nr_BAG_adressen            := pcount(BAG/adres/buurt_rel);
					attribute<uint32> nr_geogecodeerde_adressen  := pcount(TeGeocoderen/koppel_aan_bag_aggregaties/buurt/buurt_rel);
					
					parameter<string> Kopregel := 'buurt_code;buurt_naam;aantal BAG adressen;aantal gegeocodeerde adressen';
					parameter<string> Body     := AsList(BU_CODE + ';' + BU_NAAM + ';' + string(nr_BAG_adressen) + ';' + string(nr_geogecodeerde_adressen), stringparams/newline);

					parameter<string> resultaat := Kopregel + stringparams/newline + Body
					,	StorageName    = "%LocalDataProjDir%/resultaat_per_buurt.csv"
					,	StorageType    = "str";
				}

				unit<uint32> wijk := CBS/wijk
				{
					attribute<uint32> nr_BAG_adressen            := pcount(BAG/adres/wijk_rel);
					attribute<uint32> nr_geogecodeerde_adressen  := pcount(TeGeocoderen/koppel_aan_bag_aggregaties/wijk/wijk_rel);
					
					parameter<string> Kopregel := 'wijk_code;wijk_naam;aantal BAG adressen;aantal gegeocodeerde adressen';
					parameter<string> Body     := AsList(WK_CODE + ';' + WK_NAAM + ';' + string(nr_BAG_adressen) + ';' + string(nr_geogecodeerde_adressen), stringparams/newline);

					parameter<string> resultaat := Kopregel + stringparams/newline + Body
					,	StorageName    = "%LocalDataProjDir%/resultaat_per_wijk.csv"
					,	StorageType    = "str";
				}

				unit<uint32> gemeente := CBS/gemeente
				{
					attribute<uint32> nr_BAG_adressen            := pcount(BAG/adres/gemeente_rel);
					attribute<uint32> nr_geogecodeerde_adressen  := pcount(TeGeocoderen/koppel_aan_bag_aggregaties/gemeente/gemeente_rel);
					
					parameter<string> Kopregel := 'gem_code;gem_naam;aantal BAG adressen;aantal gegeocodeerde adressen';
					parameter<string> Body     := AsList(GM_CODE + ';' + GM_NAAM + ';' + string(nr_BAG_adressen) + ';' + string(nr_geogecodeerde_adressen), stringparams/newline);

					parameter<string> resultaat := Kopregel + stringparams/newline + Body
					,	StorageName    = "%LocalDataProjDir%/resultaat_per_gemeente.csv"
					,	StorageType    = "str";
				}

				unit<uint32> nvm_afd:= nvm/afdeling
				{
					attribute<uint32> nr_BAG_adressen            := pcount(BAG/adres/nvmafd_rel);
					attribute<uint32> nr_geogecodeerde_adressen  := pcount(TeGeocoderen/koppel_aan_bag_aggregaties/nvm_afdeling/nvmafd_rel);
		
					parameter<string> NiveauLinesExpr := 
						'add('+
								AsItemList(Quote(';')+'+string(nvm_afd_niveau/count[combine_data(nvm_afd_niveau, ID(nvm_afd), '+String(ID(niveau))+'[niveau])])')
							+')';
					attribute<string> NiveauLines := = NiveauLinesExpr;

					parameter<string> Kopregel  := 'afd_id;afd_naam;aantal BAG adressen;aantal gegeocodeerde adressen'+AsList(';C'+String(Niveau/code),'');
					attribute<string> BodyLines := 
							AFDID + ';' + 
							AFDELING + ';' + 
							string(nr_BAG_adressen) + ';' + 
							string(nr_geogecodeerde_adressen) +
							NiveauLines
						;

					parameter<string> resultaat:= Kopregel + stringparams/newline + AsList(BodyLines, stringparams/newline)
					,	StorageName    = "%LocalDataProjDir%/resultaat_per_nvmafdeling.csv"
					,	StorageType    = "str";
				}
			}
		}
	}

	container export
	{
		unit<uint32> extra_velden: nrofrows = 12
		{
			attribute<string> naam     :  ['niveau_code','X','Y','count','var','nummeraanduiding_id','bag_postcode','bag_straatnaam','bag_huisnummer','bag_huisletter','bag_toevoeging','bag_woonplaatsnaam'];
			attribute<string> ItemNaam := 'TeGeocoderen/koppel_aan_bag_aggregaties/' + naam;
		}

		container impl
		{
			parameter<string> ScheidingsTeken := TeGeocoderen/bron/TableChopper/VeldScheidingsTeken;
			parameter<string> Kopregel        := TeGeocoderen/bron/TableChopper/KopRegel + ScheidingsTeken + 'buurt_code'+ ScheidingsTeken +'wijk_code'+ ScheidingsTeken +'gemeente_code'+ ScheidingsTeken +'nvmafd_code' + ScheidingsTeken + AsList(export/extra_velden/naam, ScheidingsTeken);

			attribute<string> BodyExtra (TeGeocoderen/bronDomein):= = AsList(
				'MakeDefined(String(' + export/extra_velden/ItemNaam + '),stringparams/emptystring)'
			,	' + ' + quote(ScheidingsTeken) + ' + '
			);
			attribute<string> Body      (TeGeocoderen/bronDomein):= 
				  TeGeocoderen/bron/TableChopper/BodyLines + ScheidingsTeken 
				+ MakeDefined(TeGeocoderen/koppel_aan_bag_aggregaties/buurt/code,stringparams/emptystring) + ScheidingsTeken 
				+ MakeDefined(TeGeocoderen/koppel_aan_bag_aggregaties/wijk/code,stringparams/emptystring) + ScheidingsTeken 
				+ MakeDefined(TeGeocoderen/koppel_aan_bag_aggregaties/gemeente/code,stringparams/emptystring) + ScheidingsTeken  
				+ MakeDefined(TeGeocoderen/koppel_aan_bag_aggregaties/nvm_afdeling/code,stringparams/emptystring) + ScheidingsTeken  
				+ BodyExtra + ScheidingsTeken ;
		}

		parameter<string> bestand:= impl/Kopregel + stringparams/newline + AsList(impl/Body, stringparams/newline) + stringparams/newline 
		//+ substr(TeGeocoderen/koppel_aan_bag_aggregaties/metainformatie/bestand/resultaat,0,0)
		,	IntegrityCheck    = "GeoDmsVersion() >= 7.126" // i.v.m. from_utf operator
		,	StorageName       = "%LocalDataProjDir%/resultaat.csv"
		,	StorageType       = "str"
		,	ExplicitSuppliers = "TeGeocoderen/koppel_aan_bag_aggregaties/metainformatie/bestand/resultaat;"
								"TeGeocoderen/koppel_aan_bag_aggregaties/metainformatie/buurt/resultaat;"
								"TeGeocoderen/koppel_aan_bag_aggregaties/metainformatie/wijk/resultaat;"
								"TeGeocoderen/koppel_aan_bag_aggregaties/metainformatie/gemeente/resultaat;"
								"TeGeocoderen/koppel_aan_bag_aggregaties/metainformatie/nvm_afd/resultaat";
	}
	
	container analyses
	{
		#include<adresveld_wel_in_bron_niet_in_BAG.dms>
	}
}