////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
//                                                                                    //
//              Configuratie voor project: BAG 2.0 XML bronfiles > FSS                //
//                                                                                    //
//                              Object Vision 2022                                    //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
// In deze configuratie worden een aantal overzichten gemaakt behorend bij een.       //
// snapshot                                                                           //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////

container overzichten
{
	container impl
	{
		unit<uint8> numericlist: nrofrows = 10
		{
			attribute<string> values := string(id(.));
		}
		unit<uint8> alphabetlist: nrofrows = 26
		{
			attribute<string> values: ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];
		}

		parameter<string> tab     := '\t';
		parameter<string> newline := '\n';

		unit<uint32> rapport_items := SubTree_PropValues(rapport,'fullname')
		{
			attribute<string> expr       := union_data(.,rapport_items_expr/expr);
			attribute<string> name       := union_data(.,rapport_items_name/name);
			attribute<string> valuesunit := union_data(.,rapport_items_valuesunit/valuesunit);
		}

		unit<uint32> rapport_items_expr       := SubTree_PropValues(rapport,'expr');
		unit<uint32> rapport_items_name       := SubTree_PropValues(rapport,'name');
		unit<uint32> rapport_items_valuesunit := SubTree_PropValues(rapport,'valuesunit');

		unit<uint32> rapport_items_sel := select_with_org_rel(strcount(lowercase(rapport_items/FullName),'impl') == 0 && lowercase(rapport_items/name) <> 'per_objecttype')
		{
			attribute<string> fullname   := rapport_items/fullname[org_rel];
			attribute<string> name       := rapport_items/name[org_rel];
			attribute<string> expr       := rapport_items/expr[org_rel];
			attribute<bool>   isDataItem := strcount(lowercase(rapport_items/valuesunit[org_rel]),'unknown') == 0;

			attribute<uint32> level    := strcount(fullname, '/') - 4;

			attribute<uint32> relpos   := strpos(fullname, 'rapport');
			attribute<string> relname  := isDataItem ? substr(fullname, relpos, strlen(fullname) - relpos) : quote(name);
			attribute<string> label    := repeat(tab,level) + name + ': ';
		}

		parameter<string> seperator:= ' + ' + quote(newline) + ' + ';
		parameter<string> genereer_rapport_expr :=
			AsList(
				quote(rapport_items_sel/label) + ' + ' + 'string(' + rapport_items_sel/relname + ')'
				, seperator
			);
		parameter<string> genereer_rapport:= = genereer_rapport_expr
		,	StorageName = "= SnapshotDir + '/overzicht.txt'"
		,	StorageType = "str";
	}

	container rapport
	{
		parameter<string> BAG_historie      := FSSDir;
		parameter<int32>  BAG_snapshotdatum := prik_datum;

		container per_objecttype := for_each_ne(
			 'aantal_' + typeringen/objecttypes/name
			,'overzichten/per_objecttype(
				'+ typeringen/objecttypes/name + '/result 
				, /typeringen/status/' + typeringen/objecttypes/name +
			')'
		);

		container mogelijke_fouten
		{
			container missing
			{
				parameter<uint32> ligplaats_zonder_geometry            := sum(uint32(isNull(ligplaats/result/geometry_mm)));
				parameter<uint32> standplaats_zonder_geometry          := sum(uint32(isNull(standplaats/result/geometry_mm)));
				parameter<uint32> pand_zonder_geometry                 := sum(uint32(isNull(pand/result/geometry_mm)));
				parameter<uint32> vbo_zonder_geometry                  := sum(uint32(isNull(vbo/result/geometry_mm)));
				parameter<uint32> woonplaats_zonder_geometry           := sum(uint32(isNull(woonplaats/result/geometry_mm)));

				parameter<uint32> pand_zonder_bouwjaar                 := sum(uint32(isNull(pand/result/bouwjaar)));

				parameter<uint32> vbo_zonder_oppervlakte               := sum(uint32(isNull(vbo/result/oppervlakte)));

				parameter<uint32> nummeraanduidingen_zonder_huisnummer := sum(uint32(isNull(nummeraanduiding/result/huisnummer)));
				parameter<uint32> nummeraanduidingen_zonder_postcode   := sum(uint32(isNull(nummeraanduiding/result/postcode)));
			}

			container vreemdewaarden
			{
				parameter<uint32> pand_bouwjaren_voor_1051_of_na_2020             := sum(uint32(pand/result/bouwjaar   < int16(1051) || pand/result/bouwjaar   >= int16(2020)));
				parameter<uint32> vbo_oppervlakte_kleiner_5_of_groter_500000      := sum(uint32(vbo/result/oppervlakte < int32(5)    || vbo/result/oppervlakte >= int32(500000)));

				parameter<uint32> nummeraanduiding_postcodes_ongelijk_6_karakters :=
					sum(
						uint32(
							isNull(rlookup(substr(nummeraanduiding/result/postcode,0,1), impl/numericlist/values)) ||
							isNull(rlookup(substr(nummeraanduiding/result/postcode,1,1), impl/numericlist/values)) ||
							isNull(rlookup(substr(nummeraanduiding/result/postcode,2,1), impl/numericlist/values)) ||
							isNull(rlookup(substr(nummeraanduiding/result/postcode,3,1), impl/numericlist/values)) ||
							isNull(rlookup(substr(lowercase(nummeraanduiding/result/postcode),4,1), impl/alphabetlist/values)) ||
							isNull(rlookup(substr(lowercase(nummeraanduiding/result/postcode),5,1), impl/alphabetlist/values))
						)
					);
			}

			container referentieel
			{
				parameter<uint32> ligplaats_nummeraanduiding_id_zonder_record_in_nummeraanduiding        := sum(uint32(isNull(rlookup(ligplaats/result/nummeraanduiding_id           , nummeraanduiding/result/identificatie))));
				parameter<uint32> ligplaats_nevenadres_zonder_record_in_nummeraanduiding                 := sum(uint32(isNull(rlookup(ligplaats/result/nevenadres/nummeraanduiding_id, nummeraanduiding/result/identificatie))));

				parameter<uint32> standplaats_nummeraanduiding_id_zonder_record_in_nummeraanduiding      := sum(uint32(isNull(rlookup(standplaats/result/nummeraanduiding_id           , nummeraanduiding/result/identificatie))));
				parameter<uint32> standplaats_nevenadres_zonder_record_in_nummeraanduiding               := sum(uint32(isNull(rlookup(standplaats/result/nevenadres/nummeraanduiding_id, nummeraanduiding/result/identificatie))));

				parameter<uint32> vbo_nummeraanduiding_id_zonder_record_in_nummeraanduiding              := sum(uint32(isNull(rlookup(vbo/result/nummeraanduiding_id           , nummeraanduiding/result/identificatie))));
				parameter<uint32> vbo_nevenadres_zonder_record_in_nummeraanduiding                       := sum(uint32(isNull(rlookup(vbo/result/nevenadres/nummeraanduiding_id, nummeraanduiding/result/identificatie))));
				parameter<uint32> vbo_zonder_gereletareed_pand                                           := sum(uint32(isNull(rlookup(vbo/result/identificatie,                  vbo/result/gerelateerdPand/identificatie))));

				parameter<uint32> vbo_pand_id_zonder_record_in_pand                                      := sum(uint32(isNull(rlookup(vbo/result/gerelateerdPand/pand_id, pand/result/identificatie))));
				parameter<uint32> vbo_pand_id_niet_in_gerelateerd_pand_geometrie                         := sum(uint32(!any(impl/pand_id_is_pand_id_geom,impl/result_rel)));

				parameter<uint32> nummeraanduiding_openbareruimte_id_zonder_record_in_openbareruimte     := sum(uint32(isNull(rlookup(nummeraanduiding/result/openbareruimte_id, openbareruimte/result/identificatie))));
				parameter<uint32> nummeraanduiding_gerelateerdeWoonplaats_id_zonder_record_in_woonplaats := sum(uint32(isNull(rlookup(nummeraanduiding/result/woonplaats_id , woonplaats/result/identificatie))));

				parameter<uint32> openbareruimte_gerelateerdeWoonplaats_id_zonder_record_in_woonplaats   := sum(uint32(isNull(rlookup(openbareruimte/result/woonplaats_id, woonplaats/result/identificatie))));

				container impl
				{
					attribute<string>     pand_id_geom            (vbo/result/gerelateerdPand) := rjoin(vbo/result/gerelateerdPand/identificatie, vbo/result/identificatie, vbo/result/pand_id_geom);
					attribute<bool>       pand_id_is_pand_id_geom (vbo/result/gerelateerdPand) := vbo/result/gerelateerdPand/pand_id == pand_id_geom;
					attribute<vbo/result> result_rel              (vbo/result/gerelateerdPand) := rlookup(vbo/result/gerelateerdPand/identificatie, vbo/result/identificatie);
				}
			}

			container incorrecte_geometrie
			{
				parameter<uint32> ligplaats_minder_dan_3_punten   := sum(uint32(impl/ligplaats_nr_points < 3));
				parameter<uint32> standplaats_minder_dan_3_punten := sum(uint32(impl/standplaats_nr_points < 3));
				parameter<uint32> pand_minder_dan_3_punten        := sum(uint32(impl/pand_nr_points < 3));
				parameter<uint32> woonplaats_minder_dan_3_punten  := sum(uint32(impl/woonplaats_nr_points < 3));

				container impl
				{
					unit<uint32>      ligplaats_pointset  := Sequence2Points(ligplaats/result/geometry_mm);
					attribute<uint32> ligplaats_nr_points (ligplaats/result) := max(ligplaats_pointset/ordinal, ligplaats_pointset/SequenceNr) + 1;

					unit<uint32>      standplaats_pointset  := Sequence2Points(standplaats/result/geometry_mm);
					attribute<uint32> standplaats_nr_points (standplaats/result) := max(standplaats_pointset/ordinal, standplaats_pointset/SequenceNr) + 1;

					unit<uint32>      pand_pointset  := Sequence2Points(pand/result/geometry_mm);
					attribute<uint32> pand_nr_points (pand/result) := max(pand_pointset/ordinal, pand_pointset/SequenceNr) + 1;

					unit<uint32>      woonplaats_pointset  := Sequence2Points(woonplaats/result/geometry_mm);
					attribute<uint32> woonplaats_nr_points (woonplaats/result) := max(woonplaats_pointset/ordinal, woonplaats_pointset/SequenceNr) + 1;
				}
			}
		}
	}

	template per_objecttype
	{
		// begin case parameters
		unit<uint32> impl_src;
		unit<uint8>  impl_statustype;
		//

		parameter<uint32> totaal := #impl_src;

		container impl
		{
			attribute<uint32> pcount (impl_statustype) := pcount(rlookup(lowercase(impl_src/meta/STATUS), impl_statustype/label));
		}

		parameter<string> status_lijst :=
			overzichten/impl/newline + overzichten/impl/tab + overzichten/impl/tab + asList(impl_statustype/label + ': ' + string(impl/pcount), overzichten/impl/newline + overzichten/impl/tab + overzichten/impl/tab);
	}
}