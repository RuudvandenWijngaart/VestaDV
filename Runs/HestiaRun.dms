//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2021 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container HestiaRun
{
		// Ophalen eenheden, gebiedsafbakeningen en typeringen.
	#include <%projDir%/model/Units.dms>
	#include <%projDir%/model/Geography.dms>
	#include <%projDir%/model/Classifications.dms>

	// Invoer: hier kunnen meerdere rekenstappen gedefinieerd worden.

	unit<uint32> KalibratieInputs : StorageName = "%projDir%/runs/KalibratieInput.csv", StorageType = "gdal2.vect", StorageReadOnly = "True"
	{
		parameter<uint8>        Input_nrYears          := first(nryears)[uint8];
		parameter<string>       Input_StudieGebied     := first(studiegebied)[string];
		parameter<bool>         Input_StartGegevensAan := first(StartGegevensAan)[bool];
		parameter<units/ratio>  Input_Spreiding        := first(Spreiding)[units/ratio];
		parameter<units/ratio>  Input_Staart           := first(Staart)[units/ratio];
		parameter<uint8>        Input_RenovatieGrens   := first(RenovatieGrens)[uint8];
		parameter<bool>         Input_use_CPT          := first(CPT)[bool];
		parameter<bool>         Input_use_LossAversion := first(LossAversion)[bool];
		parameter<bool>         Input_use_DimSens      := first(DiminishingSensitivity)[bool];
		parameter<bool>         Input_use_ProbWeight   := first(ProbabilityWeighting)[bool];
		parameter<units/ratio>  Input_LA_lambda        := first(lambda)[units/ratio];
		parameter<units/ratio>  Input_DS_alpha         := first(alpha)[units/ratio];
		parameter<units/ratio>  Input_DS_beta          := first(beta)[units/ratio];
		parameter<units/ratio>  Input_PW_discont       := first(discontovoet)[units/ratio];
	}

	//parameter<uint8> rowcount := 51[uint8];
	parameter<uint8> rowcount := KalibratieInputs/Input_nrYears;

	unit<uint8> all_rekenstap: nrofrows = 51;

	unit<uint8> rekenstap:= subset(id(all_rekenstap) < rowcount), IsHidden = "True"
	{
		attribute<units/yr_uint16> Jaar  := (uint16(2000) + uint16(id(.)))[units/yr_uint16];

		attribute<string>          label := string(id(.))+'_'+string(Jaar);
		attribute<string>          name  := id(.) == 0b ? 'StartJaar' : 'R' + label; 

		unit<uint8> repeats  := subset(id(rekenstap) != 0b), IsHidden = "True"
		{
			attribute<string>name:=rekenstap/name[nr_orgentity];
		}
		template Rx_xxxx := Overige, IsHidden = "True";
	}	
	
	container Invoer : Using = "Units"
	{
		// Invoer: Geografische selectie welke gebied wordt onderzocht.

		// Volledig Nederland zonder selectie. Comment uit indien een andere optie gekozen wordt.
		// parameter<string>   StudieGebied : ['GM0050'];
		//   parameter<string>   StudieGebied := KalibratieInputs/Input_StudieGebied;


		// Enkele gemeente als selectie. Comment in om te gebruiken.
		//	parameter<string>   StudieGebied : ['GM0050']; //GM0050 (Zeewolde) is handig om kleinschalig te testen OF GM0213 (meer oudere gebouwen)

		//Meerdere gemeenten als studiegebied. Comment in om te gebruiken.
		//	parameter<string>   StudieGebied : ['GM0402,GM0344,GM1581,GM0439,GM0153,GM0599,GM0034,GM0050,GM0321'];

	    // RES-regio als selectie. Comment in om te gebruiken.
		//	parameter<string>   RES_Gebied   : ['RESTwente'];
		//	parameter<string>   StudieGebied :=
		//	Geography/RegioIndelingen/Energieregio/GM_code_list[rlookup(RES_Gebied, Geography/RegioIndelingen/Energieregio/name)];
		
		//  Provincie als selectie. Comment in om te gebruiken.
			parameter<string>   Provincie:= KalibratieInputs/Input_StudieGebied;
			parameter<string>   StudieGebied :=
			Geography/RegioIndelingen/Provincie/GM_code_list[rlookup(Provincie, Geography/RegioIndelingen/Provincie/name)];

		// parameter<bool> StartgegevensAan := false, Descr = "Worden invoer voor isolatieniveaus en gebouwopties meegenomen?";
		   parameter<bool> StartgegevensAan := KalibratieInputs/Input_StartGegevensAan;

		container DefaultInstellingen
		{
			// Ophalen opties voor instellingen die per rekenstap gebruikt kunnen worden.
			#include <%projDir%/Runs/DefaultSettings/Basis.dms>
			#include <%projDir%/Runs/DefaultSettings/Rekenstap.dms>		
		}
		
		container SpecifiekeInstellingen := DefaultInstellingen/Basis
		{
			// Invoer: welke energieprijzenbestanden worden gebruikt.
			parameter<string> Energieprijzenbron       := '20210326_Energieprijzen_KEV2019',
				Descr = "Energieprijzen in het basispad van de Klimaat en Energie Verkenning 2019 (PBL)", IsHidden = "True";
			
			// Invoer: worden bestaande warmtenetten meegenomen JA/NEE.
			parameter<bool>   HasStartingArcSet := false, IsHidden = "True";
			
			// Invoer: Per rekenstap worden specifieke instellingen gebruikt.
			// De lijst van rekenstappen wordt gedefinieerd bij rekenstap.
			
			container RekenStappen := for_each_nt(rekenstap/repeats/name, rekenstap/Rx_xxxx)
			{
				container StartJaar := DefaultInstellingen/Basis;
				container Overige   := DefaultInstellingen/Rekenstap/Specifiek;
			}
		}
		// Ophalen ruimtelijke invoerbestanden, kengetallen en energieprijzen.
		#include <%projDir%/model/Beleid.dms>
		#include <%projDir%/model/RuimtelijkeData.dms>
		#include <%projDir%/model/Kengetallen.dms>
		#include <%projDir%/model/EnergiePrijzen.dms>

		
		container TechnischeInstellingen: IsHidden = "True" {
			parameter<uint32> RandomSeed := 1;
			parameter<uint32> TileSize := 256*256;
			parameter<uint32> NrProcessors := 20;
			parameter<uint32> ThisProcessor := 3;			
		}
	}

	// Ophalen overige rekenschemas.
	#include <%projDir%/model/stam.dms>
	#include <%projDir%/model/BeginSituatie.dms>
	#include <%projDir%/model/TussenResultaten.dms>
	#include <%projDir%/model/Resultaten.dms>
	#include <%projDir%/model/ConfigSettings.dms>
	#include <%projDir%/model/ExportSettings.dms>
	unit<uint8> Tellingen := select_orgrel(ID(classifications/zichtjaar) < 51b) // voor telling testen niet altijd alle jaren nodig
	{
		attribute<string> name := org_rel->name;
		attribute<uint32> BO                    := ='union_data(., '+AsItemList('#/TussenResultaten/'+name+'/BebouwingsComponenten/Woning/BO')+')';
		attribute<units/nrAsl> BO_asl           := ='union_data(., '+AsItemList('sum(/TussenResultaten/'+name+'/BebouwingsComponenten/Woning/BO/nrAansluitingen)')+')';
		attribute<uint32> ProductActieveWoning  := ='union_data(., '+AsItemList('#/TussenResultaten/'+name+'/BebouwingsComponenten/Woning/ProductActieveWoning')+')';
		attribute<uint32> BouwdeelActieveWoning := ='union_data(., '+AsItemList('#/TussenResultaten/'+name+'/BebouwingsComponenten/Woning/BouwdeelActieveWoning')+')';
		attribute<uint32> OptiesHere            := ='union_data(., '+AsItemList('#/TussenResultaten/'+name+'/BebouwingsComponenten/Woning/ProductActieveWoning/OptiesHere')+')';
		attribute<uint32> DubbelActief          := ='union_data(., '+AsItemList('#/TussenResultaten/'+name+'/BebouwingsComponenten/Woning/ProductActieveWoning/sub_BouwdeelActief')+')';
		attribute<uint32> DA_xIsolatieAmbitie   := ='union_data(., '+AsItemList('#/TussenResultaten/'+name+'/BebouwingsComponenten/Woning/ProductActieveWoning/sub_BouwdeelActief/xIsolatieAmbitie')+')';
		attribute<uint32> EnkelProductActief    := ='union_data(., '+AsItemList('#/TussenResultaten/'+name+'/BebouwingsComponenten/Woning/ProductActieveWoning/sub_BouwdeelInactief')+')';
		attribute<uint32> PA_xIsolatieAmbitie   := ='union_data(., '+AsItemList('#/TussenResultaten/'+name+'/BebouwingsComponenten/Woning/ProductActieveWoning/xIsolatieAmbitie')+')';
		attribute<uint32> BA_AmbitieBerekening  := ='union_data(., '+AsItemList('#/TussenResultaten/'+name+'/BebouwingsComponenten/Woning/BouwdeelActieveWoning/AmbitieBerekening')+')';
		attribute<uint32> EnkelBouwdeelActief   := ='union_data(., '+AsItemList('#/TussenResultaten/'+name+'/BebouwingsComponenten/Woning/BouwdeelActieveWoning/ProductInactieveBO')+')';
		attribute<uint32> EBA_AmbitieBerekening := ='union_data(., '+AsItemList('#/TussenResultaten/'+name+'/BebouwingsComponenten/Woning/BouwdeelActieveWoning/ProductInactieveAmbitie')+')';
		attribute<uint32> ActieveWoning         := ='union_data(., '+AsItemList('#/TussenResultaten/'+name+'/BebouwingsComponenten/Woning/ActieveWoning')+')';
		attribute<units/nrAsl> A_asl            := ='union_data(., '+AsItemList('sum( /TussenResultaten/'+name+'/BebouwingsComponenten/Woning/ActieveWoning/BO_rel->nrAansluitingen)')+')';
		attribute<uint32> A_xInvesteringsOptie  := ='union_data(., '+AsItemList('#/TussenResultaten/'+name+'/BebouwingsComponenten/Woning/ActieveWoning/xInvesteringsOptie')+')';
		attribute<uint32> A_xGebouwOptie        := ='union_data(., '+AsItemList('#/TussenResultaten/'+name+'/BebouwingsComponenten/Woning/ActieveWoning/xGebouwOptie')+')';
		attribute<uint32> A_GeschikteOptie      := ='union_data(., '+AsItemList('#/TussenResultaten/'+name+'/BebouwingsComponenten/Woning/ActieveWoning/GeschikteOptie')+')';
		
		attribute<uint32> A_Zonder_xIO          := ='ActieveWoning        - union_data(., '+AsItemList('sum_uint32(pcount(/TussenResultaten/'+name+'/BebouwingsComponenten/Woning/ActieveWoning/xInvesteringsOptie/ActieveWoning_rel )>0)')+')';
		attribute<uint32> AxIO_Zonder_GO        := ='A_xInvesteringsOptie - union_data(., '+AsItemList('sum_uint32(pcount(/TussenResultaten/'+name+'/BebouwingsComponenten/Woning/ActieveWoning/GeschikteOptie/xInvesteringsOptie_rel)>0)')+')';

		container KalibratieTellingen
		{
			attribute<units/nrAsl> Asl             (Tellingen) := ='union_data(.., '+AsItemList('/Resultaten/'+name+'/Installaties/Results/Asl')+')';
			attribute<units/nrAsl> A               (Tellingen) := ='union_data(.., '+AsItemList('/Resultaten/'+name+'/Installaties/Results/A')+')';
			attribute<units/nrAsl> B               (Tellingen) := ='union_data(.., '+AsItemList('/Resultaten/'+name+'/Installaties/Results/B')+')';
			attribute<units/nrAsl> C               (Tellingen) := ='union_data(.., '+AsItemList('/Resultaten/'+name+'/Installaties/Results/C')+')';
			attribute<units/nrAsl> D               (Tellingen) := ='union_data(.., '+AsItemList('/Resultaten/'+name+'/Installaties/Results/D')+')';
			attribute<units/nrAsl> E               (Tellingen) := ='union_data(.., '+AsItemList('/Resultaten/'+name+'/Installaties/Results/E')+')';
			attribute<units/nrAsl> F               (Tellingen) := ='union_data(.., '+AsItemList('/Resultaten/'+name+'/Installaties/Results/F')+')';
			attribute<units/nrAsl> G               (Tellingen) := ='union_data(.., '+AsItemList('/Resultaten/'+name+'/Installaties/Results/G')+')';
			attribute<units/nrAsl> RV_gas          (Tellingen) := ='union_data(.., '+AsItemList('/Resultaten/'+name+'/Installaties/Results/RV_gas')+')';
			attribute<units/nrAsl> RV_gebiedsoptie (Tellingen) := ='union_data(.., '+AsItemList('/Resultaten/'+name+'/Installaties/Results/RV_gebiedsoptie')+')';
			attribute<units/nrAsl> TW_gas          (Tellingen) := ='union_data(.., '+AsItemList('/Resultaten/'+name+'/Installaties/Results/TW_gas')+')';
			attribute<units/nrAsl> VT_nat          (Tellingen) := ='union_data(.., '+AsItemList('/Resultaten/'+name+'/Installaties/Results/VT_nat')+')';



			unit<uint32> all_rekenstap: nrofrows = 51;

			unit<uint32> rekenstap32 := subset(id(all_rekenstap) < uint32(rowcount)), IsHidden = "True"
			{
				attribute<units/yr_uint16> Jaar  := (uint16(2000) + uint16(id(.)))[units/yr_uint16];

				attribute<string>          label := string(id(.))+'_'+string(Jaar);
				attribute<string>          name  := id(.) == 0u ? 'StartJaar' : 'R' + label; 
			}	

			unit<uint32> table := Rekenstap32
			{
				attribute<Tellingen> Tellingen_rel := rlookup(name, Tellingen/name);

				attribute<units/nrAsl> Asl := KalibratieTellingen/Asl[Tellingen_rel];
				attribute<units/nrAsl> A               := KalibratieTellingen/A[Tellingen_rel];
				attribute<units/nrAsl> B               := KalibratieTellingen/B[Tellingen_rel];
				attribute<units/nrAsl> C               := KalibratieTellingen/C[Tellingen_rel];
				attribute<units/nrAsl> D               := KalibratieTellingen/D[Tellingen_rel];
				attribute<units/nrAsl> E               := KalibratieTellingen/E[Tellingen_rel];
				attribute<units/nrAsl> F               := KalibratieTellingen/F[Tellingen_rel];
				attribute<units/nrAsl> G               := KalibratieTellingen/G[Tellingen_rel];
				attribute<units/nrAsl> RV_gas          := KalibratieTellingen/RV_gas[Tellingen_rel];
				attribute<units/nrAsl> RV_gebiedsoptie := KalibratieTellingen/RV_gebiedsoptie[Tellingen_rel];
				attribute<units/nrAsl> TW_gas          := KalibratieTellingen/TW_gas[Tellingen_rel];
				attribute<units/nrAsl> VT_nat          := KalibratieTellingen/VT_nat[Tellingen_rel];
			}
			parameter<string> OutputFolder := '%localDataProjDir%/Results/Kalibratie/';
			unit<uint32> variable := SubItem_PropValues(table,'name');
			container export_csv := Model/CalculationSchemes/Rapportage/WriteTable32ToCSV(table, AsList(variable/name, ';'), OutputFolder+'KalibratieTellingen.csv');
		}
	}
}
