//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2019 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container Vergelijking: using = "Units"
{
	unit<uint32> PlanRegio          := Invoer/SpecifiekeInstellingen/PlanRegio		, isHidden = "true";
	parameter<bool> IncludeGa := SharedInvoer/IncludeGA;
	
	container Gevoeligheidsanalyses
	{
		parameter<string> G01_name := '_veel_kostenreductie'; 
		parameter<string> G02_name := '_weinig_kostenreductie';
		parameter<string> G03_name := '_lagere_energieprijzen';
		parameter<string> G04_name := '_hogere_energieprijzen';
		container G01_Import := for_each_ne(Class/Variant/name, replace('ImportOneGA(Class/Variant/V/@C' + ',G01_name' + ')','@C',Class/Variant/name));
		container G02_Import := for_each_ne(Class/Variant/name, replace('ImportOneGA(Class/Variant/V/@C' + ',G02_name' + ')','@C',Class/Variant/name));
		container G03_Import := for_each_ne(Class/Variant/name, replace('ImportOneGA(Class/Variant/V/@C' + ',G03_name' + ')','@C',Class/Variant/name));
		container G04_Import := for_each_ne(Class/Variant/name, replace('ImportOneGA(Class/Variant/V/@C' + ',G04_name' + ')','@C',Class/Variant/name));
		
		template ImportOneGA
		{
			//case parameters
			parameter<Class/Variant> VC;
			parameter<string> extension;
			//end
			
			unit<uint32> Hoofdindicatoren
			:	StorageName     = "='%LocalDataProjDir%'+extension+'/results/' + Class/Variant/label[VC] + '/hoofdindicatoren.csv'"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> CODE := substr(_BU_CODE_, 1, 10);
			}
			attribute<string>     BU_CODE              (Planregio):= Invoer/RuimtelijkeData/StudieGebied/buurt/BU_CODE;
			attribute<Eur_ton>    H17_Nat_meerkost_CO2 (Planregio):= rjoin(BU_CODE, hoofdindicatoren/CODE, Hoofdindicatoren/_H17_Nat_meerkost_CO2_Euro_per_mega_g_)[Eur_ton];
		}
	}
	
	container Class
	{
		unit<uint8> Variant : nrofrows = 24
		{
			attribute<string> label :
				['S1a_B_luchtWP'    , 'S1b_B_bodemWP'
				,'S2a_B_Restwarmte' , 'S2b_B_Geo_contour', 'S2c_B_Geo_overal' , 'S2d_D_Restwarmte' , 'S2e_D_Geo_contour' , 'S2f_D_Geo_overal'
				,'S3a_B_LT30_30'    , 'S3b_B_LT30_70'    , 'S3c_B_BuurtWKO'   , 'S3d_B_WKO'        , 'S3e_B_TEO'         , 'S3f_D_LT30_70'    , 'S3g_D_BuurtWKO'   , 'S3h_D_TEO'
				,'S4a_GG_B_hWP'     , 'S4b_GG_B_HR'      , 'S4c_GG_D_hWP'     , 'S4d_GG_D_HR'
				,'S5a_H2_B_hWP'     , 'S5b_H2_B_HR'      , 'S5c_H2_D_hWP'     , 'S5d_H2_D_HR'
				
				] , DialogType = "LabelText";
			attribute<string> name :
				['s1a','s1b'
				,'s2a','s2b','s2c','s2d','s2e','s2f'
				,'s3a','s3b','s3c','s3d','s3e','s3f','s3g','s3h'
				,'s4a','s4b','s4c','s4d'
				,'s5a','s5b','s5c','s5d'
				];
			attribute<Strategie> Strategie_rel :
				[0,0
				,1,1,1,1,1,1
				,2,2,2,2,2,2,2,2
				,3,3,3,3
				,4,4,4,4
				];
			attribute<uint32> Color : DialogType = "BrushColor",
				[
				 rgb(180,097,141), rgb(157,000,100)
				 //S1 PBL kleurstellingen 3033, 3030
				,rgb(236,197,176), rgb(223,155,124), rgb(216,134,101), rgb(205,087,058), rgb(195,033,023), rgb(134,030,004)
				 //S2 PBL kleurstellingen 3097, 3095, 3094, 3092, 3090, 3690
				,rgb(199,227,249), rgb(178,216,246), rgb(156,206,243), rgb(105,185,236), rgb(074,175,232), rgb(000,156,223), rgb(000,135,190), rgb(000,110,154)
				 //S3 PBL kleurstellingen 3017, 3016, 3015, 3013, 3012, 3010, 3611, 3610
				,rgb(188,212,155), rgb(142,185,095), rgb(110,169,064), rgb(069,146,064)
				 //S4 PBL kleurstellingen 3085, 3082, 3080, 3681 
				,rgb(243,214,120), rgb(238,198,105), rgb(233,181,058), rgb(215,152,024)
				 //S5 PBL kleurstellingen 3045, 3043, 3041, 3641
				];
				
/* Kleurcodes oud				
			attribute<uint32> Color : DialogType = "BrushColor",
				[
				 rgb(039,231,064), rgb(019,164,037)
				,rgb(242,145,186), rgb(236,094,154), rgb(231,048,125), rgb(209,024,103), rgb(174,021,086), rgb(133,016,066)
				,rgb(198,222,251), rgb(162,201,249), rgb(126,180,245), rgb(097,163,243), rgb(061,142,241), rgb(023,120,238), rgb(015,102,208), rgb(012,078,158)
				,rgb(216,207,035), rgb(186,179,031), rgb(153,147,026), rgb(124,119,020)
				,rgb(255,186,117), rgb(255,158,062), rgb(249,124,000), rgb(213,106,000)
				];
*/				
			attribute<uint32> PenColor : DialogType = "PenColor",
				=const(rgb(255,255,255), . );
			container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
			attribute<bool> InViewer :
				[true,true
				,true,true,false,true,true,false
				,true,true,false,true,true,true,false,true
				,true,true,true,true //HERE
				,false,false,false,false
				];
				
			attribute<bool> B_InViewer :
				[true,true
				,true,true,false,false,false,false
				,true,true,false,true,true,false,false,false
				,true,true,false,false
				,true,true,false,false
				];
			
			attribute<bool> Variant19 :
				[true,true
				,true,true,false,false,false,false
				,true,true,false,true,true,false,false,false
				,true,true,false,false
				,false,false,false,false
				];
			attribute<bool> Variant19Gasloos :
				[true,true
				,true,true,false,false,false,false
				,true,true,false,true,true,false,false,false
				,false,false,false,false
				,false,false,false,false
				];
			attribute<bool> Variant19GG :
				[false,false
				,false,false,false,false,false,false
				,false,false,false,false,false,false,false,false
				,true,true,false,false
				,false,false,false,false
				];
				
			attribute<bool> Gasloos := !IsGG && !IsH2 && InViewer;
			attribute<bool> IsGG :
				[false,false
				,false,false,false,false,false,false
				,false,false,false,false,false,false,false,false
				,true,true,true,true //HERE
				,false,false,false,false
				];
			attribute<bool> IsH2 :
				[false,false
				,false,false,false,false,false,false
				,false,false,false,false,false,false,false,false
				,false,false,false,false
				,true,true,true,true
				];
		}
		unit<uint8> S1Variant   := subset(Variant/Strategie_rel == 0[Strategie] && Variant/InViewer)
		{
			attribute<string> label := Variant/label[nr_OrgEntity];
			attribute<string> name  := Variant/name[nr_OrgEntity];
			container V             := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		}
		unit<uint8> S2Variant   := subset(Variant/Strategie_rel == 1[Strategie] && Variant/InViewer)
		{
			attribute<string> label := Variant/label[nr_OrgEntity];
			attribute<string> name  := Variant/name[nr_OrgEntity];
			container V             := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		}
		unit<uint8> S3Variant   := subset(Variant/Strategie_rel == 2[Strategie] && Variant/InViewer)
		{
			attribute<string> label := Variant/label[nr_OrgEntity];
			attribute<string> name  := Variant/name[nr_OrgEntity];
			container V             := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		}
		unit<uint8> ViewerVariant   := subset(Variant/InViewer)
		{
			attribute<string> label := Variant/label[nr_OrgEntity];
			attribute<string> name  := Variant/name[nr_OrgEntity];
			container V             := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
			attribute<bool> Gasloos := Variant/Gasloos[nr_OrgEntity];
			attribute<Strategie> Strategie_rel := Variant/Strategie_rel[nr_OrgEntity];
			attribute<uint32> Color : DialogType = "BrushColor",
				=Variant/Color[nr_OrgEntity];
			attribute<uint32> PenColor : DialogType = "PenColor",
				=const(rgb(255,255,255), . );
		}
		unit<uint8> B_Variant   := subset(Variant/B_InViewer)
		{
			attribute<string> label := Variant/label[nr_OrgEntity];
			attribute<string> name  := Variant/name[nr_OrgEntity];
			container V             := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
			attribute<bool> Gasloos := Variant/Gasloos[nr_OrgEntity];
			attribute<Strategie> Strategie_rel := Variant/Strategie_rel[nr_OrgEntity];
			attribute<uint32> Color : DialogType = "BrushColor",
				=Variant/Color[nr_OrgEntity];
			attribute<uint32> PenColor : DialogType = "PenColor",
				=const(rgb(255,255,255), . );
		}
		unit<uint8> Variant19   := subset(Variant/Variant19)
		{
			attribute<string> label := Variant/label[nr_OrgEntity];
			attribute<string> name  := Variant/name[nr_OrgEntity];
			container V             := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
			attribute<bool> Gasloos := Variant/Gasloos[nr_OrgEntity];
			attribute<Strategie> Strategie_rel := Variant/Strategie_rel[nr_OrgEntity];
			attribute<uint32> Color : DialogType = "BrushColor",
				=Variant/Color[nr_OrgEntity];
			attribute<uint32> PenColor : DialogType = "PenColor",
				=const(rgb(255,255,255), . );
		}
		unit<uint8> Variant19Gasloos   := subset(Variant/Variant19Gasloos)
		{
			attribute<string> label := Variant/label[nr_OrgEntity];
			attribute<string> name  := Variant/name[nr_OrgEntity];
			container V             := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
			attribute<bool> Gasloos := Variant/Gasloos[nr_OrgEntity];
			attribute<Strategie> Strategie_rel := Variant/Strategie_rel[nr_OrgEntity];
			attribute<uint32> Color : DialogType = "BrushColor",
				=Variant/Color[nr_OrgEntity];
			attribute<uint32> PenColor : DialogType = "PenColor",
				=const(rgb(255,255,255), . );
		}
		unit<uint8> Variant19GG     := subset(Variant/Variant19GG)
		{
			attribute<string> label := Variant/label[nr_OrgEntity];
			attribute<string> name  := Variant/name[nr_OrgEntity];
			container V             := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
			attribute<bool> Gasloos := Variant/Gasloos[nr_OrgEntity];
			attribute<Strategie> Strategie_rel := Variant/Strategie_rel[nr_OrgEntity];
			attribute<uint32> Color : DialogType = "BrushColor",
				=Variant/Color[nr_OrgEntity];
			attribute<uint32> PenColor : DialogType = "PenColor",
				=const(rgb(255,255,255), . );
		}
		unit<uint8> GasloosVariant  := subset(Variant/Gasloos)
		{
			attribute<string> label := Variant/label[nr_OrgEntity];
			attribute<string> name  := Variant/name[nr_OrgEntity];
			container V             := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
			attribute<Strategie> Strategie_rel := Variant/Strategie_rel[nr_OrgEntity];
			attribute<uint32> Color : DialogType = "BrushColor",
				=Variant/Color[nr_OrgEntity];
			attribute<uint32> PenColor : DialogType = "PenColor",
				=const(rgb(255,255,255), . );
		}
		unit<uint8> H2variant  := subset(Variant/IsH2)
		{
			attribute<string> label := Variant/label[nr_OrgEntity];
			attribute<string> name  := Variant/name[nr_OrgEntity];
			container V             := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
			attribute<Strategie> Strategie_rel := Variant/Strategie_rel[nr_OrgEntity];
			attribute<uint32> Color : DialogType = "BrushColor",
				=Variant/Color[nr_OrgEntity];
			attribute<uint32> PenColor : DialogType = "PenColor",
				=const(rgb(255,255,255), . );
		}
		unit<uint8> GGvariant  := subset(Variant/IsGG)
		{
			attribute<string> label := Variant/label[nr_OrgEntity];
			attribute<string> name  := Variant/name[nr_OrgEntity];
			container V             := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
			attribute<Strategie> Strategie_rel := Variant/Strategie_rel[nr_OrgEntity];
			attribute<uint32> Color : DialogType = "BrushColor",
				=Variant/Color[nr_OrgEntity];
			attribute<uint32> PenColor : DialogType = "PenColor",
				=const(rgb(255,255,255), . );
		}
		unit<uint8> Strategie : nrofrows = 6
		{
			attribute<string> label: ['S1_WP','S2_MT','S3_LT','S4_GG','S5_H2','uitgesloten'] , DialogType = "LabelText";
			attribute<string> name : ['S1','S2','S3','S4','S5','geen'];
			attribute<uint32> Color : DialogType = "BrushColor",
			[
				 rgb(180,097,141)
				,rgb(223,155,124)
				,rgb(178,216,246)
				,rgb(142,185,095)
				,rgb(238,198,105)
				,rgb(220,220,220)
			];
/* Kleurcodes oud	
			attribute<uint32> Color : DialogType = "BrushColor",
			[
				 rgb(020,175,039)
				,rgb(167,020,083)
				,rgb(039,130,239)
				,rgb(228,222,092)
				,rgb(130,124,021)
				,rgb(226,037,241)
			];
*/
			attribute<uint32> PenColor : DialogType = "PenColor",
			[
				 rgb(255,255,255)
				,rgb(255,255,255)
				,rgb(255,255,255)
				,rgb(255,255,255)
				,rgb(255,255,255)
				,rgb(255,255,255)
			];
			container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		}
	}
	container data := for_each_ne(Class/Variant/name, replace('ImportResults(Class/Variant/V/@C)','@C',Class/Variant/name));
	
	container checks
	{
		attribute<Eur_yr> K13_s1a (PlanRegio) := data/s1a/Preresults/K13_Inkoop_Elek;
		attribute<Eur_yr> K13_s5c (PlanRegio) := data/s5c/Preresults/K13_Inkoop_Elek;
		attribute<bool>   S5_meerdan_S1 (PlanRegio) := K13_s5c > K13_s1a;
	}
	
	template ImportResults
	{
		//case parameters
		parameter<Class/Variant> VC;
		//end
		
		unit<uint32> Hoofdindicatoren
		:	StorageName     = "='%LocalDataProjDir%/results/' + Class/Variant/label[VC] + '/hoofdindicatoren.csv'"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<string> CODE := substr(_BU_CODE_, 1, 10);
		}
		unit<uint32> Nationalekosten
		:	StorageName     = "='%LocalDataProjDir%/results/' + Class/Variant/label[VC] + '/nationalekosten.csv'"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<string> CODE := substr(_BU_CODE_, 1, 10);
		}
		unit<uint32> Aansluitingen
		:	StorageName     = "='%LocalDataProjDir%/results/' + Class/Variant/label[VC] + '/aansluitingen.csv'"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<string> CODE := substr(_BU_CODE_, 1, 10);
		}
		unit<uint32> Hulpvariabelen
		:	StorageName     = "='%LocalDataProjDir%/results/' + Class/Variant/label[VC] + '/Leidraad/hulpvariabelen.csv'"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<string> CODE := substr(_BU_CODE_, 1, 10);
		}
		unit<uint32> GevoeligheidsAnalyse
		:	StorageName     = "='%LocalDataProjDir%/results/' + Class/Variant/label[VC] + '/GevoeligheidsAnalyse.csv'"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<string> CODE := substr(_BU_CODE_, 1, 10);
		}
		container Preresults := TransLate(Hoofdindicatoren,Nationalekosten,Aansluitingen,Hulpvariabelen,GevoeligheidsAnalyse);
		container results    := Preresults
		{
			container Checks
			{
				attribute<bool> s3aGeenLT   (PlanRegio) := VC == Class/Variant/V/s3a && Preresults/A04_Aansl_LT < 1[nrAsl];
				attribute<bool> s3bGeenLT   (PlanRegio) := VC == Class/Variant/V/s3b && Preresults/A04_Aansl_LT < 1[nrAsl];
				attribute<bool> s3cGeenLT   (PlanRegio) := VC == Class/Variant/V/s3c && Preresults/A04_Aansl_LT < 1[nrAsl];
				attribute<bool> s3dGeenLT   (PlanRegio) := VC == Class/Variant/V/s3d && Preresults/A04_Aansl_LT < 1[nrAsl];
				attribute<bool> s3eGeenLT   (PlanRegio) := VC == Class/Variant/V/s3e && Preresults/A04_Aansl_LT < 1[nrAsl];
				attribute<bool> s3fGeenLT   (PlanRegio) := VC == Class/Variant/V/s3f && Preresults/A04_Aansl_LT < 1[nrAsl];
				attribute<bool> s3gGeenLT   (PlanRegio) := VC == Class/Variant/V/s3g && Preresults/A04_Aansl_LT < 1[nrAsl];
				attribute<bool> s3hGeenLT   (PlanRegio) := VC == Class/Variant/V/s3h && Preresults/A04_Aansl_LT < 1[nrAsl];
				attribute<bool> s2aGeenMT   (PlanRegio) := VC == Class/Variant/V/s2a && (Preresults/A01_Aansl_aardgas + Preresults/A02_Aansl_eWP + Preresults/A04_Aansl_LT + Preresults/A05_Aansl_hWP_HG + Preresults/A06_Aansl_HR_HG) > 0.0[nrAsl];
				attribute<bool> s2dGeenMT   (PlanRegio) := VC == Class/Variant/V/s2d && (Preresults/A01_Aansl_aardgas + Preresults/A02_Aansl_eWP + Preresults/A04_Aansl_LT + Preresults/A05_Aansl_hWP_HG + Preresults/A06_Aansl_HR_HG) > 0.0[nrAsl];
				attribute<bool> Uitgesloten (PlanRegio) := Preresults/nrWEQ < 1 [nrWoning] || LeidraadResultaten/StartJaar/PlanregioResults/Statisch/isUitgesloten;
				attribute<bool> FullStadV   (PlanRegio) := VC != Class/Variant/V/s2a && VC != Class/Variant/V/s2d && Preresults/R_stadV > 0.99[ratio];
				attribute<bool> geenWEQ     (PlanRegio) := Preresults/Uitgesloten == 'True';
				
				attribute<bool> ChecksFailed (PlanRegio) :=
					s3aGeenLT || s3bGeenLT || s3cGeenLT || s3dGeenLT ||
					s3eGeenLT || s3fGeenLT || s3gGeenLT || s3hGeenLT ||
					s2aGeenMT || s2dGeenMT || Uitgesloten || geenWEQ || FullStadV;
			}
			attribute<Eur_yr>  H16_Nat_meerkost     (Planregio):= Checks/ChecksFailed ? (0/0)[Eur_yr]  : Preresults/H16_Nat_meerkost;
			attribute<Eur_ton> H17_Nat_meerkost_CO2 (Planregio):= Checks/ChecksFailed ? (0/0)[Eur_ton] : Preresults/H17_Nat_meerkost_CO2;
			
			parameter<string> G01_expr := 'Gevoeligheidsanalyses/G01_Import/'+Class/Variant/name[VC]+'/H17_Nat_meerkost_CO2';
			parameter<string> G02_expr := 'Gevoeligheidsanalyses/G02_Import/'+Class/Variant/name[VC]+'/H17_Nat_meerkost_CO2';
			parameter<string> G03_expr := 'Gevoeligheidsanalyses/G03_Import/'+Class/Variant/name[VC]+'/H17_Nat_meerkost_CO2';
			parameter<string> G04_expr := 'Gevoeligheidsanalyses/G04_Import/'+Class/Variant/name[VC]+'/H17_Nat_meerkost_CO2';
			
			attribute<Eur_ton>    G01_Nat_meerkost_CO2_Kost_Reductie_Hoog  (Planregio):= =IncludeGA ? G01_expr : 'Preresults/G01_Nat_meerkost_CO2_Kost_Reductie_Hoog';
			attribute<Eur_ton>    G02_Nat_meerkost_CO2_Kost_Reductie_Laag  (Planregio):= =IncludeGA ? G02_expr : 'Preresults/G02_Nat_meerkost_CO2_Kost_Reductie_Laag';
			attribute<Eur_ton>    G03_Nat_meerkost_CO2_En_Prijzen_Laag     (Planregio):= =IncludeGA ? G03_expr : 'Preresults/G03_Nat_meerkost_CO2_En_Prijzen_Laag';
			attribute<Eur_ton>    G04_Nat_meerkost_CO2_En_Prijzen_Hoog	   (Planregio):= =IncludeGA ? G04_expr : 'Preresults/G04_Nat_meerkost_CO2_En_Prijzen_Hoog';
			
		}
	}
	
	template TransLate:= Invoer/RuimtelijkeData/Studiegebied/buurt
	,	DialogType = "map"
	,	DialogData = "geometry"
	{
		//case parameters
		unit<uint32> Hoofdindicatoren;
		unit<uint32> Nationalekosten;
		unit<uint32> Aansluitingen;
		unit<uint32> Hulpvariabelen;
		unit<uint32> GevoeligheidsAnalyse;
		//end
		
		attribute<string>     BU_CODE                              (Planregio):= Invoer/RuimtelijkeData/StudieGebied/buurt/BU_CODE;
		attribute<string>     V01_Strategievariant                 (Planregio):= rjoin(BU_CODE, hoofdindicatoren/CODE, hoofdindicatoren/_V01_Strategievariant_)[string];
		attribute<GJ_yr_WEQ>  H01_Vraag_totaal                     (Planregio):= rjoin(BU_CODE, hoofdindicatoren/CODE, hoofdindicatoren/_H01_Vraag_totaal_giga_J_per_Woning_yr_)[GJ_yr_WEQ];
		attribute<GJ_yr_WEQ>  H02_Vraag_RV                         (Planregio):= rjoin(BU_CODE, hoofdindicatoren/CODE, hoofdindicatoren/_H02_Vraag_RV_giga_J_per_Woning_yr_)[GJ_yr_WEQ];
		attribute<GJ_yr_WEQ>  H03_Vraag_TW                         (Planregio):= rjoin(BU_CODE, hoofdindicatoren/CODE, hoofdindicatoren/_H03_Vraag_TW_giga_J_per_Woning_yr_)[GJ_yr_WEQ];
		attribute<GJ_yr_WEQ>  H04_Vraag_Vent                       (Planregio):= rjoin(BU_CODE, hoofdindicatoren/CODE, hoofdindicatoren/_H04_Vraag_Vent_giga_J_per_Woning_yr_)[GJ_yr_WEQ];
		attribute<GJ_yr_WEQ>  H05_Vraag_K                          (Planregio):= rjoin(BU_CODE, hoofdindicatoren/CODE, hoofdindicatoren/_H05_Vraag_K_giga_J_per_Woning_yr_)[GJ_yr_WEQ];
		attribute<GJ_yr_WEQ>  H06_Vraag_App                        (Planregio):= rjoin(BU_CODE, hoofdindicatoren/CODE, hoofdindicatoren/_H06_Vraag_App_giga_J_per_Woning_yr_)[GJ_yr_WEQ];
		attribute<GJ_yr_ha>   H07_vraag_tot_ha                     (Planregio):= rjoin(BU_CODE, hoofdindicatoren/CODE, hoofdindicatoren/_H07_vraag_tot_ha_100_kilo_J_per_m_2_yr_)[GJ_yr_ha];
		attribute<GJ_yr_WEQ>  H08_Input_totaal                     (Planregio):= rjoin(BU_CODE, hoofdindicatoren/CODE, hoofdindicatoren/_H08_Input_totaal_giga_J_per_Woning_yr_)[GJ_yr_WEQ];
		attribute<GJ_yr_WEQ>  H09_Input_aardgas                    (Planregio):= rjoin(BU_CODE, hoofdindicatoren/CODE, hoofdindicatoren/_H09_Input_aardgas_giga_J_per_Woning_yr_)[GJ_yr_WEQ];
		attribute<GJ_yr_WEQ>  H10_Input_duurzaamgas                (Planregio):= rjoin(BU_CODE, hoofdindicatoren/CODE, hoofdindicatoren/_H10_Input_duurzaamgas_giga_J_per_Woning_yr_)[GJ_yr_WEQ];
		attribute<GJ_yr_WEQ>  H11_Input_elektriciteit              (Planregio):= rjoin(BU_CODE, hoofdindicatoren/CODE, hoofdindicatoren/_H11_Input_elektriciteit_giga_J_per_Woning_yr_)[GJ_yr_WEQ];
		attribute<GJ_yr_WEQ>  H12_input_MTwarmtebronnen            (Planregio):= rjoin(BU_CODE, hoofdindicatoren/CODE, hoofdindicatoren/_H12_input_MTwarmtebronnen_giga_J_per_Woning_yr_)[GJ_yr_WEQ];
		attribute<GJ_yr_WEQ>  H13_input_LTwarmtebronnen            (Planregio):= rjoin(BU_CODE, hoofdindicatoren/CODE, hoofdindicatoren/_H13_input_LTwarmtebronnen_giga_J_per_Woning_yr_)[GJ_yr_WEQ];
		attribute<GJ_yr_WEQ>  H14_Saldo_Omgevingswarmte            (Planregio):= rjoin(BU_CODE, hoofdindicatoren/CODE, hoofdindicatoren/_H14_Saldo_Omgevingswarmte_giga_J_per_Woning_yr_)[GJ_yr_WEQ];
		
		attribute<ton_yr>     H15_CO2_uitstoot                     (Planregio):= rjoin(BU_CODE, hoofdindicatoren/CODE, hoofdindicatoren/_H15_CO2_uitstoot_mega_g_per_yr_)[ton_yr];
		attribute<Eur_yr>     H16_Nat_meerkost                     (Planregio):= rjoin(BU_CODE, hoofdindicatoren/CODE, hoofdindicatoren/_H16_Nat_meerkost_Euro_per_yr_)[Eur_yr];
		attribute<Eur_ton>    H17_Nat_meerkost_CO2                 (Planregio):= rjoin(BU_CODE, hoofdindicatoren/CODE, hoofdindicatoren/_H17_Nat_meerkost_CO2_Euro_per_mega_g_)[Eur_ton];
		attribute<Eur_yr_WEQ> H18_Nat_meerkost_WEQ                 (Planregio):= rjoin(BU_CODE, hoofdindicatoren/CODE, hoofdindicatoren/_H18_Nat_meerkost_WEQ_Euro_per_Woning_yr_)[Eur_yr_WEQ];
		attribute<Eur_m3>     H19_waarde_hernieuwbaar_gas          (Planregio):= rjoin(BU_CODE, hoofdindicatoren/CODE, hoofdindicatoren/_H19_waarde_hernieuwbaar_gas_Euro_per_m_3_)[Eur_m3];
		attribute<string>     H20_beschikbaarheid_hernieuwbaar_gas (Planregio):= rjoin(BU_CODE, hoofdindicatoren/CODE, hoofdindicatoren/_H20_beschikbaarheid_hernieuwbaar_gas_)[string];

		attribute<Eur_yr>     K01_Enet_verzwaren                   (Planregio):= rjoin(BU_CODE, NationaleKosten/CODE, NationaleKosten/_K01_Enet_verzwaren_Euro_per_yr_)[Eur_yr];
		attribute<Eur_yr>     K02_Gnet_verwijderen                 (Planregio):= rjoin(BU_CODE, NationaleKosten/CODE, NationaleKosten/_K02_Gnet_verwijderen_Euro_per_yr_)[Eur_yr];
		attribute<Eur_yr>     K03_Gnet_aanpassen                   (Planregio):= rjoin(BU_CODE, NationaleKosten/CODE, NationaleKosten/_K03_Gnet_aanpassen_Euro_per_yr_)[Eur_yr];
		attribute<Eur_yr>     K04_Wnet_buurt                       (Planregio):= rjoin(BU_CODE, NationaleKosten/CODE, NationaleKosten/_K04_Wnet_buurt_Euro_per_yr_)[Eur_yr];
		attribute<Eur_yr>     K05_Wnet_pand                        (Planregio):= rjoin(BU_CODE, NationaleKosten/CODE, NationaleKosten/_K05_Wnet_pand_Euro_per_yr_)[Eur_yr];
		attribute<Eur_yr>     K06_Wnet_transport                   (Planregio):= rjoin(BU_CODE, NationaleKosten/CODE, NationaleKosten/_K06_Wnet_transport_Euro_per_yr_)[Eur_yr];
		attribute<Eur_yr>     K07_Wnet_opwekking                   (Planregio):= rjoin(BU_CODE, NationaleKosten/CODE, NationaleKosten/_K07_Wnet_opwekking_Euro_per_yr_)[Eur_yr];
		attribute<Eur_yr>     K08_Gebouw_schil                     (Planregio):= rjoin(BU_CODE, NationaleKosten/CODE, NationaleKosten/_K08_Gebouw_schil_Euro_per_yr_)[Eur_yr];
		attribute<Eur_yr>     K09_Gebouw_installatie               (Planregio):= rjoin(BU_CODE, NationaleKosten/CODE, NationaleKosten/_K09_Gebouw_installatie_Euro_per_yr_)[Eur_yr];
		attribute<Eur_yr>     K10_Totaal_Kapitaalslasten           (Planregio):= rjoin(BU_CODE, NationaleKosten/CODE, NationaleKosten/_K10_Totaal_Kapitaalslasten_Euro_per_yr_)[Eur_yr];
		attribute<Eur_yr>     K11_Inkoop_Warmte                    (Planregio):= rjoin(BU_CODE, NationaleKosten/CODE, NationaleKosten/_K11_Inkoop_Warmte_Euro_per_yr_)[Eur_yr];
		attribute<Eur_yr>     K12_Inkoop_Gas                       (Planregio):= rjoin(BU_CODE, NationaleKosten/CODE, NationaleKosten/_K12_Inkoop_Gas_Euro_per_yr_)[Eur_yr];
		attribute<Eur_yr>     K13_Inkoop_Elek                      (Planregio):= rjoin(BU_CODE, NationaleKosten/CODE, NationaleKosten/_K13_Inkoop_Elek_Euro_per_yr_)[Eur_yr];
		attribute<Eur_yr>     K14_Gebouw_OenM                      (Planregio):= rjoin(BU_CODE, NationaleKosten/CODE, NationaleKosten/_K14_Gebouw_OenM_Euro_per_yr_)[Eur_yr];
		attribute<Eur_yr>     K15_Wnet_OenM                        (Planregio):= rjoin(BU_CODE, NationaleKosten/CODE, NationaleKosten/_K15_Wnet_OenM_Euro_per_yr_)[Eur_yr];
		attribute<Eur_yr>     K16_Enet_Gnet_OenM                   (Planregio):= rjoin(BU_CODE, NationaleKosten/CODE, NationaleKosten/_K16_Enet_Gnet_OenM_Euro_per_yr_)[Eur_yr];
		attribute<Eur_yr>     K17_Totaal_VariabeleKosten           (Planregio):= rjoin(BU_CODE, NationaleKosten/CODE, NationaleKosten/_K17_Totaal_VariabeleKosten_Euro_per_yr_)[Eur_yr];
		attribute<Eur_yr>     K18_Extra_VariabeleKosten            (Planregio):= rjoin(BU_CODE, NationaleKosten/CODE, NationaleKosten/_K18_Extra_VariabeleKosten_Euro_per_yr_)[Eur_yr];
		
		attribute<nrAsl>    A01_Aansl_aardgas                    (Planregio):= rjoin(BU_CODE, Aansluitingen/CODE, Aansluitingen/_A01_Aansl_aardgas_Aansluiting_)[nrAsl];
		attribute<nrAsl>    A02_Aansl_eWP                        (Planregio):= rjoin(BU_CODE, Aansluitingen/CODE, Aansluitingen/_A02_Aansl_eWP_Aansluiting_)[nrAsl];
		attribute<nrAsl>    A03_Aansl_MT                         (Planregio):= rjoin(BU_CODE, Aansluitingen/CODE, Aansluitingen/_A03_Aansl_MT_Aansluiting_)[nrAsl];
		attribute<nrAsl>    A04_Aansl_LT                         (Planregio):= rjoin(BU_CODE, Aansluitingen/CODE, Aansluitingen/_A04_Aansl_LT_Aansluiting_)[nrAsl];
		attribute<nrAsl>    A05_Aansl_hWP_HG                     (Planregio):= rjoin(BU_CODE, Aansluitingen/CODE, Aansluitingen/_A05_Aansl_hWP_HG_Aansluiting_)[nrAsl];
		attribute<nrAsl>    A06_Aansl_HR_HG                      (Planregio):= rjoin(BU_CODE, Aansluitingen/CODE, Aansluitingen/_A06_Aansl_HR_HG_Aansluiting_)[nrAsl];
		
		attribute<nrWoning>   nrWEQ                                (Planregio):= rjoin(BU_CODE, Hulpvariabelen/CODE, Hulpvariabelen/_nrWEQ_Woning_)[nrWoning];
		attribute<ratio>      R_StadV                              (Planregio):= rjoin(BU_CODE, Hulpvariabelen/CODE, Hulpvariabelen/_R_StadV_)[ratio];
		attribute<GJ_yr>      VraagH2                              (Planregio):= rjoin(BU_CODE, Hulpvariabelen/CODE, Hulpvariabelen/_VraagH2_giga_J_per_yr_)[GJ_yr];
		attribute<GJ_yr>      VraagGG                              (Planregio):= rjoin(BU_CODE, Hulpvariabelen/CODE, Hulpvariabelen/_VraagGG_giga_J_per_yr_)[GJ_yr];
		attribute<string>     Uitgesloten                          (Planregio):= rjoin(BU_CODE, Hulpvariabelen/CODE, Hulpvariabelen/_Uitgesloten_)[string];
		attribute<string>     MT_nr                                (Planregio):= rjoin(BU_CODE, Hulpvariabelen/CODE, Hulpvariabelen/_MT_nr_)[string];
		attribute<string>     LT_nr                                (Planregio):= rjoin(BU_CODE, Hulpvariabelen/CODE, Hulpvariabelen/_LT_nr_)[string];
		attribute<float64>    AantalA                              (Planregio):= rjoin(BU_CODE, Hulpvariabelen/CODE, Hulpvariabelen/_AantalA_)[float64];
		attribute<float64>    AantalB                              (Planregio):= rjoin(BU_CODE, Hulpvariabelen/CODE, Hulpvariabelen/_AantalB_)[float64];
		attribute<float64>    AantalC                              (Planregio):= rjoin(BU_CODE, Hulpvariabelen/CODE, Hulpvariabelen/_AantalC_)[float64];
		attribute<float64>    AantalD                              (Planregio):= rjoin(BU_CODE, Hulpvariabelen/CODE, Hulpvariabelen/_AantalD_)[float64];
		attribute<float64>    AantalE                              (Planregio):= rjoin(BU_CODE, Hulpvariabelen/CODE, Hulpvariabelen/_AantalE_)[float64];
		attribute<float64>    AantalF                              (Planregio):= rjoin(BU_CODE, Hulpvariabelen/CODE, Hulpvariabelen/_AantalF_)[float64];
		attribute<float64>    AantalG                              (Planregio):= rjoin(BU_CODE, Hulpvariabelen/CODE, Hulpvariabelen/_AantalG_)[float64];
		attribute<float64>    AantalN                              (Planregio):= rjoin(BU_CODE, Hulpvariabelen/CODE, Hulpvariabelen/_AantalN_)[float64];
		
		attribute<Eur_ton>    G01_Nat_meerkost_CO2_Kost_Reductie_Hoog  (Planregio):= rjoin(BU_CODE, GevoeligheidsAnalyse/CODE, GevoeligheidsAnalyse/_G01_Nat_meerkost_CO2_Kost_Reductie_Hoog_Euro_per_mega_g_)[Eur_ton];
		attribute<Eur_ton>    G02_Nat_meerkost_CO2_Kost_Reductie_Laag  (Planregio):= rjoin(BU_CODE, GevoeligheidsAnalyse/CODE, GevoeligheidsAnalyse/_G02_Nat_meerkost_CO2_Kost_Reductie_Laag_Euro_per_mega_g_)[Eur_ton];
		attribute<Eur_ton>    G03_Nat_meerkost_CO2_En_Prijzen_Laag     (Planregio):= rjoin(BU_CODE, GevoeligheidsAnalyse/CODE, GevoeligheidsAnalyse/_G03_Nat_meerkost_CO2_En_Prijzen_Laag_Euro_per_mega_g_)[Eur_ton];
		attribute<Eur_ton>    G04_Nat_meerkost_CO2_En_Prijzen_Hoog     (Planregio):= rjoin(BU_CODE, GevoeligheidsAnalyse/CODE, GevoeligheidsAnalyse/_G04_Nat_meerkost_CO2_En_Prijzen_Hoog_Euro_per_mega_g_)[Eur_ton];
	}
	
	container Combines 
	{
		container Energiebalans
		{
		
			container H01 := for_each_nedv(Class/Variant/name, replace('data/@C/results/H01_Vraag_totaal','@C',Class/Variant/name), PlanRegio, GJ_yr_WEQ);
			container H02 := for_each_nedv(Class/Variant/name, replace('data/@C/results/H02_Vraag_RV','@C',Class/Variant/name), PlanRegio, GJ_yr_WEQ);
			container H03 := for_each_nedv(Class/Variant/name, replace('data/@C/results/H03_Vraag_TW','@C',Class/Variant/name), PlanRegio, GJ_yr_WEQ);
			container H04 := for_each_nedv(Class/Variant/name, replace('data/@C/results/H04_Vraag_Vent','@C',Class/Variant/name), PlanRegio, GJ_yr_WEQ);
			container H05 := for_each_nedv(Class/Variant/name, replace('data/@C/results/H05_Vraag_K','@C',Class/Variant/name), PlanRegio, GJ_yr_WEQ);
			container H06 := for_each_nedv(Class/Variant/name, replace('data/@C/results/H06_Vraag_App','@C',Class/Variant/name), PlanRegio, GJ_yr_WEQ);
			container H08 := for_each_nedv(Class/Variant/name, replace('data/@C/results/H08_Input_totaal','@C',Class/Variant/name), PlanRegio, GJ_yr_WEQ);
			container H09 := for_each_nedv(Class/Variant/name, replace('data/@C/results/H09_Input_aardgas','@C',Class/Variant/name), PlanRegio, GJ_yr_WEQ);
			container H10 := for_each_nedv(Class/Variant/name, replace('data/@C/results/H10_Input_duurzaamgas','@C',Class/Variant/name), PlanRegio, GJ_yr_WEQ);
			container H11 := for_each_nedv(Class/Variant/name, replace('data/@C/results/H11_Input_elektriciteit','@C',Class/Variant/name), PlanRegio, GJ_yr_WEQ);
			container H12 := for_each_nedv(Class/Variant/name, replace('data/@C/results/H12_input_MTwarmtebronnen','@C',Class/Variant/name), PlanRegio, GJ_yr_WEQ);
			container H13 := for_each_nedv(Class/Variant/name, replace('data/@C/results/H13_input_LTwarmtebronnen','@C',Class/Variant/name), PlanRegio, GJ_yr_WEQ);
			container H14 := for_each_nedv(Class/Variant/name, replace('data/@C/results/H14_Saldo_Omgevingswarmte','@C',Class/Variant/name), PlanRegio, GJ_yr_WEQ);
			
			container Table
			{
				unit<uint32> Hindicator : nrofrows = 14
				{
					attribute<string> label: 
						['H01_Vraag_totaal'
						,'H02_Vraag_RV'
						,'H03_Vraag_TW'
						,'H04_Vraag_Vent'
						,'H05_Vraag_K'
						,'H06_Vraag_App'
						,'H08_Input_totaal'
						,'H09_Input_aardgas'
						,'H10_Input_duurzaamgas'
						,'H11_Input_elektriciteit'
						,'H12_input_MTwarmtebronnen'
						,'H13_input_LTwarmtebronnen'
						,'H14_Saldo_Omgevingswarmte'
						,'Totaal'] , DialogType = "LabelText";
					attribute<string> name : [
						'H01','H02','H03','H04','H05','H06',
						'H08','H09','H10','H11','H12',
						'H13','H14','Totaal'];
					container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);			
				}
				unit<uint32>      PR := Invoer/RuimtelijkeData/StudieGebied/buurt;
				
				container Rapport := for_each_ne(PR/name, 'Rapportage( PR,' + string(id(PR)) + '[PR], Hindicator)'	);
				
				template Rapportage
				{
					unit<uint32>         PlanRegio;
					parameter<PlanRegio> PlanRegio_sel;
					unit<uint32>		 Hindicatoren;
					
					container combinedResults := for_each_nedv(Class/Variant/name , 'VariantResults/'+ Class/Variant/name +'/Aansluitingen', Hindicatoren , GJ_yr_WEQ);
					container VariantResults  := for_each_ne(Class/Variant/name, 'RapOneVar(
						PlanRegio, 
						PlanRegio_sel, 
						Hindicatoren, 
						Class/Variant/V/' + Class/Variant/name
						+ ')');
					
					template RapOneVar
					{	
						unit<uint32>         PlanRegio;
						parameter<PlanRegio> PlanRegio_sel;
						unit<uint32>		 Hindicatoren;
						parameter<Class/Variant> OneVar;
						parameter<string> Scode := Class/Variant/name[OneVar];
						
						parameter<GJ_yr_WEQ>	sH01 := =replace('H01/@SC[planregio_sel]', '@SC', Scode);
						parameter<GJ_yr_WEQ>	sH02 := =replace('H02/@SC[planregio_sel]', '@SC', Scode);
						parameter<GJ_yr_WEQ>	sH03 := =replace('H03/@SC[planregio_sel]', '@SC', Scode);
						parameter<GJ_yr_WEQ>	sH04 := =replace('H04/@SC[planregio_sel]', '@SC', Scode);
						parameter<GJ_yr_WEQ>	sH05 := =replace('H05/@SC[planregio_sel]', '@SC', Scode);
						parameter<GJ_yr_WEQ>	sH06 := =replace('H06/@SC[planregio_sel]', '@SC', Scode);
						parameter<GJ_yr_WEQ>	sH08 := =replace('H08/@SC[planregio_sel]', '@SC', Scode);
						parameter<GJ_yr_WEQ>	sH09 := =replace('H09/@SC[planregio_sel]', '@SC', Scode);
						parameter<GJ_yr_WEQ>	sH10 := =replace('H10/@SC[planregio_sel]', '@SC', Scode);
						parameter<GJ_yr_WEQ>	sH11 := =replace('H11/@SC[planregio_sel]', '@SC', Scode);
						parameter<GJ_yr_WEQ>	sH12 := =replace('H12/@SC[planregio_sel]', '@SC', Scode);
						parameter<GJ_yr_WEQ>	sH13 := =replace('H13/@SC[planregio_sel]', '@SC', Scode);
						parameter<GJ_yr_WEQ>	sH14 := =replace('H14/@SC[planregio_sel]', '@SC', Scode);
	 					parameter<GJ_yr_WEQ>	Tot  := 
	 						  sH01 + sH02 + sH03 + sH04 + sH05 + sH06
	 						- sH08 - sH09 - sH10 - sH11 - sH12 - sH13 - sH14;
	 											
						attribute<GJ_yr_WEQ> Aansluitingen (Hindicatoren) := switch(
						        case(Hindicatoren/name == 'H01', sH01)
						      , case(Hindicatoren/name == 'H02', sH02)
						      , case(Hindicatoren/name == 'H03', sH03)
						      , case(Hindicatoren/name == 'H04', sH04)
						      , case(Hindicatoren/name == 'H05', sH05)
						      , case(Hindicatoren/name == 'H06', sH06)
						      , case(Hindicatoren/name == 'H08', sH08)
						      , case(Hindicatoren/name == 'H09', sH09)
						      , case(Hindicatoren/name == 'H10', sH10)
						      , case(Hindicatoren/name == 'H11', sH11)
						      , case(Hindicatoren/name == 'H12', sH12)
						      , case(Hindicatoren/name == 'H13', sH13)
						      , case(Hindicatoren/name == 'H14', sH14)
						      , case(Hindicatoren/name == 'Totaal', Tot)
						      , (0/0) [GJ_yr_WEQ]);	
					}				
				}
			}
		}	
		container Kosten
		{
			container K01 := for_each_nedv(Class/Variant/name, replace('data/@C/results/K01_Enet_verzwaren','@C',Class/Variant/name), PlanRegio, Eur_yr);
			container K02 := for_each_nedv(Class/Variant/name, replace('data/@C/results/K02_Gnet_verwijderen','@C',Class/Variant/name), PlanRegio, Eur_yr);
			container K03 := for_each_nedv(Class/Variant/name, replace('data/@C/results/K03_Gnet_aanpassen','@C',Class/Variant/name), PlanRegio, Eur_yr);
			container K04 := for_each_nedv(Class/Variant/name, replace('data/@C/results/K04_Wnet_buurt','@C',Class/Variant/name), PlanRegio, Eur_yr);
			container K05 := for_each_nedv(Class/Variant/name, replace('data/@C/results/K05_Wnet_pand','@C',Class/Variant/name), PlanRegio, Eur_yr);
			container K06 := for_each_nedv(Class/Variant/name, replace('data/@C/results/K06_Wnet_transport','@C',Class/Variant/name), PlanRegio, Eur_yr);
			container K07 := for_each_nedv(Class/Variant/name, replace('data/@C/results/K07_Wnet_opwekking','@C',Class/Variant/name), PlanRegio, Eur_yr);
			container K08 := for_each_nedv(Class/Variant/name, replace('data/@C/results/K08_Gebouw_schil','@C',Class/Variant/name), PlanRegio, Eur_yr);
			container K09 := for_each_nedv(Class/Variant/name, replace('data/@C/results/K09_Gebouw_installatie','@C',Class/Variant/name), PlanRegio, Eur_yr);
			container K10 := for_each_nedv(Class/Variant/name, replace('data/@C/results/K10_Totaal_Kapitaalslasten','@C',Class/Variant/name), PlanRegio, Eur_yr);
			container K11 := for_each_nedv(Class/Variant/name, replace('data/@C/results/K11_Inkoop_Warmte','@C',Class/Variant/name), PlanRegio, Eur_yr);
			container K12 := for_each_nedv(Class/Variant/name, replace('data/@C/results/K12_Inkoop_Gas','@C',Class/Variant/name), PlanRegio, Eur_yr);
			container K13 := for_each_nedv(Class/Variant/name, replace('data/@C/results/K13_Inkoop_Elek','@C',Class/Variant/name), PlanRegio, Eur_yr);
			container K14 := for_each_nedv(Class/Variant/name, replace('data/@C/results/K14_Gebouw_OenM','@C',Class/Variant/name), PlanRegio, Eur_yr);
			container K15 := for_each_nedv(Class/Variant/name, replace('data/@C/results/K15_Wnet_OenM','@C',Class/Variant/name), PlanRegio, Eur_yr);
			container K16 := for_each_nedv(Class/Variant/name, replace('data/@C/results/K16_Enet_Gnet_OenM','@C',Class/Variant/name), PlanRegio, Eur_yr);
			container K17 := for_each_nedv(Class/Variant/name, replace('data/@C/results/K17_Totaal_VariabeleKosten','@C',Class/Variant/name), PlanRegio, Eur_yr);
			container K18 := for_each_nedv(Class/Variant/name, replace('data/@C/results/K18_Extra_VariabeleKosten','@C',Class/Variant/name), PlanRegio, Eur_yr);
			
			
		container Table
			{
				unit<uint32> Kindicator : nrofrows = 19
				{
					attribute<string> label: 
						['K01_Enet_verzwaren'
						,'K02_Gnet_verwijderen'
						,'K03_Gnet_aanpassen'
						,'K04_Wnet_buurt'
						,'K05_Wnet_pand'
						,'K06_Wnet_transport'
						,'K07_Wnet_opwekking'
						,'K08_Gebouw_schil'
						,'K09_Gebouw_installatie'
						,'K10_Totaal_Kapitaalslasten'
						,'K11_Inkoop_Warmte'
						,'K12_Inkoop_Gas'
						,'K13_Inkoop_Elek'
						,'K14_Gebouw_OenM'
						,'K15_Wnet_OenM'
						,'K16_Enet_Gnet_OenM'
						,'K17_Totaal_VariabeleKosten'
						,'K18_Extra_VariabeleKosten'
						,'Totaal'] , DialogType = "LabelText";
					attribute<string> name : [
						'K01','K02','K03','K04','K05','K06',
						'K07','K08','K09','K10','K11','K12',
						'K13','K14','K15','K16','K17','K18','Totaal'];
					container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);			
				}
				unit<uint32>      PR := Invoer/RuimtelijkeData/StudieGebied/buurt;
				
				container Rapport := for_each_ne(PR/name, 'Rapportage( PR,' + string(id(PR)) + '[PR], Kindicator)'	);
				
				template Rapportage
				{
					unit<uint32>         PlanRegio;
					parameter<PlanRegio> PlanRegio_sel;
					unit<uint32>		 Kindicatoren;
					
					container combinedResults := for_each_nedv(Class/Variant/name , 'VariantResults/'+ Class/Variant/name +'/Aansluitingen', Kindicatoren , Eur_yr);
					container VariantResults  := for_each_ne(Class/Variant/name, 'RapOneVar(
						PlanRegio, 
						PlanRegio_sel, 
						Kindicatoren, 
						Class/Variant/V/' + Class/Variant/name
						+ ')');
					
					template RapOneVar
					{	
						unit<uint32>         PlanRegio;
						parameter<PlanRegio> PlanRegio_sel;
						unit<uint32>		 Kindicatoren;
						parameter<Class/Variant> OneVar;
						parameter<string> Scode := Class/Variant/name[OneVar];
						
						parameter<Eur_yr>	sK01 := =replace('K01/@SC[planregio_sel]', '@SC', Scode);
						parameter<Eur_yr>	sK02 := =replace('K02/@SC[planregio_sel]', '@SC', Scode);
						parameter<Eur_yr>	sK03 := =replace('K03/@SC[planregio_sel]', '@SC', Scode);
						parameter<Eur_yr>	sK04 := =replace('K04/@SC[planregio_sel]', '@SC', Scode);
						parameter<Eur_yr>	sK05 := =replace('K05/@SC[planregio_sel]', '@SC', Scode);
						parameter<Eur_yr>	sK06 := =replace('K06/@SC[planregio_sel]', '@SC', Scode);
						parameter<Eur_yr>	sK07 := =replace('K07/@SC[planregio_sel]', '@SC', Scode);
						parameter<Eur_yr>	sK08 := =replace('K08/@SC[planregio_sel]', '@SC', Scode);
						parameter<Eur_yr>	sK09 := =replace('K09/@SC[planregio_sel]', '@SC', Scode);
						parameter<Eur_yr>	sK10 := =replace('K10/@SC[planregio_sel]', '@SC', Scode);
						parameter<Eur_yr>	sK11 := =replace('K11/@SC[planregio_sel]', '@SC', Scode);
						parameter<Eur_yr>	sK12 := =replace('K12/@SC[planregio_sel]', '@SC', Scode);
						parameter<Eur_yr>	sK13 := =replace('K13/@SC[planregio_sel]', '@SC', Scode);
						parameter<Eur_yr>	sK14 := =replace('K14/@SC[planregio_sel]', '@SC', Scode);
						parameter<Eur_yr>	sK15 := =replace('K15/@SC[planregio_sel]', '@SC', Scode);
						parameter<Eur_yr>	sK16 := =replace('K16/@SC[planregio_sel]', '@SC', Scode);
						parameter<Eur_yr>	sK17 := =replace('K17/@SC[planregio_sel]', '@SC', Scode);
						parameter<Eur_yr>	sK18 := =replace('K18/@SC[planregio_sel]', '@SC', Scode);
	 					parameter<Eur_yr>	Tot  := 
	 						  sK01 + sK02 + sK03 + sK04 + sK05 + sK06
	 						+ sK07 + sK08 + sK09 + sK10 + sK11 + sK12
	 						+ sK13 + sK14 + sK15 + sK16 + sK17 + sK18;
	 											
						attribute<Eur_yr> Aansluitingen (Kindicatoren) := switch(
						        case(Kindicatoren/name == 'K01', sK01)
						      , case(Kindicatoren/name == 'K02', sK02)
						      , case(Kindicatoren/name == 'K03', sK03)
						      , case(Kindicatoren/name == 'K04', sK04)
						      , case(Kindicatoren/name == 'K05', sK05)
						      , case(Kindicatoren/name == 'K06', sK06)
						      , case(Kindicatoren/name == 'K07', sK07)
						      , case(Kindicatoren/name == 'K08', sK08)
						      , case(Kindicatoren/name == 'K09', sK09)
						      , case(Kindicatoren/name == 'K10', sK10)
						      , case(Kindicatoren/name == 'K11', sK11)
						      , case(Kindicatoren/name == 'K12', sK12)
						      , case(Kindicatoren/name == 'K13', sK13)
						      , case(Kindicatoren/name == 'K14', sK14)
						      , case(Kindicatoren/name == 'K15', sK15)
						      , case(Kindicatoren/name == 'K16', sK16)
						      , case(Kindicatoren/name == 'K17', sK17)
						      , case(Kindicatoren/name == 'K18', sK18)
						      , case(Kindicatoren/name == 'Totaal', Tot)
						      , (0/0) [Eur_yr]);	
					}				
				}
			}
		}
		container Aansl
		{
			container     	A01 := for_each_nedv(Class/Variant/name, replace('data/@C/results/A01_Aansl_aardgas','@C',Class/Variant/name), PlanRegio, nrAsl);
			container      	A02 := for_each_nedv(Class/Variant/name, replace('data/@C/results/A02_Aansl_eWP','@C',Class/Variant/name), PlanRegio, nrAsl);
			container       A03 := for_each_nedv(Class/Variant/name, replace('data/@C/results/A03_Aansl_MT','@C',Class/Variant/name), PlanRegio, nrAsl);
			container       A04 := for_each_nedv(Class/Variant/name, replace('data/@C/results/A04_Aansl_LT','@C',Class/Variant/name), PlanRegio, nrAsl);
			container       A05 := for_each_nedv(Class/Variant/name, replace('data/@C/results/A05_Aansl_hWP_HG','@C',Class/Variant/name), PlanRegio, nrAsl);
			container       A06 := for_each_nedv(Class/Variant/name, replace('data/@C/results/A06_Aansl_HR_HG','@C',Class/Variant/name), PlanRegio, nrAsl);
			
			container Table
			{
				unit<uint32> Aindicator : nrofrows = 7
				{
					attribute<string> label: 
						['A01_Aansl_aardgas'
						,'A02_Aansl_eWP'
						,'A03_Aansl_MT'
						,'A04_Aansl_LT'
						,'A05_Aansl_hWP_HG'
						,'A06_Aansl_HR_HG'
						,'Totaal'] , DialogType = "LabelText";
					attribute<string> name : ['A01','A02','A03','A04','A05','A06','Totaal'];
					container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);			
				}
				unit<uint32>      PR := Invoer/RuimtelijkeData/StudieGebied/buurt;
				
				container Rapport := for_each_ne(PR/name, 'Rapportage( PR,' + string(id(PR)) + '[PR], Aindicator)'	);
				
				template Rapportage
				{
					unit<uint32>         PlanRegio;
					parameter<PlanRegio> PlanRegio_sel;
					unit<uint32>		 Aindicatoren;
					
					container combinedResults := for_each_nedv(Class/Variant/name , 'VariantResults/'+ Class/Variant/name +'/Aansluitingen', Aindicatoren , nrAsl);
					container VariantResults  := for_each_ne(Class/Variant/name, 'RapOneVar(
						PlanRegio, 
						PlanRegio_sel, 
						Aindicatoren, 
						Class/Variant/V/' + Class/Variant/name
						+ ')');
					
					template RapOneVar
					{	
						unit<uint32>         PlanRegio;
						parameter<PlanRegio> PlanRegio_sel;
						unit<uint32>		 Aindicatoren;
						parameter<Class/Variant> OneVar;
						parameter<string> Scode := Class/Variant/name[OneVar];
						
						parameter<nrAsl>	sA01 := =replace('A01/@SC[planregio_sel]', '@SC', Scode);
						parameter<nrAsl>	sA02 := =replace('A02/@SC[planregio_sel]', '@SC', Scode);
						parameter<nrAsl>	sA03 := =replace('A03/@SC[planregio_sel]', '@SC', Scode);
						parameter<nrAsl>	sA04 := =replace('A04/@SC[planregio_sel]', '@SC', Scode);
						parameter<nrAsl>	sA05 := =replace('A05/@SC[planregio_sel]', '@SC', Scode);
						parameter<nrAsl>	sA06 := =replace('A06/@SC[planregio_sel]', '@SC', Scode);
	 					parameter<nrAsl>	Tot  := sA01 + sA02 + sA03 + sA04 + sA05 + sA06;
						
						attribute<nrAsl> Aansluitingen (Aindicatoren) := switch(
						        case(Aindicatoren/name == 'A01', sA01)
						      , case(Aindicatoren/name == 'A02', sA02)
						      , case(Aindicatoren/name == 'A03', sA03)
						      , case(Aindicatoren/name == 'A04', sA04)
						      , case(Aindicatoren/name == 'A05', sA05)
						      , case(Aindicatoren/name == 'A06', sA06)
						      , case(Aindicatoren/name == 'Totaal', Tot)
						      , (0/0) [nrAsl]);	
					}				
				}
			}
		}
	}
	container H16 := for_each_nedv(Class/Variant/name, replace('data/@C/results/H16_Nat_meerkost','@C',Class/Variant/name), PlanRegio, Eur_yr);
	container H17 := for_each_nedv(Class/Variant/name, replace('data/@C/results/H17_Nat_meerkost_CO2','@C',Class/Variant/name), PlanRegio, Eur_ton);

	container Gaswaarde
	{

		//t.b.v. GG
		attribute<Class/GasloosVariant> BesteGasloosVariant     (PlanRegio) :=
			='argmin('+AsItemList('H17/'+Class/GasloosVariant/name+'')+')[Class/GasloosVariant]';
		attribute<Class/variant>        BesteGasloosOrg         (PlanRegio) :=
			Class/GasloosVariant/nr_orgentity[BesteGasloosVariant];	
		attribute<Eur_yr>               BesteGasloosVariantH16  (PlanRegio) :=
			='merge(BesteGasloosOrg, Eur_yr, '+AsItemList('H16/'+Class/Variant/name+'')+')';	
		attribute<Eur_ton>               BesteGasloosVariantH17  (PlanRegio) :=
			='merge(BesteGasloosOrg, Eur_ton, '+AsItemList('H17/'+Class/Variant/name+'')+')';
			
		container GG
		{
			attribute<Class/GGVariant>    BesteGGvariant      (PlanRegio) := ='argmin('+AsItemList('H17/'+Class/GGVariant/name+'')+')[Class/GGVariant]';
			attribute<Eur_yr> 		BesteGGvariantH16   (PlanRegio) := ='merge(BesteGGvariant, Eur_yr, '+AsItemList('H16/'+Class/GGVariant/name+'')+')';
			attribute<Eur_ton> 		BesteGGvariantH17   (PlanRegio) := ='merge(BesteGGvariant, Eur_ton,'+AsItemList('H17/'+Class/GGVariant/name+'')+')';
			attribute<GJ_yr> 		Verbruik            (PlanRegio) := ='merge(BesteGGvariant, GJ_yr, '+AsItemList('data/'+Class/GGVariant/name+'/results/VraagGG')+')';
			attribute<Eur_yr>		Besparing			(PlanRegio) := BesteGasloosVariantH16 - BesteGGvariantH16;
			attribute<bool>			GasVrager           (PlanRegio) := BesteGasloosVariantH17 > BesteGGvariantH17;
			unit<uint32> Gasvragers := subset(GasVrager)
			{
				attribute<Eur_yr>	Besparing   := ../Besparing[nr_orgentity];
				attribute<GJ_yr>	VerbruikGJ  := ../Verbruik[nr_orgentity];
				attribute<m3_yr>	VerbruikM3  := VerbruikGJ / Invoer/Kengetallen/Constanten/GasEnergie;
				attribute<Eur_m3>	Gaswaarde   := Besparing / VerbruikM3;
				attribute<Eur_m3> InvertedWaarde := makedefined(0d - Gaswaarde, 0[Eur_m3]);

				parameter<m3> MaxVolume := SharedInvoer/MaxVolume_GG;
				
				parameter<Eur_m3> InvertedOrientatiewaarde := makedefined(nth_element_weighted( InvertedWaarde, MaxVolume, VerbruikM3), 0[Eur_m3]);
				parameter<Eur_m3> Orientatiewaarde :=  makedefined(0d - InvertedOrientatiewaarde, 0[Eur_m3]);
				
				attribute<bool>		  Beschikbaarheid := Gaswaarde >= Orientatiewaarde;
				attribute<nrWoning>   nrWEQ           := (1d-R_StadV) * LeidraadResultaten/StartJaar/PlanregioResults/nrWEQ[nr_orgentity];
				attribute<float64>    R_stadV         := LeidraadResultaten/StartJaar/PlanregioResults/R_StadV[nr_orgentity];
				attribute<m3_yr_WEQ>  M3perWEQ        := VerbruikM3 / nrWEQ;
				parameter<m3_yr_WEQ>  MeanM3perWEQ    := sum(VerbruikM3) / sum(nrWEQ);
				parameter<m3_yr>	  InGebruik       := sum(VerbruikM3 * float64(Beschikbaarheid)); // volume totaal in verbruik als check voor totaal
				
				unit<uint32> Allocated := subset(Beschikbaarheid)
				{
					attribute<float64>    Besch_R_stadV      := R_stadV[nr_orgentity];
					attribute<m3_yr>	  Besch_VerbruikM3   := VerbruikM3[nr_orgentity];
					attribute<nrWoning>   Besch_nrWEQ        := nrWEQ[nr_orgentity];
					attribute<m3_yr_WEQ>  Besch_M3perWEQ     := Besch_VerbruikM3 / Besch_nrWEQ;
					parameter<m3_yr_WEQ>  Besch_MeanM3perWEQ := sum(Besch_VerbruikM3) / sum(Besch_nrWEQ);
					
					attribute<m3_yr_WEQ>  Allocated_M3perWEQ (Gasvragers) := Besch_M3perWEQ[invert(nr_OrgEntity)];
				}
				attribute<m3_yr_WEQ>  Allocated_M3perWEQ (PlanRegio) := Allocated/Allocated_M3perWEQ[invert(nr_OrgEntity)];
			}
		}
		
		//t.b.v. H2
		attribute<Class/variant>        BesteGasloosOfGG         (PlanRegio) := BesteViewerBeschikbaar;
 		attribute<Eur_yr>               BesteGasloosOfGG_H16  (PlanRegio) :=
 			='merge(BesteGasloosOfGG, Eur_yr, '+AsItemList('H16/'+Class/Variant/name+'')+')';	
 		attribute<Eur_ton>              BesteGasloosOfGG_H17  (PlanRegio) :=
 			='merge(BesteGasloosOfGG, Eur_ton, '+AsItemList('H17/'+Class/Variant/name+'')+')';	
		
		container H2
		{
			attribute<Class/H2Variant>    BesteH2variant     (PlanRegio) := ='argmin('+AsItemList('H17/'+Class/H2Variant/name+'')+')[Class/H2Variant]';
			attribute<Eur_yr> 		BesteH2variantH16  		 (PlanRegio) := ='merge(BesteH2variant, Eur_yr, '+AsItemList('H16/'+Class/H2Variant/name+'')+')';
			attribute<Eur_ton> 		BesteH2variantH17  		 (PlanRegio) := ='merge(BesteH2variant, Eur_ton,'+AsItemList('H17/'+Class/H2Variant/name+'')+')';
			attribute<GJ_yr> 		Verbruik           		 (PlanRegio) := ='merge(BesteH2variant, GJ_yr, '+AsItemList('data/'+Class/H2Variant/name+'/results/VraagH2')+')';
			attribute<Eur_yr>		Besparing			     (PlanRegio) := BesteGasloosOfGG_H16 - BesteH2variantH16;
			attribute<bool>			GasVrager                (PlanRegio) := BesteGasloosOfGG_H17 > BesteH2variantH17;
			unit<uint32> Gasvragers := subset(GasVrager)
			{
				attribute<Class/variant>    Alternatief := BesteGasloosOfGG[nr_orgentity];
				attribute<Class/H2variant>  H2variant   := BesteH2variant[nr_orgentity];
				attribute<Eur_yr>	Besparing := ../Besparing[nr_orgentity];
				attribute<GJ_yr>	VerbruikGJ  := ../Verbruik[nr_orgentity];
				attribute<m3_yr>	VerbruikM3  := VerbruikGJ / Invoer/Kengetallen/Constanten/GasEnergie; //Omrekenen waterstof per GJ naar per aardgasequivalent m3
				attribute<Eur_m3>	Gaswaarde   := Besparing / VerbruikM3;
				
				parameter<m3> MaxVolume := SharedInvoer/MaxVolume_H2;
				
				parameter<Eur_m3> Orientatiewaarde := makedefined(nth_element_weighted(Gaswaarde, MaxVolume, VerbruikM3), 0[Eur_m3]);
				
				attribute<bool>		Beschikbaarheid := const(true, .);
			}
		}
		
		
		parameter<Eur_m3> GGprijs_m3 := mean(tussenresultaten/R2_2030/prijzen/Aardgas/Staffel/KGJ_maatschappelijk) * Invoer/Kengetallen/Constanten/GasEnergie;
		parameter<Eur_m3> H2prijs_m3 := mean(tussenresultaten/R2_2030/prijzen/overig/Pj_H2) * Invoer/Kengetallen/Constanten/GasEnergie;
		attribute<Eur_m3> GasWaarde_GG           (PlanRegio) :=
			makedefined(GG/Gasvragers/GasWaarde[invert(GG/Gasvragers/nr_OrgEntity)] + GGprijs_m3, 0.0[Eur_m3]);
		attribute<Eur_m3> GasWaarde_H2           (PlanRegio) :=
			makedefined(H2/Gasvragers/GasWaarde[invert(H2/Gasvragers/nr_OrgEntity)] + H2prijs_m3, 0.0[Eur_m3]);
		attribute<bool>   Beschikbaarheid_GG     (PlanRegio) := GG/Gasvragers/Beschikbaarheid[invert(GG/Gasvragers/nr_OrgEntity)];
		attribute<bool>   Beschikbaarheid_H2     (PlanRegio) := H2/Gasvragers/Beschikbaarheid[invert(H2/Gasvragers/nr_OrgEntity)];
		attribute<string> Beschikbaarheid_GG_str (PlanRegio) := Beschikbaarheid_GG ? 'hoger' : 'lager';
		attribute<string> Beschikbaarheid_H2_str (PlanRegio) := Beschikbaarheid_H2 ? 'hoger' : 'lager';
		
		attribute<m3_yr> GGvraagM3 (PlanRegio) := GG/Gasvragers/VerbruikM3[invert(GG/Gasvragers/nr_OrgEntity)] * float64(Beschikbaarheid_GG);
	}
	container Repr19
	{
		attribute<Class/Variant19>        Beste19Variant           (PlanRegio) :=
			='Invoer/RuimtelijkeData/leidraad_oktober_2019/isUitgesloten || LeidraadResultaten/StartJaar/PlanregioResults/nrWEQ < 1 [nrWoning] ? (0/0)[Class/variant19]
			: argmin('+AsItemList('H17/'+Class/Variant19/name+'')+')[Class/Variant19]';
		attribute<Eur_ton>              Beste19Variant_H17  (PlanRegio) :=
			='merge(Beste19Variant, Eur_ton, '+AsItemList('H17/'+Class/Variant19/name+'')+')';
			
		container Gaswaarde
		{
	
			//t.b.v. GG
			attribute<Class/Variant19Gasloos> Beste19Gasloos     (PlanRegio) :=
				='argmin('+AsItemList('H17/'+Class/Variant19Gasloos/name+'')+')[Class/Variant19Gasloos]';
			attribute<Class/variant>        Beste19GasloosOrg         (PlanRegio) :=
				Class/Variant19Gasloos/nr_orgentity[Beste19Gasloos];	
			attribute<Eur_yr>               BesteGasloos19VariantH16  (PlanRegio) :=
				='merge(Beste19GasloosOrg, Eur_yr, '+AsItemList('H16/'+Class/Variant/name+'')+')';	
			attribute<Eur_ton>               BesteGasloos19VariantH17  (PlanRegio) :=
				='merge(Beste19GasloosOrg, Eur_ton, '+AsItemList('H17/'+Class/Variant/name+'')+')';
				
			container GG
			{
				attribute<Class/Variant19GG>    BesteGG19variant      (PlanRegio) := ='argmin('+AsItemList('H17/'+Class/Variant19GG/name+'')+')[Class/Variant19GG]';
				attribute<Eur_yr> 		BesteGG19variantH16   (PlanRegio) := ='merge(BesteGG19variant, Eur_yr, '+AsItemList('H16/'+Class/Variant19GG/name+'')+')';
				attribute<Eur_ton> 		BesteGG19variantH17   (PlanRegio) := ='merge(BesteGG19variant, Eur_ton,'+AsItemList('H17/'+Class/Variant19GG/name+'')+')';
				attribute<GJ_yr> 		Verbruik            (PlanRegio) := ='merge(BesteGG19variant, GJ_yr, '+AsItemList('data/'+Class/Variant19GG/name+'/results/VraagGG')+')';
				attribute<Eur_yr>		Besparing			(PlanRegio) := BesteGasloos19VariantH16 - BesteGG19variantH16;
				attribute<bool>			GasVrager           (PlanRegio) := BesteGasloos19VariantH17 > BesteGG19variantH17;
				unit<uint32> Gasvragers := subset(GasVrager)
				{
					attribute<Eur_yr>	Besparing   := ../Besparing[nr_orgentity];
					attribute<GJ_yr>	VerbruikGJ  := ../Verbruik[nr_orgentity];
					attribute<m3_yr>	VerbruikM3  := VerbruikGJ / Invoer/Kengetallen/Constanten/GasEnergie;
					attribute<Eur_m3>	Gaswaarde   := Besparing / VerbruikM3;
					attribute<Eur_m3> InvertedWaarde := makedefined(0d - Gaswaarde, 0[Eur_m3]);
	
					parameter<m3> MaxVolume := SharedInvoer/MaxVolume_GG;
					
					parameter<Eur_m3> InvertedOrientatiewaarde := makedefined(nth_element_weighted( InvertedWaarde, MaxVolume, VerbruikM3), 0[Eur_m3]);
					parameter<Eur_m3> Orientatiewaarde :=  makedefined(0d - InvertedOrientatiewaarde, 0[Eur_m3]);
					
					attribute<bool>		Beschikbaarheid := Gaswaarde >= Orientatiewaarde;
					parameter<m3_yr>	InGebruik       := sum(VerbruikM3 * float64(Beschikbaarheid)); // volume totaal in verbruik als check voor totaal
				}
			}
			parameter<Eur_m3> GGprijs_m3 := mean(tussenresultaten/R2_2030/prijzen/Aardgas/Staffel/KGJ_maatschappelijk) * Invoer/Kengetallen/Constanten/GasEnergie;
			attribute<Eur_m3> GasWaarde_GG           (PlanRegio) :=
				makedefined(GG/Gasvragers/GasWaarde[invert(GG/Gasvragers/nr_OrgEntity)] + GGprijs_m3, 0.0[Eur_m3]);
			attribute<bool>   Beschikbaarheid_GG     (PlanRegio) := GG/Gasvragers/Beschikbaarheid[invert(GG/Gasvragers/nr_OrgEntity)];
			attribute<string> Beschikbaarheid_GG_str (PlanRegio) := Beschikbaarheid_GG ? 'hoger' : 'lager';
			
			attribute<m3_yr> GGvraagM3 (PlanRegio) := GG/Gasvragers/VerbruikM3[invert(GG/Gasvragers/nr_OrgEntity)] * float64(Beschikbaarheid_GG);
		}
		attribute<Class/Variant>        BesteViewerBeschikbaar19 (PlanRegio) :=
			Invoer/RuimtelijkeData/leidraad_oktober_2019/isUitgesloten || LeidraadResultaten/StartJaar/PlanregioResults/nrWEQ < 1 [nrWoning] ? (0/0)[Class/Variant] :
			Gaswaarde/Beschikbaarheid_GG ? Class/Variant19GG/nr_orgentity[Gaswaarde/GG/BesteGG19variant] : Class/Variant19Gasloos/nr_orgentity[Gaswaarde/Beste19Gasloos];	
		attribute<string> V01 (PlanRegio) := class/variant/name[BesteViewerBeschikbaar19];
		
		attribute<nrWoning>   WEQ_per_Beste19Variant (Class/variant) := sum(LeidraadResultaten/StartJaar/PlanregioResults/nrWEQ, BesteViewerBeschikbaar19);
		attribute<percent>    Aandeel_WEQ_Beste19Variant(Class/variant) := WEQ_per_Beste19Variant / sum(WEQ_per_Beste19Variant) * 100[percent];
	
		attribute<Eur_ton>    Beste19BeschikbaarVariant_H17  (PlanRegio) :=
		='merge(BesteViewerBeschikbaar19, Eur_ton, '+AsItemList('H17/'+Class/Variant/name+'')+')';
	}
					
	attribute<Class/Variant>        BesteVariant           (PlanRegio) :=
		='Invoer/RuimtelijkeData/leidraad_oktober_2019/isUitgesloten || LeidraadResultaten/StartJaar/PlanregioResults/nrWEQ < 1 [nrWoning] ? (0/0)[Class/variant]
		: argmin('+AsItemList('H17/'+Class/Variant/name+'')+')[Class/Variant]';
	attribute<Eur_ton>              BesteVariant_H17  (PlanRegio) :=
		='merge(BesteVariant, Eur_ton, '+AsItemList('H17/'+Class/Variant/name+'')+')';
	
	
	attribute<Class/B_Variant>        Beste_B_Variant        (PlanRegio) :=
		='Invoer/RuimtelijkeData/leidraad_oktober_2019/isUitgesloten || LeidraadResultaten/StartJaar/PlanregioResults/nrWEQ < 1 [nrWoning] ? (0/0)[Class/B_variant]
		: argmin('+AsItemList('H17/'+Class/B_Variant/name+'')+')[Class/B_Variant]';
		
	attribute<Eur_ton>              Beste_B_Variant_H17  (PlanRegio) :=
			='merge(Beste_B_Variant, Eur_ton, '+AsItemList('H17/'+Class/B_Variant/name+'')+')';
	
	attribute<nrWoning> WEQ_per_BesteVariant (Class/variant) := sum(LeidraadResultaten/StartJaar/PlanregioResults/nrWEQ, BesteVariant);
	attribute<percent>    Aandeel_WEQ_BesteVariant(Class/variant) := WEQ_per_BesteVariant / sum(WEQ_per_BesteVariant) * 100[percent];
	
	attribute<nrWoning> WEQ_per_Beste_B_Variant (Class/B_Variant) := sum(LeidraadResultaten/StartJaar/PlanregioResults/nrWEQ, Beste_B_Variant);
	attribute<percent>    Aandeel_WEQ_Beste_B_Variant(Class/B_Variant) := WEQ_per_Beste_B_Variant / sum(WEQ_per_Beste_B_Variant) * 100[percent];
	
	attribute<Class/ViewerVariant>  BesteViewerVariant     (PlanRegio) :=
		='Invoer/RuimtelijkeData/leidraad_oktober_2019/isUitgesloten || LeidraadResultaten/StartJaar/PlanregioResults/nrWEQ < 1 [nrWoning] ? (0/0)[Class/ViewerVariant] :
		 argmin('+AsItemList('H17/'+Class/ViewerVariant/name+'')+')[Class/ViewerVariant]';
	attribute<Class/GasloosVariant> BesteGasloosVariant    (PlanRegio) := ='Invoer/RuimtelijkeData/leidraad_oktober_2019/isUitgesloten || LeidraadResultaten/StartJaar/PlanregioResults/nrWEQ < 1 [nrWoning] ? (0/0)[Class/GasloosVariant] : argmin('+AsItemList('H17/'+Class/GasloosVariant/name+'')+')[Class/GasloosVariant]';
	attribute<nrWoning> WEQ_per_GasloosVariant (Class/GasloosVariant):= sum(LeidraadResultaten/StartJaar/PlanregioResults/nrWEQ, BesteGasloosVariant);
	attribute<percent>    Aandeel_WEQ_GasloosVariant(Class/GasloosVariant) := WEQ_per_GasloosVariant / sum(WEQ_per_GasloosVariant) * 100[percent];
	attribute<Class/GGVariant>      BesteGGVariant         (PlanRegio) := ='Invoer/RuimtelijkeData/leidraad_oktober_2019/isUitgesloten || LeidraadResultaten/StartJaar/PlanregioResults/nrWEQ < 1 [nrWoning] ? (0/0)[Class/GGVariant] : argmin('+AsItemList('H17/'+Class/GGVariant/name+'')+')[Class/GGVariant]';
	attribute<Class/H2Variant>      BesteH2Variant         (PlanRegio) := ='Invoer/RuimtelijkeData/leidraad_oktober_2019/isUitgesloten || LeidraadResultaten/StartJaar/PlanregioResults/nrWEQ < 1 [nrWoning] ? (0/0)[Class/H2Variant] : argmin('+AsItemList('H17/'+Class/H2Variant/name+'')+')[Class/H2Variant]';

	attribute<Class/variant>        BesteViewerBeschikbaar (PlanRegio) :=
		Invoer/RuimtelijkeData/leidraad_oktober_2019/isUitgesloten || LeidraadResultaten/StartJaar/PlanregioResults/nrWEQ < 1 [nrWoning] ? (0/0)[Class/variant] :
		Gaswaarde/Beschikbaarheid_GG ? Class/GGVariant/nr_orgentity[BesteGGVariant] : Class/GasloosVariant/nr_orgentity[BesteGasloosVariant];	
	
	attribute<Class/variant>        BesteViewerBeschikbaar_metH2 (PlanRegio) :=
		Invoer/RuimtelijkeData/leidraad_oktober_2019/isUitgesloten || LeidraadResultaten/StartJaar/PlanregioResults/nrWEQ < 1 [nrWoning] ? (0/0)[Class/variant] :
		Gaswaarde/Beschikbaarheid_H2 ? Class/H2Variant/nr_orgentity[BesteH2Variant] : BesteViewerBeschikbaar;	
	
	attribute<nrWoning> WEQ_per_BesteViewerBeschikbaar_metH2     (Class/variant) := sum(LeidraadResultaten/StartJaar/PlanregioResults/nrWEQ, BesteViewerBeschikbaar_metH2);
	attribute<percent>  Aandeel_WEQ_BesteViewerBeschikbaar_metH2 (Class/variant) := WEQ_per_BesteViewerBeschikbaar_metH2 / sum(WEQ_per_BesteViewerBeschikbaar_metH2) * 100[percent];

	attribute<Eur_ton>              BesteViewerBeschikbaar_H17  (PlanRegio) :=
			='merge(BesteViewerBeschikbaar, Eur_ton, '+AsItemList('H17/'+Class/Variant/name+'')+')';
	attribute<Eur_ton>              BesteViewerBeschikbaar_metH2_H17  (PlanRegio) :=
			='merge(BesteViewerBeschikbaar_metH2, Eur_ton, '+AsItemList('H17/'+Class/Variant/name+'')+')';
		
	container ConstructStrategie
	{
		attribute<Class/S1Variant>        S1var (PlanRegio) := ='argmin('+AsItemList('H17/'+Class/S1variant/name+'')+')[Class/S1Variant]';
		attribute<Class/S2Variant>        S2var (PlanRegio) := ='argmin('+AsItemList('H17/'+Class/S2variant/name+'')+')[Class/S2Variant]';
		attribute<Class/S3Variant>        S3var (PlanRegio) := ='argmin('+AsItemList('H17/'+Class/S3variant/name+'')+')[Class/S3Variant]';
		attribute<Class/GGVariant>        S4var (PlanRegio) := ='argmin('+AsItemList('H17/'+Class/GGvariant/name+'')+')[Class/GGVariant]';
		attribute<Class/H2Variant>        S5var (PlanRegio) := ='argmin('+AsItemList('H17/'+Class/H2variant/name+'')+')[Class/H2Variant]';
		
		attribute<Eur_ton> S1H17 (PlanRegio) := ='merge(S1var, Eur_ton, '+AsItemList('H17/'+Class/S1Variant/name+'')+')';
		attribute<Eur_ton> S2H17 (PlanRegio) := ='merge(S2var, Eur_ton, '+AsItemList('H17/'+Class/S2Variant/name+'')+')';
		attribute<Eur_ton> S3H17 (PlanRegio) := ='merge(S3var, Eur_ton, '+AsItemList('H17/'+Class/S3Variant/name+'')+')';
		attribute<Eur_ton> S4H17 (PlanRegio) := ='merge(S4var, Eur_ton, '+AsItemList('H17/'+Class/GGVariant/name+'')+')';
		attribute<Eur_ton> S5H17 (PlanRegio) := ='merge(S5var, Eur_ton, '+AsItemList('H17/'+Class/H2Variant/name+'')+')';
		
		attribute<Class/S1Variant>        S1varL (PlanRegio) := IsNull(S1H17) ? (0/0)[Class/S1Variant] : S1var;
		attribute<Class/S2Variant>        S2varL (PlanRegio) := IsNull(S2H17) ? (0/0)[Class/S2Variant] : S2var;
		attribute<Class/S3Variant>        S3varL (PlanRegio) := IsNull(S3H17) ? (0/0)[Class/S3Variant] : S3var;
		attribute<Class/GGVariant>        S4varL (PlanRegio) := IsNull(S4H17) ? (0/0)[Class/GGVariant] : S4var;
		attribute<Class/H2Variant>        S5varL (PlanRegio) := IsNull(S5H17) ? (0/0)[Class/H2Variant] : S5var;
	}
	attribute<Class/variant>   BesteS1variant (PlanRegio) := IsNull(ConstructStrategie/S1H17) ? (0/0)[Class/variant] : Class/S1Variant/nr_orgentity[ConstructStrategie/S1var];
	attribute<Class/variant>   BesteS2variant (PlanRegio) := IsNull(ConstructStrategie/S2H17) ? (0/0)[Class/variant] : Class/S2Variant/nr_orgentity[ConstructStrategie/S2var];
	attribute<Class/variant>   BesteS3variant (PlanRegio) := IsNull(ConstructStrategie/S3H17) ? (0/0)[Class/variant] : Class/S3Variant/nr_orgentity[ConstructStrategie/S3var];
	attribute<Class/variant>   BesteS4variant (PlanRegio) := IsNull(ConstructStrategie/S4H17) ? (0/0)[Class/variant] : Class/GGVariant/nr_orgentity[ConstructStrategie/S4var];
	attribute<Class/variant>   BesteS5variant (PlanRegio) := IsNull(ConstructStrategie/S5H17) ? (0/0)[Class/variant] : Class/H2Variant/nr_orgentity[ConstructStrategie/s5var];
	
	attribute<Class/strategie> ViewerStrategie (PlanRegio) := Invoer/RuimtelijkeData/leidraad_oktober_2019/isUitgesloten || LeidraadResultaten/StartJaar/PlanregioResults/nrWEQ < 1 [nrWoning] ? Class/Strategie/V/geen : Class/Variant/Strategie_rel[BesteViewerBeschikbaar];

	#include <RefVariant.dms>
	
	attribute<nrWoning> WEQ_per_ViewerBeschikbaar    (Class/variant) := sum(LeidraadResultaten/StartJaar/PlanregioResults/nrWEQ, BesteViewerBeschikbaar);
	attribute<percent>  Aandeel_WEQ_ViewerBeschikbaar(Class/variant) := WEQ_per_ViewerBeschikbaar / sum(WEQ_per_ViewerBeschikbaar) * 100[percent];
	container Aandelen
	{
		attribute<nrAsl>    AG_per_ViewerBeschikbaar     (Class/variant) := sum(Outputs/LN/Aansluitingen/Table/A01_Aansl_aardgas, BesteViewerBeschikbaar);
		attribute<nrAsl>    WP_per_ViewerBeschikbaar     (Class/variant) := sum(Outputs/LN/Aansluitingen/Table/A02_Aansl_eWP, BesteViewerBeschikbaar);
		attribute<nrAsl>    MT_per_ViewerBeschikbaar     (Class/variant) := sum(Outputs/LN/Aansluitingen/Table/A03_Aansl_MT, BesteViewerBeschikbaar);
		attribute<nrAsl>    LT_per_ViewerBeschikbaar     (Class/variant) := sum(Outputs/LN/Aansluitingen/Table/A04_Aansl_LT, BesteViewerBeschikbaar);
		attribute<nrAsl>    HP_per_ViewerBeschikbaar     (Class/variant) := sum(Outputs/LN/Aansluitingen/Table/A05_Aansl_hWP_HG, BesteViewerBeschikbaar);
		attribute<nrAsl>    DG_per_ViewerBeschikbaar     (Class/variant) := sum(Outputs/LN/Aansluitingen/Table/A06_Aansl_HR_HG, BesteViewerBeschikbaar);
		
		attribute<float64>  A_per_ViewerBeschikbaar     (Class/variant) := sum(Outputs/LN/Hulpvariabelen/Table/AantalA, BesteViewerBeschikbaar);
		attribute<float64>  B_per_ViewerBeschikbaar     (Class/variant) := sum(Outputs/LN/Hulpvariabelen/Table/AantalB, BesteViewerBeschikbaar);
		attribute<float64>  C_per_ViewerBeschikbaar     (Class/variant) := sum(Outputs/LN/Hulpvariabelen/Table/AantalC, BesteViewerBeschikbaar);
		attribute<float64>  D_per_ViewerBeschikbaar     (Class/variant) := sum(Outputs/LN/Hulpvariabelen/Table/AantalD, BesteViewerBeschikbaar);
		attribute<float64>  E_per_ViewerBeschikbaar     (Class/variant) := sum(Outputs/LN/Hulpvariabelen/Table/AantalE, BesteViewerBeschikbaar);
		attribute<float64>  F_per_ViewerBeschikbaar     (Class/variant) := sum(Outputs/LN/Hulpvariabelen/Table/AantalF, BesteViewerBeschikbaar);
		attribute<float64>  G_per_ViewerBeschikbaar     (Class/variant) := sum(Outputs/LN/Hulpvariabelen/Table/AantalG, BesteViewerBeschikbaar);
		attribute<float64>  N_per_ViewerBeschikbaar     (Class/variant) := sum(Outputs/LN/Hulpvariabelen/Table/AantalN, BesteViewerBeschikbaar);
	}
}

