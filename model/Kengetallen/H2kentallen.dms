//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2020 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////


container H2kentallen :=
	for_each_nedvn(
		 src/H2_kentallen/Naam
		,src/H2_kentallen/waarde+"[" + src/H2_kentallen/eenheid + "]"
		, void
		, src/H2_kentallen
		, src/H2_kentallen/eenheid
	), StorageReadOnly = "True"
	{
		template H2template
		{
			//begin case parameters
			parameter<ratio> H2Curve;
			parameter<ratio> InfraCurve;
			parameter<ratio> OMCurve;
			parameter<ratio> KostenMin;
			parameter<ratio> KostenMax;
			parameter<ratio> EffMax;
			//end case parameters

			parameter<ratio> EffMin := 1.0 - EffMax;

			//KOSTEN
			parameter<Eur_asl> K_aansl_w := InfraCurve * (KostenMin * K_aansl_w_min + KostenMax * K_aansl_w_max);
			parameter<Eur_m2>  K_aansl_u := InfraCurve * (KostenMin * K_aansl_u_min + KostenMax * K_aansl_u_max);
			parameter<Eur>     K_section := InfraCurve * (KostenMin * K_section_min + KostenMax * K_section_max);
			parameter<Eur_asl> K_ov      := OMCurve    * (KostenMin * Ki_ov_min     + KostenMax * Ki_ov_max);
			parameter<Eur_asl> K_pm      := OMCurve    * (KostenMin * Ki_pm_min     + KostenMax * Ki_pm_max);
		}

		container Emissies
		{
			parameter<kg_GJ> CO2_GJb := 0[kg_GJ];
			parameter<g_GJ>  NOx_GJb := 0[g_GJ];
			parameter<g_GJ>  SO2_GJb := 0[g_GJ];
			parameter<g_GJ>  VOS_GJb := 0[g_GJ];
			parameter<g_GJ>  TS_GJb  := 0[g_GJ];
		}
	}
