//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2021 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//       In deze configuratiefile worden de brondata geconfigureerd.                    //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container RuimtelijkeData: Using = "Units;Geography;Model", FreeData = "True"
{
	container Studiegebied
	{
		container impl : IsHidden = "True"
		{
			unit<uint32> selected := range(uint32, 0, strcount(Invoer/StudieGebied, ',') + 1 )
			{
				attribute<string> values := ReadArray(lowercase(trim(Invoer/StudieGebied)), ., string, 0);
			}
		}
		attribute<bool> GeselecteerdeGemeente (RegioIndelingen/gemeente) := impl/selected/values[0] = 'nl'
			? const(true, RegioIndelingen/gemeente)
			: IsDefined(rlookup(lowercase(RegioIndelingen/gemeente/GM_code), impl/selected/values));
		
		attribute<bool> GeselecteerdeBuurt (RegioIndelingen/buurt) := impl/selected/values[0] = 'nl'
			? const(true, RegioIndelingen/buurt)
			: IsDefined(rlookup(lowercase(RegioIndelingen/buurt/GM_code), impl/selected/values));

//		attribute<bool> GeselecteerdeRastercel (Geography/rdc_grids/m100 ) := GeselecteerdeGemeente[Geography/RegioIndelingen/gemeente/per_m100];

		unit<uint32> Gemeente := subset(GeselecteerdeGemeente), IsHidden = "True"
		,	DialogType = "Map"
		,	DialogData = "geometry"
		{
			attribute<string>    name                                := GM_CODE, IsHidden = "True";
			parameter<string>    RegioNaam                           := 'Gemeente', IsHidden = "True";

			attribute<rdc_meter> geometry (poly)                     := RegioIndelingen/gemeente/geometry[nr_OrgEntity];
			attribute<string>    GM_code                             := RegioIndelingen/gemeente/GM_CODE[nr_OrgEntity];
			attribute<string>    label                               := RegioIndelingen/gemeente/GM_CODE[nr_OrgEntity];
			attribute<.>         per_m100 (Geography/rdc_grids/m100) := poly2grid(geometry, Geography/rdc_grids/m100);
		}

		unit<uint32> Buurt := subset(GeselecteerdeBuurt)
		,	DialogType = "Map"
		,	DialogData = "geometry"
		{
			attribute<string>                                  name                := BU_code, IsHidden = "True";
			attribute<string>								   label               := name;
			parameter<string>                                  RegioNaam           := 'Buurt';

			attribute<rdc_meter>                               geometry (poly)     := RegioIndelingen/buurt/geometry[nr_OrgEntity], IsHidden = "True";
			attribute<string>                                  BU_code             := RegioIndelingen/buurt/BU_CODE[nr_OrgEntity];
			attribute<string>                                  BU_NAAM             := RegioIndelingen/buurt/BU_NAAM[nr_OrgEntity];
			attribute<string>                                  WK_CODE             := RegioIndelingen/buurt/WK_CODE[nr_OrgEntity];
			attribute<string>                                  WK_NAAM             := RegioIndelingen/buurt/WK_NAAM[nr_OrgEntity];
			attribute<string>                                  GM_CODE             := RegioIndelingen/buurt/GM_CODE[nr_OrgEntity];
			attribute<string>                                  GM_NAAM             := RegioIndelingen/buurt/GM_NAAM[nr_OrgEntity];
			attribute<string>                                  ER_NAAM             := RegioIndelingen/buurt/ER_NAAM[nr_OrgEntity];
			attribute<string>                                  PROV_NAAM           := RegioIndelingen/buurt/PROV_NAAM[nr_OrgEntity];

			attribute<uint32>                                  code                := RegioIndelingen/buurt/code[nr_OrgEntity], IsHidden = "True";

			attribute<rdc_meter>                               point               := RegioIndelingen/buurt/point[nr_OrgEntity], IsHidden = "True";
			attribute<m2>                                      area                := RegioIndelingen/buurt/area[nr_OrgEntity], IsHidden = "True";
			attribute<ha>                                      AreaInHa            := RegioIndelingen/buurt/AreaInHa[nr_OrgEntity];
			attribute<km2>                                     AreaInKm2           := RegioIndelingen/buurt/AreaInKm2[nr_OrgEntity], IsHidden = "True";
			attribute<ratio>                                   Overigen_r_land_com := RegioIndelingen/buurt/Overigen/r_land_com[nr_OrgEntity], IsHidden = "True";

			attribute<ha>                                      AreaLandHa          := AreaInHa * Overigen_r_land_com ;
			attribute<float64>                                 nrPers_hh           := Geography/RegioIndelingen/buurt/Overigen/nrPers_hh[nr_OrgEntity];

			attribute<percent>                                 Overigen_p_stadsv   := RegioIndelingen/buurt/Overigen/p_stadsv[nr_OrgEntity], IsHidden = "True";
			attribute<ratio>                                   R_StadV             := makedefined(Overigen_p_stadsv / 100[percent], 0[ratio]), Descr = "Aandeel woningen aangesloten op stadsverwarming", ishidden = "True";

			attribute<string>                                  IsWater             := RegioIndelingen/buurt/IsWater[nr_OrgEntity], IsHidden = "True";

			attribute<Studiegebied/gemeente>                   gemeente_rel        := point_in_polygon(point, Studiegebied/gemeente/geometry), IsHidden = "True";
			attribute<Geography/RegioIndelingen/buurt>         Buurt_rel           := nr_OrgEntity, IsHidden = "True";

			attribute<Geography/RegioIndelingen/NL>            NL_rel              := RegioIndelingen/buurt/NL_rel[nr_OrgEntity], IsHidden = "True";
			attribute<Geography/RegioIndelingen/Provincie>     Provincie_rel       := RegioIndelingen/buurt/Provincie_rel[nr_OrgEntity], IsHidden = "True";
			attribute<Geography/RegioIndelingen/Energieregio>  Energieregio_rel    := RegioIndelingen/buurt/Energieregio_rel[nr_OrgEntity], IsHidden = "True";
			attribute<Geography/RegioIndelingen/Wijk>          Wijk_rel            := RegioIndelingen/buurt/Wijk_rel[nr_OrgEntity], IsHidden = "True";

			attribute<.> per_m100 (Geography/rdc_grids/m100) := poly2grid(geometry, Geography/rdc_grids/m100), ishidden = "True";

			container Inkomen : IsHidden = "True"
			{
				attribute<percent> p_hh_li    (..) := Geography/RegioIndelingen/buurt/Inkomen/p_hh_li[nr_OrgEntity];
				attribute<percent> p_hh_mi    (..) := Geography/RegioIndelingen/buurt/Inkomen/p_hh_mi[nr_OrgEntity];
				attribute<percent> p_hh_hi    (..) := Geography/RegioIndelingen/buurt/Inkomen/p_hh_hi[nr_OrgEntity];
				attribute<percent> p_checksum (..) := Geography/RegioIndelingen/buurt/Inkomen/p_checksum[nr_OrgEntity], IsHidden = "True";
			}

			container Eigendom : IsHidden = "True"
			{
				attribute<percent> p_koopw    (..) := Geography/RegioIndelingen/buurt/Eigendom/p_koopw[nr_OrgEntity];
				attribute<percent> p_huurw    (..) := Geography/RegioIndelingen/buurt/Eigendom/p_huurw[nr_OrgEntity];
				attribute<percent> p_wcorpw   (..) := Geography/RegioIndelingen/buurt/Eigendom/p_wcorpw[nr_OrgEntity];
				attribute<percent> p_ov_hw    (..) := Geography/RegioIndelingen/buurt/Eigendom/p_ov_hw[nr_OrgEntity];
				attribute<percent> p_checksum (..) := Geography/RegioIndelingen/buurt/Eigendom/p_checksum [nr_OrgEntity], IsHidden = "True";
			}
		}
	}

	#include <BAG.dms>
	#include <Vastgoed.dms>
	#include <Bebouwing.dms>
	
	container EnergieLabel
	{
		// Voor koppeling aan de BAG
		unit<uint32> nummeraanduiding := RuimtelijkeData/BAG/import/nummeraanduiding, IsHidden = "True";
		unit<uint32> vbo              := RuimtelijkeData/BAG/import/vbo, IsHidden = "True";

		unit<uint32> src
		:	StorageName     = "%HestiaDataDir%/vraag/wonen/20200101_inputlabels_rvo.csv"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	url             = "%HestiaDataDir%/vraag/wonen20200106_Metadata_RVOlabels_FvdM.txt"
		{
			attribute<string> HLT_unquoted := trim(replace(HLT,'''',''));
			attribute<string> adres_key    := 
				//lowercase(
					replace(Postcode,'''','') + '_' + replace(HNR,'''','') + 
					(strlen(HLT_unquoted) > 0 
						? '_' + HLT_unquoted
						: ''
					)
				//)
				;

			attribute<Classifications/SchilLabel>   schillabel_rel := rlookup(replace(label, '+',''), Classifications/SchilLabel/name), IntegrityCheck = "IsDefined(this)";
			attribute<uint32>                       datum_numeriek := uint32(replace(DATUM,'''',''));
			
		}

		unit<uint32> data := unique(src/adres_key)
		{
			attribute<string>                     nummeraanduiding_id := nummeraanduiding/identificatie[rlookup(values, nummeraanduiding/adres_key)];
			attribute<string>                     vbo_id              := rjoin(nummeraanduiding_id, vbo/nummeraanduiding_id, vbo/identificatie), FreeData = "True";
			attribute<uint32>                     datum_laatste       := max(src/datum_numeriek, rlookup(src/adres_key, values));
			attribute<Classifications/SchilLabel> SchilLabel_rel      := rjoin(values + '_' + string(datum_laatste), src/adres_key + '_' + string(src/datum_numeriek), src/schillabel_rel), FreeData = "True";
		}

		container BouwdeelKwaliteit_2000
		{
			unit<uint32> Src: StorageName = "%projDir%/isolatie/niveau_combinatie_label_frequentietabel_KWR_2000_FM.csv", StorageType = "gdal2.vect", StorageReadOnly = "True"
			{
				container data := for_each_nedv(Classifications/Bouwdeel/name ,Classifications/Bouwdeel/name == 'KR' ? 'const((0/0)[Classifications/IsolatieNiveau],src)' : 'rlookup(src/'+Classifications/Bouwdeel/name+', Classifications/IsolatieNiveau/name)' ,src ,Classifications/IsolatieNiveau )
				{
					attribute<Classifications/SchilLabel> SchilLabel_rel (src) := rlookup(Src/Energielabel, Classifications/SchilLabel/name);
					attribute<float64>                    Frequency      (src) := float64(src/freq);
					attribute<float64>                    CumulFrequency (src) := cumulate(Frequency, SchilLabel_rel);
					attribute<float64>                    ClassBreaks    (src) := CumulFrequency - Frequency;
				}
				container ClassBreak_p_Label := for_each_nt(Classifications/SchilLabel/Name, MakeBreaks);
				template MakeBreaks
				{
					parameter<Classifications/SchilLabel> SchilLabel_rel_here := ='Classifications/SchilLabel/V/' + PropValue(., 'name');
					unit<uint32> Sub := subset(Src/data/schillabel_rel == SchilLabel_rel_here)
					{
						attribute<float64> ClassBreaks := Src/data/ClassBreaks[nr_OrgEntity];
						attribute<float64> Frequency   := Src/data/Frequency[nr_OrgEntity];
					}
				}
			}
			unit<uint32> vbo := BAG/vbo_woonfunctie_studiegebied
			{
				attribute<Classifications/Schillabel> Schillabel_rel := BeginSituatie/StartingStateComponenten/Woning/Results/DefaultLabel_rel;
				parameter<uint32>                     seed           := 101;
				attribute<float64>                    RndNr          := rnd_uniform(seed, vbo, range(float64, 0d, 1d));
				attribute<Src>                        Src_rel        := ='makedefined('+AsItemList(replace('not(Schillabel_rel == Classifications/SchilLabel/V/@SL@) ? (0/0)[src] : Src/ClassBreak_p_Label/@SL@/sub/nr_OrgEntity[Classify(RndNr, Src/ClassBreak_p_Label/@SL@/sub/ClassBreaks)]','@SL@',Classifications/SchilLabel/name))+')';
			
				container Isolatie_vbo := for_each_nedv(
					  Classifications/Bouwdeel/Name
					, 'Src/Data/'+Classifications/Bouwdeel/Name+'[Src_rel]'
						, vbo
						, Classifications/Isolatieniveau
					);
			}
		}

		container BouwdeelKwaliteit
		{
			unit<uint32> Src: StorageName = "%projDir%/isolatie/frequentieverdeling_isolatieniveaus.csv", StorageType = "gdal2.vect", StorageReadOnly = "True"
			{
				attribute<string> name  := Schillabel + '_' + Woontype; // PrimaryKey
				attribute<string> label := name;
			}
			unit<uint32> vbo := BAG/vbo_woonfunctie_studiegebied
			{
				attribute<bool>                       isMeerGezins   (vbo) := BAG/vbo_woonfunctie_studiegebied/pand_aandeel < 1.0[ratio];
				attribute<Classifications/Schillabel> Schillabel_rel (vbo) := BeginSituatie/StartingStateComponenten/Woning/Results/DefaultLabel_rel;
				attribute<Src>                        Src_rel        (vbo) := rlookup(Classifications/SchilLabel/name[Schillabel_rel] + (isMeerGezins ? '_MGW' : '_EGW'), Src/name);

				container IsolatieAllocatie := for_each_ne(Classifications/Bouwdeel/name, 'KiesIsolatie(Classifications/Bouwdeel/V/'+Classifications/Bouwdeel/name+')');
				
				template KiesIsolatie
				{
					//case parameters
					parameter<Classifications/bouwdeel> Bouwdeel_rel;
					//end parameters

					attribute<ratio> P_N0 (Src) := ='(Src/'+Classifications/Bouwdeel/name[Bouwdeel_rel]+'_N0)[ratio]';
					attribute<ratio> P_N1 (Src) := ='(Src/'+Classifications/Bouwdeel/name[Bouwdeel_rel]+'_N1)[ratio] + P_N0';
					attribute<ratio> P_N2 (Src) := ='(Src/'+Classifications/Bouwdeel/name[Bouwdeel_rel]+'_N2)[ratio] + P_N1';
					attribute<ratio> P_N3 (Src) := ='(Src/'+Classifications/Bouwdeel/name[Bouwdeel_rel]+'_N3)[ratio] + P_N2';

					parameter<uint32>  seed        := 100 + uint32(Bouwdeel_rel);
					attribute<float64> RndNr (vbo) := rnd_uniform(seed, vbo, range(float64, 0d, 1d));

					attribute<Classifications/Isolatieniveau> Isolatieniveau_rel (vbo) :=
						  RndNr <= P_N0[Src_rel] ? Classifications/Isolatieniveau/V/N0
						: RndNr <= P_N1[Src_rel] ? Classifications/Isolatieniveau/V/N1
						: RndNr <= P_N2[Src_rel] ? Classifications/Isolatieniveau/V/N2
						: RndNr <= P_N3[Src_rel] ? Classifications/Isolatieniveau/V/N3
						: Classifications/Isolatieniveau/V/N4;
				}
				container Isolatie_vbo := for_each_nedv(
						  Classifications/Bouwdeel/Name
						, 'IsolatieAllocatie/'+Classifications/Bouwdeel/Name+'/Isolatieniveau_rel'
 						, vbo
 						, Classifications/Isolatieniveau
						);
				parameter<string> Isolatie_vbo_path := Invoer/StartgegevensAan ? '' : 'BouwdeelKwaliteit_2000/vbo/';
				unit<uint32> Isolatie_writer := vbo, Storagename = "%HestiaDataDir%/vraag/Wonen/Isolatie.fss"
				{
					attribute<Classifications/Isolatieniveau> RB := =Isolatie_vbo_path + 'Isolatie_vbo/RB';
					attribute<Classifications/Isolatieniveau> RO := =Isolatie_vbo_path + 'Isolatie_vbo/RO';
					attribute<Classifications/Isolatieniveau> DR := =Isolatie_vbo_path + 'Isolatie_vbo/DR';
					attribute<Classifications/Isolatieniveau> PL := =Isolatie_vbo_path + 'Isolatie_vbo/PL';
					attribute<Classifications/Isolatieniveau> VL := =Isolatie_vbo_path + 'Isolatie_vbo/VL';
					attribute<Classifications/Isolatieniveau> MG := =Isolatie_vbo_path + 'Isolatie_vbo/MG';
					attribute<Classifications/Isolatieniveau> MS := =Isolatie_vbo_path + 'Isolatie_vbo/MS';
					attribute<Classifications/Isolatieniveau> DP := =Isolatie_vbo_path + 'Isolatie_vbo/DP';
					attribute<Classifications/Isolatieniveau> DS := =Isolatie_vbo_path + 'Isolatie_vbo/DS';
					attribute<Classifications/Isolatieniveau> KR := =Isolatie_vbo_path + 'Isolatie_vbo/KR';
				}

				unit<uint32> Isolatie_reader := vbo, StorageName = "%HestiaDataDir%/vraag/Wonen/Isolatie.fss", StorageReadOnly = "true"
				{
					attribute<Classifications/Isolatieniveau> RB;
					attribute<Classifications/Isolatieniveau> RO;
					attribute<Classifications/Isolatieniveau> DR;
					attribute<Classifications/Isolatieniveau> PL;
					attribute<Classifications/Isolatieniveau> VL;
					attribute<Classifications/Isolatieniveau> MG;
					attribute<Classifications/Isolatieniveau> MS;
					attribute<Classifications/Isolatieniveau> DP;
					attribute<Classifications/Isolatieniveau> DS;
					attribute<Classifications/Isolatieniveau> KR;
				}

				parameter<bool> recalculate := true;
				unit<uint32>    Isolatie    := = recalculate ?  'Isolatie_writer' : 'Isolatie_reader';

			}
		}
		
	}

	#include <PuntBronnen.dms>
	#include <BestaandeWarmtenetten.dms>
	#include <EigendomStaat.dms>
	#include <Gasnetten.dms>
	#include <Dimensies.dms>
	#include <EigendomNieuwbouw.dms>
	
	container buislengte 
	{
		unit<uint32> buislengte_input
		:	StorageName     = "%HestiaDataDir%/infra/20200220_buislengte.csv"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	url             = "%HestiaDataDir%/infra/20190618_metadata_buislengte.pdf";

		unit<uint32> per_buurt := Studiegebied/buurt, using = "buislengte_input"
		,	DialogType = "map"
		,	DialogData = "geometry"
		{
			attribute<Geography/rdc_meter> geometry (poly) := Studiegebied/buurt/Geometry;
			attribute<string>              BU_CODE         := Studiegebied/buurt/BU_CODE;

			attribute<m>       L_dist_input     := rjoin(BU_CODE, buislengte_input/BU_CODE, buislengte_input/Hoofdleiding_lengte_m)[m];
			attribute<nrPand>  nrAansluitingen  := rjoin(BU_CODE, buislengte_input/BU_CODE, buislengte_input/Aansluitingen)[units/nrPand];

			attribute<m>       L_aansl          := max_elem(rjoin(BU_CODE, buislengte_input/BU_CODE, buislengte_input/Aansluit_lengte_m)[m], nrPanden * 1[m_pand])[m] , Descr = "invoer lengte aansluitleidingen per buurt";
			attribute<m>       L_dist           := max_elem(rjoin(BU_CODE, buislengte_input/BU_CODE, buislengte_input/Hoofdleiding_lengte_m)[m], 500[m])[m]           , Descr = "invoer lengte distributieleidingen per buurt";
			attribute<nrPand>  nrPanden         := max_elem(rjoin(BU_CODE, buislengte_input/BU_CODE, buislengte_input/Panden)[units/nrPand], 1[units/nrPand])[nrPand] , Descr = "invoer aantal panden per buurt";
			attribute<m_pand>  L_aansl_pand     := max_elem(L_aansl / nrPanden, 1[m_pand])[m_pand]                                                                    , Descr = "invoer gemiddelde lengte aansluitleidingen per pand";
			attribute<float64> Niet_aangesloten := float64(nrPanden) - float64(nrAansluitingen);
		}
	}
	container infra
	{
		unit<uint32> netwerk_input
		:	StorageName     = "%HestiaDataDir%/infra/20200825_E_G_infra.csv"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	url             = "%HestiaDataDir%/infra/20200123_E_G_infra_metadata.txt"
		{
			attribute<ratio> fractie_3x25_aansl_ratio :=  replace(fractie_3x25_aansl,',','.')[ratio];
		}
		
		unit<uint32> per_buurt := Studiegebied/buurt
		, DialogType = "map"
		, DialogData = "geometry"
		{
			attribute<Geography/rdc_meter> geometry (poly) := Studiegebied/buurt/Geometry;
			attribute<string>              BU_CODE         := Studiegebied/buurt/BU_CODE;

			container BC := TussenResultaten/StartJaar/BebouwingsComponenten;

			attribute<nrAsl> input_aant_g_aansl      := rjoin(BU_CODE, netwerk_input/BU_CODE, netwerk_input/aant_g_aansl)[nrAsl]             , Descr = "invoer aantal gasaansluitingen per buurt";
			attribute<m>     lengte_grogel_LD_net    := rjoin(BU_CODE, netwerk_input/BU_CODE, netwerk_input/lengte_grogel_LD_net__meters_)[m], Descr = "invoer lengte grondroeringsgevoelige LD-gasleidingen per buurt";
			attribute<m>     lengte_LD_net           := rjoin(BU_CODE, netwerk_input/BU_CODE, netwerk_input/lengte_LD_net__meters_)[m]       , Descr = "invoer lengte LD-gasnet per buurt";
			attribute<m>     lengte_LS_net           := rjoin(BU_CODE, netwerk_input/BU_CODE, netwerk_input/lengte_LS_buurt__meters_)[m]     , Descr = "invoer lengte LS-Enet per buurt";
			attribute<ratio> fractie_3x25_aansl      := rjoin(BU_CODE, netwerk_input/BU_CODE, netwerk_input/fractie_3x25_aansl_ratio)        , Descr = "invoer aandeel van aansluitingen per buurt dat momenteel al 3x25 of groter is";
			attribute<kw>    input_capaciteit_buurt  := rjoin(BU_CODE, netwerk_input/BU_CODE, netwerk_input/capaciteit_buurt__kva_)[kw]      , Descr = "invoer huidige opgestelde capaciteit aan MS-ruimtes ";
			attribute<kw>    capaciteit_buurt        := input_capaciteit_buurt;
		}
	}
	
	container Klimaat :=
			for_each_ndva(
				 Classifications/Rekenjaar/name
				,Geography/rdc_grids/m100
				,float32
				,'%HestiaDataDir%/hulpbestanden/klimaat/'+Invoer/DefaultInstellingen/Basis/KlimaatScenario+'exp/'+Invoer/DefaultInstellingen/Basis/KlimaatScenario+'_' + string(Classifications/Rekenjaar/Values) + '.tif'
			)
			, descr = "Graaddagenkaarten"
			, source = "KNMI"
			, url   = "%HestiaDataDir%/hulpbestanden/klimaat/Werkwijze_aanmaak_correctiekaarten_klimaat_obv_KNMI2014_scenarios_tbv_Vesta33.pdf";
		
	
	// inlezen kerncijfers wijken en buurten - meerdere jaren om missende waarden te ondervangen
	container CBSWijkEnBuurt: url="%HestiaDataDir%/CBS/20200129_update_kerncijfers_wijken_buurten_BVB.txt", IsHidden = "True"
	{
		unit<uint32> jaar := range(uint32,2015,2022)
		{
			attribute<string> filename:['20210923_kwb-2015','20210923_kwb-2016','20210923_kwb-2017','20210923_kwb-2018','20210923_kwb-2019','20210923_kwb-2020','20210923_kwb-2021'];
			attribute<string> reverse := string(max(id(.)) - (id(.) - min(id(.))));
		}
		container per_jaar: = for_each_ne('j' + string(id(jaar)), 'src_per_year(' + quote(string(id(jaar))) + ',' + quote(jaar/filename)+ ')');
		template src_per_year
		{
			// begin case parameters
			parameter<string> year;
			parameter<string> filename;
			// end case parameter

			unit<uint32> src:
				StorageName     = "='%HestiaDataDir%/CBS/' + filename + '.csv'",
				StorageType     = "gdal.vect",
				StorageReadOnly = "True";
		}
	}
}
