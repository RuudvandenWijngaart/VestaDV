//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2021 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//       In deze configuratiefile worden de brondata geconfigureerd.                    //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container RuimtelijkeData: Using = "Units;Geography;Model", FreeData = "True"
{
	container Studiegebied
	{
		container impl : IsHidden = "True"
		{
			unit<uint32> selected := range(uint32, 0, strcount(Invoer/StudieGebied, ',') + 1 )
			{
				attribute<string> values := ReadArray(lowercase(trim(Invoer/StudieGebied)), ., string, 0);
			}
		}
		attribute<bool> GeselecteerdeGemeente (RegioIndelingen/gemeente) := impl/selected/values[0] = 'nl'
			? const(true, RegioIndelingen/gemeente)
			: IsDefined(rlookup(lowercase(RegioIndelingen/gemeente/GM_code), impl/selected/values));
		
		attribute<bool> GeselecteerdeBuurt (RegioIndelingen/buurt) := impl/selected/values[0] = 'nl'
			? const(true, RegioIndelingen/buurt)
			: IsDefined(rlookup(lowercase(RegioIndelingen/buurt/GM_code), impl/selected/values));

//		attribute<bool> GeselecteerdeRastercel (Geography/rdc_grids/m100 ) := GeselecteerdeGemeente[Geography/RegioIndelingen/gemeente/per_m100];

		unit<uint32> Gemeente := select_with_org_rel(GeselecteerdeGemeente), IsHidden = "True"
		,	DialogType = "Map"
		,	DialogData = "geometry"
		{
			attribute<string>    name                                := GM_CODE, IsHidden = "True";
			parameter<string>    RegioNaam                           := 'Gemeente', IsHidden = "True";

			attribute<rdc_meter> geometry (poly)                     := RegioIndelingen/gemeente/geometry[org_rel];
			attribute<string>    GM_code                             := RegioIndelingen/gemeente/GM_CODE[org_rel];
			attribute<string>    label                               := RegioIndelingen/gemeente/GM_CODE[org_rel];
			attribute<Geography/RegioIndelingen/Energieregio> Energieregio_rel := RegioIndelingen/gemeente/Energieregio_rel[org_rel];
			attribute<.>         per_m100 (Geography/rdc_grids/m100) := poly2grid(geometry, Geography/rdc_grids/m100);
		}

		unit<uint32> Buurt := select_with_org_rel(GeselecteerdeBuurt), ishidden = "True"
		,	DialogType = "Map"
		,	DialogData = "geometry"
		{
			attribute<string>                                  name                := BU_code, IsHidden = "True";
			attribute<string>								   label               := name;
			parameter<string>                                  RegioNaam           := 'Buurt';

			attribute<rdc_meter>                               geometry (poly)     := RegioIndelingen/buurt/geometry[org_rel], IsHidden = "True";
			attribute<string>                                  BU_code             := RegioIndelingen/buurt/BU_CODE[org_rel];
			attribute<string>                                  BU_NAAM             := RegioIndelingen/buurt/BU_NAAM[org_rel];
			attribute<string>                                  WK_CODE             := RegioIndelingen/buurt/WK_CODE[org_rel];
			attribute<string>                                  GM_CODE             := RegioIndelingen/buurt/GM_CODE[org_rel];
			attribute<string>                                  GM_NAAM             := RegioIndelingen/buurt/GM_NAAM[org_rel];
			attribute<string>                                  ER_NAAM             := RegioIndelingen/buurt/ER_NAAM[org_rel];
			attribute<string>                                  PROV_NAAM           := RegioIndelingen/buurt/PROV_NAAM[org_rel];

			attribute<uint32>                                  code                := RegioIndelingen/buurt/code[org_rel], IsHidden = "True";

			attribute<rdc_meter>                               point               := RegioIndelingen/buurt/point[org_rel], IsHidden = "True";
			attribute<m2>                                      area                := RegioIndelingen/buurt/area[org_rel], IsHidden = "True";
			attribute<ha>                                      AreaInHa            := RegioIndelingen/buurt/AreaInHa[org_rel];
			attribute<km2>                                     AreaInKm2           := RegioIndelingen/buurt/AreaInKm2[org_rel], IsHidden = "True";
			attribute<ratio>                                   Overigen_r_land_com := RegioIndelingen/buurt/Overigen/r_land_com[org_rel], IsHidden = "True";

			attribute<ha>                                      AreaLandHa          := AreaInHa * Overigen_r_land_com ;
			attribute<percent>                                 Overigen_p_stadsv   := RegioIndelingen/buurt/Overigen/p_stadsv[org_rel], IsHidden = "True";
			attribute<ratio>                                   R_StadV             := makedefined(Overigen_p_stadsv / 100[percent], 0[ratio]), Descr = "Aandeel woningen aangesloten op stadsverwarming", ishidden = "True";

			attribute<bool>                                    IsWater             := RegioIndelingen/buurt/IsWater[org_rel], IsHidden = "True";

			attribute<Studiegebied/gemeente>                   gemeente_rel        := point_in_polygon(point, Studiegebied/gemeente/geometry), IsHidden = "True";
			attribute<Geography/RegioIndelingen/buurt>         Buurt_rel           := org_rel, IsHidden = "True";

			attribute<Geography/RegioIndelingen/NL>            NL_rel              := RegioIndelingen/buurt/NL_rel[org_rel], IsHidden = "True";
			attribute<Geography/RegioIndelingen/Provincie>     Provincie_rel       := RegioIndelingen/buurt/Provincie_rel[org_rel], IsHidden = "True";
			attribute<Geography/RegioIndelingen/Energieregio>  Energieregio_rel    := RegioIndelingen/buurt/Energieregio_rel[org_rel], IsHidden = "True";
			attribute<Geography/RegioIndelingen/Wijk>          Wijk_rel            := RegioIndelingen/buurt/Wijk_rel[org_rel], IsHidden = "True";

			attribute<.> per_m100 (Geography/rdc_grids/m100) := poly2grid(geometry, Geography/rdc_grids/m100), ishidden = "True";

			container Inkomen : IsHidden = "True"
			{
				attribute<percent> p_hh_li    (..) := Geography/RegioIndelingen/buurt/Inkomen/p_hh_li[org_rel];
				attribute<percent> p_hh_mi    (..) := Geography/RegioIndelingen/buurt/Inkomen/p_hh_mi[org_rel];
				attribute<percent> p_hh_hi    (..) := Geography/RegioIndelingen/buurt/Inkomen/p_hh_hi[org_rel];
				attribute<percent> p_checksum (..) := Geography/RegioIndelingen/buurt/Inkomen/p_checksum[org_rel], IsHidden = "True";
			}

			container Eigendom : IsHidden = "True"
			{
				attribute<percent> p_koopw    (..) := Geography/RegioIndelingen/buurt/Eigendom/p_koopw[org_rel];
				attribute<percent> p_huurw    (..) := Geography/RegioIndelingen/buurt/Eigendom/p_huurw[org_rel];
				attribute<percent> p_wcorpw   (..) := Geography/RegioIndelingen/buurt/Eigendom/p_wcorpw[org_rel];
				attribute<percent> p_ov_hw    (..) := Geography/RegioIndelingen/buurt/Eigendom/p_ov_hw[org_rel];
				attribute<percent> p_checksum (..) := Geography/RegioIndelingen/buurt/Eigendom/p_checksum [org_rel], IsHidden = "True";
			}
		}
	}

	#include <BAG.dms>
	#include <VastgoedProjectie.dms>
	#include <Bebouwing.dms>
	
	container EnergieLabel
	{
		// Voor koppeling aan de BAG
		unit<uint32> nummeraanduiding := RuimtelijkeData/BAG/import/nummeraanduiding, IsHidden = "True";
		unit<uint32> vbo              := RuimtelijkeData/BAG/import/vbo, IsHidden = "True";

		unit<uint32> src
		:	StorageName     = "%HestiaDataDir%/vraag/wonen/v20230201_csv.csv"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	IsHidden        = "True"
		{
			attribute<Classifications/SchilLabel>   schillabel_rel   := rlookup(replace(Pand_energieklasse, '+','') , Classifications/SchilLabel/name)  , IntegrityCheck = "strlen(Pand_energieklasse) == 0 || IsDefined(this)";
			attribute<Classifications/EnergieLabel> EnergieLabel_rel := rlookup(replace(Pand_energieklasse, '+','p'), Classifications/EnergieLabel/name), IntegrityCheck = "strlen(Pand_energieklasse) == 0 || IsDefined(this)";

			attribute<BAG/import/vbo>               vbo_rel        := rlookup(Pand_bagverblijfsobjectid, BAG/import/vbo/identificatie);
			attribute<uint32>                       datum_numeriek := uint32(replace(Pand_opnamedatum,'''',''));
			attribute<string>                       HLT_unquoted   := trim(replace(Pand_huisnummertoevoeging,'''',''));
			attribute<string>                       adres_key      := 
																//lowercase(
																	replace(Pand_postcode,'''','') + '_' + replace(Pand_huisnummer,'''','') + 
																	(strlen(HLT_unquoted) > 0 
																		? '_' + HLT_unquoted
																		: ''
																	)
																//)
																;
		}

		unit<uint32> data := unique(src/adres_key)
		{
			attribute<string>                       nummeraanduiding_id := nummeraanduiding/identificatie[rlookup(values, nummeraanduiding/adres_key)];
			attribute<string>                       vbo_id              := rjoin(nummeraanduiding_id, vbo/nummeraanduiding_id, vbo/identificatie), FreeData = "True";
			attribute<uint32>                       datum_laatste       := max(src/datum_numeriek, rlookup(src/adres_key, values));
			attribute<Classifications/SchilLabel>   SchilLabel_rel      := rjoin(values + '_' + string(datum_laatste), src/adres_key + '_' + string(src/datum_numeriek), src/schillabel_rel)  , FreeData = "True";
			attribute<Classifications/EnergieLabel> EnergieLabel_rel    := rjoin(values + '_' + string(datum_laatste), src/adres_key + '_' + string(src/datum_numeriek), src/EnergieLabel_rel), FreeData = "True";
		}

		unit<uint32> defaultlabels_2020 := BAG/import/VBO
		{
			container Default_Energielabel
			{
				unit<uint32>                          ModelObject           := Invoer/Kengetallen/Bebouwing/Woning/Results, IsHidden = "True";
				attribute<ModelObject>                ModelObject_rel (VBO) := rlookup( VBO/ModelObjectKey , ModelObject/ModelObjectKey ), IsHidden = "True";
				parameter<uint32>                     seed                  := Invoer/TechnischeInstellingen/RandomSeed + 199, IsHidden = "True";
				attribute<float32>                    RndNr           (VBO) := rnd_uniform(seed, vbo, range(float32, 0f, 1f)), IsHidden = "True";

				container Probability := for_each_nedv(
					  Classifications/SchilLabel/Name
					, 'ModelObject/LabelFrequentie/'+Classifications/SchilLabel/Name+'[ModelObject_rel]'
					, VBO
					, float32);
				container CumulProb : IsHidden = "True"
				{
					attribute<float32> A (VBO) := Probability/A;
					attribute<float32> B (VBO) := Probability/B + A;
					attribute<float32> C (VBO) := Probability/C + B;
					attribute<float32> D (VBO) := Probability/D + C;
					attribute<float32> E (VBO) := Probability/E + D;
					attribute<float32> F (VBO) := Probability/F + E;
					attribute<float32> G (VBO) := Probability/G + F;
				}

				attribute<Classifications/Schillabel> Schillabel_rel  (VBO) :=
					  RndNr < CumulProb/A ? Classifications/SchilLabel/V/A
					: RndNr < CumulProb/B ? Classifications/SchilLabel/V/B
					: RndNr < CumulProb/C ? Classifications/SchilLabel/V/C
					: RndNr < CumulProb/D ? Classifications/SchilLabel/V/D
					: RndNr < CumulProb/E ? Classifications/SchilLabel/V/E
					: RndNr < CumulProb/F ? Classifications/SchilLabel/V/F
					: Classifications/SchilLabel/V/G;
			}
		}

		unit<uint32> defaultlabels_2000 := BAG/import/VBO
		{
			container Default_Energielabel
			{
				attribute<yr_uint16>                  BJ              (VBO) := BAG/import/pand/bouwjaar_gecorrigeerd[VBO/pand_rel], IsHidden = "True";
				attribute<Classifications/WoningType> WT              (VBO) := VBO/woningtype_rel, IsHidden = "True";
				attribute<Classifications/Schillabel> Schillabel_rel  (VBO) := 
					WT == Classifications/WoningType/V/vrijstaand ? (
						BJ <= 1945[yr_uint16] ? Classifications/SchilLabel/V/G :
						BJ <= 1964[yr_uint16] ? Classifications/SchilLabel/V/F :
						BJ <= 1974[yr_uint16] ? Classifications/SchilLabel/V/D :
						BJ <= 1987[yr_uint16] ? Classifications/SchilLabel/V/C :
						BJ <= 1999[yr_uint16] ? Classifications/SchilLabel/V/B :
						             Classifications/SchilLabel/V/A ) :
					WT == Classifications/WoningType/V/twee_onder_1_kap ? (
						BJ <= 1945[yr_uint16] ? Classifications/SchilLabel/V/G :
						BJ <= 1964[yr_uint16] ? Classifications/SchilLabel/V/F :
						BJ <= 1974[yr_uint16] ? Classifications/SchilLabel/V/D :
						BJ <= 1991[yr_uint16] ? Classifications/SchilLabel/V/C :
						BJ <= 2005[yr_uint16] ? Classifications/SchilLabel/V/B :
						             Classifications/SchilLabel/V/A ) :
					WT == Classifications/WoningType/V/hoekwoning ? (
						BJ <= 1945[yr_uint16] ? Classifications/SchilLabel/V/G :
						BJ <= 1964[yr_uint16] ? Classifications/SchilLabel/V/F :
						BJ <= 1974[yr_uint16] ? Classifications/SchilLabel/V/D :
						BJ <= 1991[yr_uint16] ? Classifications/SchilLabel/V/C :
						BJ <= 1999[yr_uint16] ? Classifications/SchilLabel/V/B :
						             Classifications/SchilLabel/V/A ) :
					WT == Classifications/WoningType/V/tussenwoning ? (
						BJ <= 1945[yr_uint16] ? Classifications/SchilLabel/V/F :
						BJ <= 1964[yr_uint16] ? Classifications/SchilLabel/V/E :
						BJ <= 1991[yr_uint16] ? Classifications/SchilLabel/V/C :
						BJ <= 1999[yr_uint16] ? Classifications/SchilLabel/V/B :
						             Classifications/SchilLabel/V/A ) :
					                                                  (
						BJ <= 1945[yr_uint16] ? Classifications/SchilLabel/V/G :
						BJ <= 1964[yr_uint16] ? Classifications/SchilLabel/V/F :
						BJ <= 1974[yr_uint16] ? Classifications/SchilLabel/V/E :
						BJ <= 1991[yr_uint16] ? Classifications/SchilLabel/V/C :
						BJ <= 2005[yr_uint16] ? Classifications/SchilLabel/V/B :
						             Classifications/SchilLabel/V/A );
			}
		}

		unit<uint32> defaultlabels := =Invoer/StartgegevensAan ? 'defaultlabels_2020' : 'defaultlabels_2000', IsHidden = "True";

		container LabelToFSS : IsHidden = "True"
		{
			unit<uint32> vbo := BAG/import/VBO
			{
				unit<uint32> Label_writer := vbo, Storagename = "%HestiaDataDir%/vraag/Wonen/Schillabels.fss"
				{
					attribute<Classifications/SchilLabel>   SchilLabel_rel   := data/SchilLabel_rel[rlookup(identificatie, data/vbo_id)];
					attribute<Classifications/EnergieLabel> EnergieLabel_rel := data/EnergieLabel_rel[rlookup(identificatie, data/vbo_id)];
					attribute<uint32>  					    SchilLabel_date  := data/datum_laatste[rlookup(identificatie, data/vbo_id)];
				}
				unit<uint32> Label_reader := vbo, StorageName = "%HestiaDataDir%/vraag/Wonen/Schillabels.fss", StorageReadOnly = "true"
				{
					attribute<Classifications/SchilLabel>   SchilLabel_rel;
					attribute<uint32>  					    SchilLabel_date;
					attribute<Classifications/EnergieLabel> EnergieLabel_rel;
				}
				unit<uint32>    label_src    := = Invoer/HerberekenStartsituatie ?  'Label_writer' : 'Label_reader';

				attribute<Classifications/SchilLabel> 	SchilLabel_afgemeld   := label_src/SchilLabel_rel;
				attribute<Classifications/EnergieLabel> EnergieLabel_afgemeld := label_src/EnergieLabel_rel;
				attribute<uint32> 						Schillabel_datum 	  := label_src/SchilLabel_date;
			}
		}
		//======= Allocatie gebouwdeelkwaliteit per VBO ======
		
		unit<uint32> MinimaleBouwdeelKwaliteit_src
		:	StorageName     = "%ProjDir%/isolatie/minimale_bouwdeelkwaliteit_na_1992.csv"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<Classifications/BouwjaarWoningMinimaleBouwdeelkwaliteit>   bouwjaarklasse_rel   := rlookup(Bouwjaar, Classifications/BouwjaarWoningMinimaleBouwdeelkwaliteit/excel_code)  , IntegrityCheck = "strlen(Bouwjaar) == 0 || IsDefined(this)", IsHidden = "True";
			
			container V := for_each_ind(
			'nedv'
			,classifications/bouwdeel/name
			,'rlookup(MinimaleBouwdeelKwaliteit_src/' + classifications/bouwdeel/name + ', Classifications/IsolatieNiveau/name)'
			,MinimaleBouwdeelKwaliteit_src
			,Classifications/IsolatieNiveau
			), IsHidden = "True";
		}
		container BouwdeelKwaliteit_2000_1 := BouwdeelKwaliteitAllocatieT1('niveau_combinatie_label_frequentietabel_KWR_2000_FM.csv');
		container BouwdeelKwaliteit_2000_2 := BouwdeelKwaliteitAllocatieT2('niveau_combinatie_label_frequentietabel_KWR_2000_FM.csv');

		container BouwdeelKwaliteit_2020_1 := BouwdeelKwaliteitAllocatieT1('niveau_combinatie_label_frequentietabel_WoON_2020_FM.csv');
		container BouwdeelKwaliteit_2020_2 := BouwdeelKwaliteitAllocatieT2('niveau_combinatie_label_frequentietabel_WoON_2020_FM.csv');

		template BouwdeelKwaliteitAllocatieT1 : IsHidden = "True"
		{
			parameter<string> FreqTableName;

			unit<uint32> BouwdeelSrc: StorageName = "= '%projDir%/isolatie/' + FreqTableName", StorageType = "gdal2.vect", StorageReadOnly = "True";
			
				container Bouwdeeldata := for_each_nedv(Classifications/Bouwdeel/name ,Classifications/Bouwdeel/name == 'KR' ? 'const((0/0)[Classifications/IsolatieNiveau],BouwdeelSrc)' : 'rlookup(BouwdeelSrc/'+Classifications/Bouwdeel/name+', Classifications/IsolatieNiveau/name)' ,BouwdeelSrc ,Classifications/IsolatieNiveau )
				{
					attribute<Classifications/SchilLabel> SchilLabel_rel (BouwdeelSrc) := rlookup(BouwdeelSrc/Energielabel, Classifications/SchilLabel/name);
					attribute<float64>                    Frequency      (BouwdeelSrc) := float64(BouwdeelSrc/freq);
					attribute<float64>                    CumulFrequency (BouwdeelSrc) := cumulate(Frequency, SchilLabel_rel);
					attribute<float64>                    ClassBreaks    (BouwdeelSrc) := CumulFrequency - Frequency;
					attribute<float64>                    nr_observaties (BouwdeelSrc) := float64(BouwdeelSrc/Count);

					attribute<string> combi (BouwdeelSrc) := add( 
						isdefined(RB) ? 'RB' : 'xx', 
						isdefined(RO) ? 'RO' : 'xx', 
						isdefined(DR) ? 'DR' : 'xx', 
						isdefined(PL) ? 'PL' : 'xx', 
						isdefined(VL) ? 'VL' : 'xx', 
						isdefined(MG) ? 'MG' : 'xx', 
						isdefined(MS) ? 'MS' : 'xx', 
						isdefined(DP) ? 'DP' : 'xx', 
						isdefined(DS) ? 'DS' : 'xx', 
						'KR' 
						);

					attribute<VBO/Bouwdelen/unique_combi>       unique_combi_rel       (BouwdeelSrc) := rlookup(combi, VBO/Bouwdelen/unique_combi/values);
					attribute<VBO/Bouwdelen/unique_combi_label> unique_combi_label_rel (BouwdeelSrc) := combine_data(VBO/Bouwdelen/unique_combi_label, unique_combi_rel, SchilLabel_rel);
				}
				container ClassBreak_p_Label := for_each_nt(VBO/Bouwdelen/unique_combi_label/Label, MakeBreaks);
				template MakeBreaks
				{
					parameter<VBO/Bouwdelen/unique_combi_label> unique_combi_label_rel_here := ='VBO/Bouwdelen/unique_combi_label/V/' + PropValue(., 'name');
					unit<uint32> Sub := select_with_org_rel(Bouwdeeldata/unique_combi_label_rel == unique_combi_label_rel_here)
					{
						attribute<string>  Name        := 'Profile_' + string(id(.));
						attribute<string>  Label       := name;
						attribute<float64> ClassBreaks := Bouwdeeldata/ClassBreaks[org_rel];
						attribute<float64> Frequency   := Bouwdeeldata/Frequency[org_rel];
					}
				}
			
			unit<uint32> vbo := BAG/import/VBO
			{
				container Bouwdelen := for_each_nedv(
					  Classifications/Bouwdeel/name
					, replace('MakeDefined(RuimtelijkeData/Dimensies/Bouwdelen/@BD@, 1.0[m2]) > 0.0[m2]', '@BD@', Classifications/Bouwdeel/name)
					, vbo
					, bool
					)
				{
					attribute<string> combi (vbo) := add( 
						RB ? 'RB' : 'xx', 
						RO ? 'RO' : 'xx', 
						DR ? 'DR' : 'xx', 
						PL ? 'PL' : 'xx', 
						VL ? 'VL' : 'xx', 
						MG ? 'MG' : 'xx', 
						MS ? 'MS' : 'xx', 
						DP ? 'DP' : 'xx', 
						DS ? 'DS' : 'xx', 
						KR ? 'KR' : 'xx' 
						);

					unit<uint32> unique_combi       := unique(combi)
					{
						attribute<string> Label := Values;
					}
					unit<uint32> unique_combi_label := combine(unique_combi, Classifications/SchilLabel)
					{
						attribute<string> Label := unique_combi/label[nr_1] + '_' + Classifications/SchilLabel/name[nr_2];
						container V := for_each_nedv(Label, 'value('+string(id(.))+', ..)', void, .);
					}

					attribute<unique_combi>       unique_combi_rel       (vbo) := rlookup(combi, unique_combi/values);
					attribute<unique_combi_label> unique_combi_label_rel (vbo) := combine_data(unique_combi_label, unique_combi_rel, SchilLabel_rel);
				}

				attribute<Classifications/Schillabel> DefaultLabel_rel := Defaultlabels/Default_Energielabel/Schillabel_rel;

				attribute<Classifications/Schillabel> Schillabel_rel  := =Invoer/StartgegevensAan ? 'makedefined(Energielabel/data/SchilLabel_rel[rlookup(BAG/import/VBO/identificatie, Energielabel/data/vbo_id)], DefaultLabel_rel)' : 'DefaultLabel_rel';

				unit<uint32> Alabels := select_with_org_rel(Schillabel_rel == Classifications/SchilLabel/V/A)
				{
				attribute<Classifications/Isolatieniveau> NiveauMG := /Invoer/RuimtelijkeData/EnergieLabel/BouwdeelKwaliteit/VBO/Isolatie_writer/MG[org_rel];
				attribute<Classifications/Isolatieniveau> NiveauMS := /Invoer/RuimtelijkeData/EnergieLabel/BouwdeelKwaliteit/VBO/Isolatie_writer/MS[org_rel];
				}
				

				parameter<uint32>                     seed            := Invoer/TechnischeInstellingen/RandomSeed + 101;
				attribute<float64>                    RndNr           := rnd_uniform(seed, vbo, range(float64, 0d, 1d));
				attribute<BouwdeelSrc>                BouwdeelSrc_rel := ='makedefined('+AsItemList(replace('not(bouwdelen/unique_combi_label_rel == bouwdelen/unique_combi_label/V/@SL@) ? (0/0)[BouwdeelSrc] : ClassBreak_p_Label/@SL@/sub/org_rel[Classify(RndNr, ClassBreak_p_Label/@SL@/sub/ClassBreaks)]','@SL@',bouwdelen/unique_combi_label/label))+')';
			
				container Isolatie_vbo := for_each_nedv(
					  Classifications/Bouwdeel/Name
					, 'BouwdeelData/'+Classifications/Bouwdeel/Name+'[BouwdeelSrc_rel]'
						, vbo
						, Classifications/Isolatieniveau
					);
				
			}
		}


		template BouwdeelKwaliteitAllocatieT2 : IsHidden = "True"
		{
			parameter<string> FreqTableName;
			unit<uint32> Src: StorageName = "= '%projDir%/isolatie/' + FreqTableName", StorageType = "gdal2.vect", StorageReadOnly = "True";

			container BouwdeelSamples := for_each_nt(Classifications/Bouwdeel/name, BouwdeelSampleT);

			template BouwdeelSampleT
			{
				parameter<Classifications/bouwdeel> Bouwdeel_rel := ='Classifications/Bouwdeel/V/' + PropValue(., 'name');

				unit<uint32> BouwdeelSrc := ='select_with_org_rel(strlen(src/'+Classifications/Bouwdeel/name[Bouwdeel_rel]+') > 1)' 
				{
					container data 
					{
						attribute<Classifications/SchilLabel> SchilLabel_rel (BouwdeelSrc) := rlookup(Src/Energielabel[org_rel], Classifications/SchilLabel/name);
						attribute<float64>                    Frequency      (BouwdeelSrc) := float64(src/freq[org_rel]);

						attribute<float64>                    RelFreq        (BouwdeelSrc) := Frequency / sum(Frequency, SchilLabel_rel)[schillabel_rel];
						

						attribute<float64>                    CumulFrequency (BouwdeelSrc) := cumulate(RelFreq, SchilLabel_rel);

						attribute<float64>                    ClassBreaks    (BouwdeelSrc) := CumulFrequency - RelFreq;
						attribute<float64>                    nr_observaties (BouwdeelSrc) := float64(src/Count[org_rel]);

						attribute<Classifications/Isolatieniveau> Isolatieniveau_rel (BouwdeelSrc) := ='rlookup(src/' + Classifications/Bouwdeel/name[Bouwdeel_rel] + '[org_rel], Classifications/IsolatieNiveau/name)' ;
					}
					container ClassBreak_p_Label := for_each_nt(Classifications/SchilLabel/Name, MakeBreaks);
					template MakeBreaks
					{
						parameter<Classifications/SchilLabel> SchilLabel_rel_here := ='Classifications/SchilLabel/V/' + PropValue(., 'name');
						unit<uint32> Sub := select_with_org_rel(BouwdeelSrc/data/schillabel_rel == SchilLabel_rel_here)
						{
							attribute<float64> ClassBreaks := BouwdeelSrc/data/ClassBreaks[org_rel];
							attribute<float64> Frequency   := BouwdeelSrc/data/RelFreq[org_rel];
							attribute<float64> nr_observaties   := BouwdeelSrc/data/nr_observaties[org_rel];
							attribute<Classifications/Isolatieniveau> Isolatieniveau_rel   := BouwdeelSrc/data/Isolatieniveau_rel[org_rel];
						}
					}
				}
				unit<uint32> vbo := BAG/import/VBO
				{
					attribute<Classifications/Schillabel> DefaultLabel_rel := Defaultlabels/Default_Energielabel/Schillabel_rel;

					attribute<Classifications/Schillabel> Schillabel_rel  := =Invoer/StartgegevensAan ? 'makedefined(Energielabel/data/SchilLabel_rel[rlookup(BAG/import/VBO/identificatie, Energielabel/data/vbo_id)], DefaultLabel_rel)' : 'DefaultLabel_rel';
					
					parameter<uint32>                     seed             := 101;
					attribute<float64>                    RndNr            := rnd_uniform(seed, vbo, range(float64, 0d, 1d));
					attribute<BouwdeelSrc>                bouwdeelsrc_rel  := ='makedefined('+AsItemList(replace('not(Schillabel_rel == Classifications/SchilLabel/V/@SL@) ? (0/0)[BouwdeelSrc] : BouwdeelSrc/ClassBreak_p_Label/@SL@/sub/org_rel[Classify(RndNr, BouwdeelSrc/ClassBreak_p_Label/@SL@/sub/ClassBreaks)]','@SL@',Classifications/SchilLabel/name))+')';
				
					container Isolatie_vbo
					{
						attribute<bool> HeeftBouwdeel (VBO) := =replace('isnull(RuimtelijkeData/Dimensies/Bouwdelen/@BD@) || RuimtelijkeData/Dimensies/Bouwdelen/@BD@ > 0.0[m2]', '@BD@', Classifications/Bouwdeel/name[Bouwdeel_rel]);
						attribute<Classifications/Isolatieniveau> Isolatieniveau_rel (VBO) := HeeftBouwdeel ? makedefined(bouwdeelsrc/Data/Isolatieniveau_rel[bouwdeelsrc_rel], Classifications/IsolatieNiveau/V/N0) : Classifications/IsolatieNiveau/V/N0;
					}
				}
			}
			unit<uint32> vbo := BAG/import/VBO
			{
				container Isolatie_vbo := for_each_nedv(
					  Classifications/Bouwdeel/Name
					, Classifications/Bouwdeel/Name == 'KR' ? 'const(Classifications/Isolatieniveau/V/N0,VBO)' : 'BouwdeelSamples/'+Classifications/Bouwdeel/Name+'/VBO/Isolatie_vbo/IsolatieNiveau_rel'
						, vbo
						, Classifications/Isolatieniveau
					);
			}
		}
		container BouwdeelKwaliteit
		{
			unit<uint32> vbo := BAG/import/VBO
			{
				parameter<string> Isolatie_vbo_path_1 := Invoer/StartgegevensAan ? 'BouwdeelKwaliteit_2020_1/vbo/' : 'BouwdeelKwaliteit_2000_1/vbo/', IsHidden = "True";
				parameter<string> Isolatie_vbo_path_2 := Invoer/StartgegevensAan ? 'BouwdeelKwaliteit_2020_2/vbo/' : 'BouwdeelKwaliteit_2000_2/vbo/', IsHidden = "True";

				unit<uint32> Isolatie_temp := Isolatie_writer, IsHidden = "True";
				
				container MinimaleIsolatieNiveausNa1991 : IsHidden = "True"
				{
					attribute<uint16> bouwjaar_rel (vbo) := BAG/import/pand/bouwjaar_gecorrigeerd[VBO/pand_rel];
					attribute<string> vbo_id (vbo) := /Invoer/RuimtelijkeData/BAG/import/VBO/identificatie;
					unit<uint32> BouwjaarNa1991 := select_with_org_rel(bouwjaar_rel > 1991[uint16])
					{
						attribute<Classifications/BouwjaarWoningMinimaleBouwdeelkwaliteit> bouwjaarklasse (BouwjaarNa1991) := classify(bouwjaar_rel[org_rel], Classifications/BouwjaarWoningMinimaleBouwdeelkwaliteit/ClassBreak);
						
						container NieuweBouwdeelKwaliteit := for_each_ind(
						'nedv'
						, Classifications/Bouwdeel/Name
						, replace('(Isolatie_temp/@BD@[org_rel] <  MinimaleBouwdeelKwaliteit_src/V/@BD@[invert(MinimaleBouwdeelKwaliteit_src/Bouwjaarklasse_rel)][bouwjaarklasse]) 
							&& (RuimtelijkeData/Dimensies/Bouwdelen/@BD@[org_rel] > 0.0[m2] || isnull(RuimtelijkeData/Dimensies/Bouwdelen/@BD@[org_rel]))
							? MinimaleBouwdeelKwaliteit_src/V/@BD@[invert(MinimaleBouwdeelKwaliteit_src/Bouwjaarklasse_rel)][bouwjaarklasse]
							: Isolatie_temp/@BD@[org_rel]',
							'@BD@',Classifications/Bouwdeel/Name)
						, BouwjaarNa1991
						, Classifications/Isolatieniveau
						);
						
						container IsolatieNiveauNieuw := for_each_nt(
						 Classifications/Bouwdeel/Name
						, ToebedelingIsolatieniveau
						);
						
						Template ToebedelingIsolatieniveau
						{
							// begin case parameters
							parameter<string> BouwdeelNaam := PropValue(., 'name');
							// end case parameters
							parameter<Classifications/bouwdeel> Bouwdeel_rel := ='Classifications/Bouwdeel/V/' + BouwdeelNaam;

							attribute<bool> HeeftBouwdeel (BouwjaarNa1991) := =replace('isnull(RuimtelijkeData/Dimensies/Bouwdelen/@BD@)[org_rel] || RuimtelijkeData/Dimensies/Bouwdelen/@BD@[org_rel] > 0.0[m2]', '@BD@', BouwdeelNaam);
							attribute<bool> IsolatieNiveauOnderNorm (BouwjaarNa1991) := =replace('(Isolatie_temp/@BD@[org_rel] <  MinimaleBouwdeelKwaliteit_src/V/@BD@[invert(MinimaleBouwdeelKwaliteit_src/Bouwjaarklasse_rel)][bouwjaarklasse])', '@BD@', BouwdeelNaam);
							attribute<Classifications/Isolatieniveau> IsolatieNiveau (BouwjaarNa1991) := = replace('HeeftBouwdeel && IsolatieNiveauOnderNorm 
								? MinimaleBouwdeelKwaliteit_src/V/@BD@[invert(MinimaleBouwdeelKwaliteit_src/Bouwjaarklasse_rel)][bouwjaarklasse]
								: Isolatie_temp/@BD@[org_rel]', '@BD@', BouwdeelNaam);
						}
					}
				}

				unit<uint32> IsolatieMetMinimaleIsolatieNiveaus := for_each_ind(
				'nedv'
				,Classifications/Bouwdeel/Name
				,replace('recollect_by_cond(MinimaleIsolatieNiveausNa1991/bouwjaar_rel > 1991[uint16], MinimaleIsolatieNiveausNa1991/BouwjaarNa1991/IsolatieNiveauNieuw/@BD@/IsolatieNiveau, Isolatie_temp/@BD@)', '@BD@',Classifications/Bouwdeel/Name)
				,vbo
				,Classifications/Isolatieniveau
				), IsHidden = "True";

				unit<uint32> Isolatie_writer := vbo, Storagename = "%HestiaDataDir%/vraag/Wonen/Isolatie.fss", IsHidden = "True"
				{
					attribute<Classifications/Isolatieniveau> RB := ='makedefined('+Isolatie_vbo_path_1 + 'Isolatie_vbo/RB,' + Isolatie_vbo_path_2 + 'Isolatie_vbo/RB)';
					attribute<Classifications/Isolatieniveau> RO := ='makedefined('+Isolatie_vbo_path_1 + 'Isolatie_vbo/RO,' + Isolatie_vbo_path_2 + 'Isolatie_vbo/RO)';
					attribute<Classifications/Isolatieniveau> DR := ='makedefined('+Isolatie_vbo_path_1 + 'Isolatie_vbo/DR,' + Isolatie_vbo_path_2 + 'Isolatie_vbo/DR)';
					attribute<Classifications/Isolatieniveau> PL := ='makedefined('+Isolatie_vbo_path_1 + 'Isolatie_vbo/PL,' + Isolatie_vbo_path_2 + 'Isolatie_vbo/PL)';
					attribute<Classifications/Isolatieniveau> VL := ='makedefined('+Isolatie_vbo_path_1 + 'Isolatie_vbo/VL,' + Isolatie_vbo_path_2 + 'Isolatie_vbo/VL)';
					attribute<Classifications/Isolatieniveau> MG := ='makedefined('+Isolatie_vbo_path_1 + 'Isolatie_vbo/MG,' + Isolatie_vbo_path_2 + 'Isolatie_vbo/MG)';
					attribute<Classifications/Isolatieniveau> MS := ='makedefined('+Isolatie_vbo_path_1 + 'Isolatie_vbo/MS,' + Isolatie_vbo_path_2 + 'Isolatie_vbo/MS)';
					attribute<Classifications/Isolatieniveau> DP := ='makedefined('+Isolatie_vbo_path_1 + 'Isolatie_vbo/DP,' + Isolatie_vbo_path_2 + 'Isolatie_vbo/DP)';
					attribute<Classifications/Isolatieniveau> DS := ='makedefined('+Isolatie_vbo_path_1 + 'Isolatie_vbo/DS,' + Isolatie_vbo_path_2 + 'Isolatie_vbo/DS)';
					attribute<Classifications/Isolatieniveau> KR := ='makedefined('+Isolatie_vbo_path_1 + 'Isolatie_vbo/KR,' + Isolatie_vbo_path_2 + 'Isolatie_vbo/KR)';
				}
				
				unit<uint32> Isolatie_reader := vbo, StorageName = "%HestiaDataDir%/vraag/Wonen/Isolatie.fss", StorageReadOnly = "true", IsHidden = "True"
				{
					attribute<Classifications/Isolatieniveau> RB;
					attribute<Classifications/Isolatieniveau> RO;
					attribute<Classifications/Isolatieniveau> DR;
					attribute<Classifications/Isolatieniveau> PL;
					attribute<Classifications/Isolatieniveau> VL;
					attribute<Classifications/Isolatieniveau> MG;
					attribute<Classifications/Isolatieniveau> MS;
					attribute<Classifications/Isolatieniveau> DP;
					attribute<Classifications/Isolatieniveau> DS;
					attribute<Classifications/Isolatieniveau> KR;
				}
								
				unit<uint32>    Isolatie_src    := = Invoer/HerberekenStartsituatie ?  'IsolatieMetMinimaleIsolatieNiveaus' : 'Isolatie_reader', IsHidden = "True";

				container Isolatie := for_each_nedv(Classifications/Bouwdeel/name, 'Isolatie_src/' + Classifications/Bouwdeel/name + '[BAG/vbo_woonfunctie_studiegebied/org_rel]',BAG/vbo_woonfunctie_studiegebied , Classifications/Isolatieniveau);
			}
		}
	}

	#include <PuntBronnen.dms>
	#include <BestaandeWarmtenetten.dms>
	#include <EigendomStaat.dms>
	#include <Gasnetten.dms>
	#include <OSM.dms>
	#include <Dimensies.dms>
	#include <EigendomNieuwbouw.dms>
	#include <Overheveling.dms>
	
	container buislengte : IsHidden = "True"
	{
		unit<uint32> buislengte_input
		:	StorageName     = "%HestiaDataDir%/infra/20200220_buislengte.csv"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	url             = "%HestiaDataDir%/infra/20190618_metadata_buislengte.pdf";

		unit<uint32> per_buurt := Studiegebied/buurt, using = "buislengte_input"
		,	DialogType = "map"
		,	DialogData = "geometry"
		{
			attribute<Geography/rdc_meter> geometry (poly) := Studiegebied/buurt/Geometry;
			attribute<string>              BU_CODE         := Studiegebied/buurt/BU_CODE;

			attribute<m>       L_dist_input     := rjoin(BU_CODE, buislengte_input/BU_CODE, buislengte_input/Hoofdleiding_lengte_m)[m];
			attribute<nrPand>  nrAansluitingen  := rjoin(BU_CODE, buislengte_input/BU_CODE, buislengte_input/Aansluitingen)[units/nrPand];

			attribute<m>       L_aansl          := max_elem(rjoin(BU_CODE, buislengte_input/BU_CODE, buislengte_input/Aansluit_lengte_m)[m], nrPanden * 1[m_pand])[m] , Descr = "invoer lengte aansluitleidingen per buurt";
			attribute<m>       L_dist           := max_elem(rjoin(BU_CODE, buislengte_input/BU_CODE, buislengte_input/Hoofdleiding_lengte_m)[m], 500[m])[m]           , Descr = "invoer lengte distributieleidingen per buurt";
			attribute<nrPand>  nrPanden         := max_elem(rjoin(BU_CODE, buislengte_input/BU_CODE, buislengte_input/Panden)[units/nrPand], 1[units/nrPand])[nrPand] , Descr = "invoer aantal panden per buurt";
			attribute<m_pand>  L_aansl_pand     := max_elem(L_aansl / nrPanden, 1[m_pand])[m_pand]                                                                    , Descr = "invoer gemiddelde lengte aansluitleidingen per pand";
			attribute<float64> Niet_aangesloten := float64(nrPanden) - float64(nrAansluitingen);
		}
	}
	container infra
	{
		unit<uint32> netwerk_input
		:	StorageName     = "%HestiaDataDir%/infra/20200825_E_G_infra.csv"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	url             = "%HestiaDataDir%/infra/20200123_E_G_infra_metadata.txt"
		{
			attribute<ratio> fractie_3x25_aansl_ratio :=  replace(fractie_3x25_aansl,',','.')[ratio];
		}
		
		unit<uint32> per_buurt := Studiegebied/buurt
		, DialogType = "map"
		, DialogData = "geometry"
		, IsHidden   = "True"
		{
			attribute<Geography/rdc_meter> geometry (poly) := Studiegebied/buurt/Geometry;
			attribute<string>              BU_CODE         := Studiegebied/buurt/BU_CODE;

			container BC := TussenResultaten/StartJaar/BebouwingsComponenten;

			attribute<nrAsl> input_aant_g_aansl      := rjoin(BU_CODE, netwerk_input/BU_CODE, netwerk_input/aant_g_aansl)[nrAsl]             , Descr = "invoer aantal gasaansluitingen per buurt";
			attribute<m>     lengte_grogel_LD_net    := rjoin(BU_CODE, netwerk_input/BU_CODE, netwerk_input/lengte_grogel_LD_net__meters_)[m], Descr = "invoer lengte grondroeringsgevoelige LD-gasleidingen per buurt";
			attribute<m>     lengte_LD_net           := rjoin(BU_CODE, netwerk_input/BU_CODE, netwerk_input/lengte_LD_net__meters_)[m]       , Descr = "invoer lengte LD-gasnet per buurt";
			attribute<m>     lengte_LS_net           := rjoin(BU_CODE, netwerk_input/BU_CODE, netwerk_input/lengte_LS_buurt__meters_)[m]     , Descr = "invoer lengte LS-Enet per buurt";
			attribute<ratio> fractie_3x25_aansl      := rjoin(BU_CODE, netwerk_input/BU_CODE, netwerk_input/fractie_3x25_aansl_ratio)        , Descr = "invoer aandeel van aansluitingen per buurt dat momenteel al 3x25 of groter is";
			attribute<kw>    input_capaciteit_buurt  := rjoin(BU_CODE, netwerk_input/BU_CODE, netwerk_input/capaciteit_buurt__kva_)[kw]      , Descr = "invoer huidige opgestelde capaciteit aan MS-ruimtes ";
			attribute<kw>    capaciteit_buurt        := input_capaciteit_buurt;
		}
	}

	container Klimaat
	{
		parameter<string>  KlimaatScenario   :=  DefaultInstellingen/Basis/KlimaatScenario;
		parameter<float32> ReferentieJaar    := 2020[float32];
		parameter<string>  ReferentieStation := 'DE_BILT';

		unit<uint32> Station : StorageName = "%HestiaDataDir%/hulpbestanden/klimaat/Tempdata_stations.shp"
			,   StorageType     = "gdal.vect"
			,	DialogData      = "geometry"
			,	DialogType      = "Map"
			,	StorageReadOnly = "True"
		{
			attribute<rdc_meter> geometry;
			attribute<rdc_mm>    geometry_mm := geometry[rdc_mm];
			attribute<string>    label       := name;
			attribute<string>    ItemName    := AsItemName(name);

			attribute<float32> T1995;
			attribute<float32> T2030;

			attribute<float32> T2050WH;
			attribute<float32> T2050WL;
			attribute<float32> T2050GH;
			attribute<float32> T2050GL;

			parameter<float32> Referentie_T := =replace('T1995[V/@RS@] + (ReferentieJaar - 1995[float32]) * ((T2030[V/@RS@] - T1995[V/@RS@]) / 35[float32])', '@RS@', ReferentieStation);   
			parameter<float32> Referentie_Graaddagen := 6369[float32] - (337[float32] * Referentie_T);   
		
			container V := for_each_nedv(ItemName, string(id(.))+'[..]', void, .), IsHidden = "True";
		}
		unit<wpoint> Grid := Geography/rdc_grids/m100
		{
			container Dist := for_each_nedv(
				  Station/ItemName
				, replace('value(dist(Grid/point, const(Station/geometry[Station/V/@SN@], Grid)),float32)', '@SN@', Station/ItemName)
				, Grid
				, float32
				);
			container Weight := for_each_nedv(
				  Station/ItemName
				, replace('1.0[float32] / (dist/@SN@ ^ 4[float32])', '@SN@', Station/ItemName)
				, Grid
				, float32
				);
			container Tdata
			{
				attribute<float32> T1995 (Grid) := ='add('+AsItemList(replace('weight/@SN@ * Station/T1995[Station/V/@SN@]','@SN@',Station/ItemName))+') / add('+AsItemList(replace('weight/@SN@','@SN@',Station/ItemName))+')';
				attribute<float32> T2030 (Grid) := ='add('+AsItemList(replace('weight/@SN@ * Station/T2030[Station/V/@SN@]','@SN@',Station/ItemName))+') / add('+AsItemList(replace('weight/@SN@','@SN@',Station/ItemName))+')';
				attribute<float32> T2050 (Grid) := ='add('+AsItemList(replace('weight/@SN@ * Station/T2050'+KlimaatScenario+'[Station/V/@SN@]','@SN@',Station/ItemName))+') / add('+AsItemList(replace('weight/@SN@','@SN@',Station/ItemName))+')';

				attribute<float32> T1995_T2030_yr (Grid) := (T2030 - T1995) / 35[float32];
				attribute<float32> T2030_T2050_yr (Grid) := (T2050 - T2030) / 20[float32];
			}
			attribute<yr_uint16 > refjaar(Classifications/Zichtjaar) := Classifications/Rekenjaar/values[Classifications/Zichtjaar/Rekenjaar_rel] < 2031w ? 1995[yr_uint16] : 2030[yr_uint16];
			
			container Tjaar := for_each_nedv(
				  Classifications/Zichtjaar/name
				, (uint32(Classifications/Rekenjaar/values[Classifications/Zichtjaar/Rekenjaar_rel]) < uint32(2031)
					? 'Tdata/T1995 + Tdata/T1995_T2030_yr'
					: 'Tdata/T2030 + Tdata/T2030_T2050_yr')
				  + ' * ' + string(Classifications/Rekenjaar/values[Classifications/Zichtjaar/Rekenjaar_rel] - refjaar) + '[float32]'
				, Grid				
				, float32
				);
			container Graaddagen := for_each_nedv(
				  Classifications/Zichtjaar/name
				, '6369[float32] - (337[float32] * Tjaar/'+Classifications/Zichtjaar/name+')' //Graaddagenberekening = 6369 - (337 * gemiddelde T), formule uit Visser (2005), zie pdf Bas van Bemmel
				, Grid				
				, float32
				);
			container Kaart := for_each_nedv(
				  Classifications/Zichtjaar/name
				, 'Graaddagen/' + Classifications/Zichtjaar/name + '/ Station/Referentie_Graaddagen'
				, Grid				
				, float32
				);
		}
	}

	
	// inlezen kerncijfers wijken en buurten - meerdere jaren om missende waarden te ondervangen
	container CBSWijkEnBuurt: url="%HestiaDataDir%/CBS/20210923_updatelog_kerncijfers_wijken_buurten.txt", IsHidden = "True"
	{
		unit<uint32> jaar := range(uint32,2015,2023)
		{
			attribute<string> filename:['20210923_kwb-2015','20210923_kwb-2016','20210923_kwb-2017','20210923_kwb-2018','20210923_kwb-2019','20210923_kwb-2020','20210923_kwb-2021', '20230321_kwb-2022'];
			attribute<string> reverse := string(max(id(.)) - (id(.) - min(id(.))));
		}
		container per_jaar: = for_each_ne('j' + string(id(jaar)), 'src_per_year(' + quote(string(id(jaar))) + ',' + quote(jaar/filename)+ ')');
		template src_per_year
		{
			// begin case parameters
			parameter<string> year;
			parameter<string> filename;
			// end case parameter

			unit<uint32> src:
				StorageName     = "='%HestiaDataDir%/CBS/' + filename + '.csv'",
				StorageType     = "gdal.vect",
				StorageReadOnly = "True";
		}
	}
}
