//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2020 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//       In deze configuratiefile worden de brondata geconfigureerd.                    //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container RuimtelijkeData: Using = "Units;Geography;Model", FreeData = "False", url = "https://www.pbl.nl/sites/default/files/downloads/pbl-2021-functioneel-ontwerp-vesta-mais-5.0-4583.pdf#5.1_RuimtelijkeData"
{
	container Studiegebied
	{
		container impl
		{
			unit<uint32> selected := range(uint32, 0, strcount(Invoer/StudieGebied, ',') + 1 )
			{
				attribute<string> values := ReadArray(lowercase(trim(Invoer/StudieGebied)), ., string, 0);
			}
		}
		attribute<bool> selected_per_gemeente (RegioIndelingen/gemeente) := impl/selected/values[0] = 'nl'
			? const(true, RegioIndelingen/gemeente)
			: IsDefined(rlookup(lowercase(RegioIndelingen/gemeente/GM_code), impl/selected/values));
		
		attribute<bool> selected_per_buurt (RegioIndelingen/buurt) := impl/selected/values[0] = 'nl'
			? const(true, RegioIndelingen/buurt)
			: IsDefined(rlookup(lowercase(RegioIndelingen/buurt/GM_code), impl/selected/values));

		attribute<bool> selected_per_m100 (Geography/rdc_grids/m100 ) := selected_per_gemeente[Geography/RegioIndelingen/gemeente/per_m100];

		unit<uint32> Gemeente := subset(selected_per_gemeente)
		,	DialogType = "Map"
		,	DialogData = "geometry"
		{
			attribute<string>    name                                := GM_CODE;
			parameter<string>    RegioNaam                           := 'Gemeente';

			attribute<rdc_meter> geometry (poly)                     := RegioIndelingen/gemeente/geometry[nr_OrgEntity];
			attribute<string>    GM_code                             := RegioIndelingen/gemeente/GM_CODE[nr_OrgEntity];
			attribute<string>    label                               := RegioIndelingen/gemeente/GM_CODE[nr_OrgEntity];
			attribute<.>         per_m100 (Geography/rdc_grids/m100) := poly2grid(geometry, Geography/rdc_grids/m100);
		}

		unit<uint32> Buurt := subset(selected_per_buurt)
		,	DialogType = "Map"
		,	DialogData = "geometry"
		{
			attribute<string>                                  name                := BU_code;
			parameter<string>                                  RegioNaam           := 'Buurt';

			attribute<rdc_meter>                               geometry (poly)     := RegioIndelingen/buurt/geometry[nr_OrgEntity];
			attribute<string>                                  BU_code             := RegioIndelingen/buurt/BU_CODE[nr_OrgEntity];
			attribute<string>                                  BU_NAAM             := RegioIndelingen/buurt/BU_NAAM[nr_OrgEntity];
			attribute<string>                                  WK_CODE             := RegioIndelingen/buurt/WK_CODE[nr_OrgEntity];
			attribute<string>                                  WK_NAAM             := RegioIndelingen/buurt/WK_NAAM[nr_OrgEntity];
			attribute<string>                                  GM_CODE             := RegioIndelingen/buurt/GM_CODE[nr_OrgEntity];
			attribute<string>                                  GM_NAAM             := RegioIndelingen/buurt/GM_NAAM[nr_OrgEntity];
			attribute<string>                                  ER_NAAM             := RegioIndelingen/buurt/ER_NAAM[nr_OrgEntity];
			attribute<string>                                  PROV_NAAM           := RegioIndelingen/buurt/PROV_NAAM[nr_OrgEntity];

			attribute<uint32>                                  code                := RegioIndelingen/buurt/code[nr_OrgEntity];

			attribute<rdc_meter>                               point               := RegioIndelingen/buurt/point[nr_OrgEntity];
			attribute<m2>                                      area                := RegioIndelingen/buurt/area[nr_OrgEntity];
			attribute<ha>                                      AreaInHa            := RegioIndelingen/buurt/AreaInHa[nr_OrgEntity];
			attribute<km2>                                     AreaInKm2           := RegioIndelingen/buurt/AreaInKm2[nr_OrgEntity];
			attribute<ratio>                                   Overigen_r_land_com := RegioIndelingen/buurt/Overigen/r_land_com[nr_OrgEntity];

			attribute<ha>                                      Area_ov_r_land_com  := AreaInHa * Overigen_r_land_com ;

			attribute<percent>                                 Overigen_p_stadsv   := RegioIndelingen/buurt/Overigen/p_stadsv[nr_OrgEntity];
			attribute<ratio>                                   R_StadV             := makedefined(Overigen_p_stadsv / 100[percent], 0[ratio]);

			attribute<string>                                  IsWater             := RegioIndelingen/buurt/IsWater[nr_OrgEntity];
			attribute<yr_uint16>                               BioWKK_Start        := RegioIndelingen/buurt/BioWKK_Start[nr_OrgEntity];

			attribute<Studiegebied/gemeente>                   gemeente_rel        := point_in_polygon(point, Studiegebied/gemeente/geometry);
			attribute<Geography/RegioIndelingen/buurt>         Buurt_rel           := nr_OrgEntity;

			attribute<Geography/RegioIndelingen/NL>            NL_rel              := RegioIndelingen/buurt/NL_rel[nr_OrgEntity];
			attribute<Geography/RegioIndelingen/Provincie>     Provincie_rel       := RegioIndelingen/buurt/Provincie_rel[nr_OrgEntity];
			attribute<Geography/RegioIndelingen/Energieregio>  Energieregio_rel    := RegioIndelingen/buurt/Energieregio_rel[nr_OrgEntity];
			attribute<Geography/RegioIndelingen/Wijk>          Wijk_rel            := RegioIndelingen/buurt/Wijk_rel[nr_OrgEntity];

			attribute<.> per_m100 (Geography/rdc_grids/m100) := poly2grid(geometry, Geography/rdc_grids/m100);

			container Inkomen
			{
				attribute<percent> p_hh_li    (..) := Geography/RegioIndelingen/buurt/Inkomen/p_hh_li[nr_OrgEntity];
				attribute<percent> p_hh_mi    (..) := Geography/RegioIndelingen/buurt/Inkomen/p_hh_mi[nr_OrgEntity];
				attribute<percent> p_hh_hi    (..) := Geography/RegioIndelingen/buurt/Inkomen/p_hh_hi[nr_OrgEntity];
				attribute<percent> p_checksum (..) := Geography/RegioIndelingen/buurt/Inkomen/p_checksum[nr_OrgEntity];
			}

			container Eigendom
			{
				attribute<percent> p_koopw    (..) := Geography/RegioIndelingen/buurt/Eigendom/p_koopw[nr_OrgEntity];
				attribute<percent> p_huurw    (..) := Geography/RegioIndelingen/buurt/Eigendom/p_huurw[nr_OrgEntity];
				attribute<percent> p_wcorpw   (..) := Geography/RegioIndelingen/buurt/Eigendom/p_wcorpw[nr_OrgEntity];
				attribute<percent> p_ov_hw    (..) := Geography/RegioIndelingen/buurt/Eigendom/p_ov_hw[nr_OrgEntity];
				attribute<percent> p_checksum (..) := Geography/RegioIndelingen/buurt/Eigendom/p_checksum [nr_OrgEntity];
			}

			container Overigen
			{
			}
		}
	}

	#include <BAG.dms>
	#include <WloTiffNieuwbouwT.dms>

	#include <Nieuwbouw.dms>
	#include <Sloop.dms>
	#include <GlasTuinBouw.dms>
	#include <Bebouwing.dms>
	container EnergieLabel
	{
		// Voor koppeling aan de BAG
		unit<uint32> nummeraanduiding := RuimtelijkeData/BAG/import/nummeraanduiding;
		unit<uint32> vbo              := RuimtelijkeData/BAG/import/vbo;

		unit<uint32> src
		:	StorageName     = "%SourceDataProjDir%/vraag/wonen/20200101_inputlabels_rvo.csv"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	url             = "%SourceDataProjDir%/vraag/wonen20200106_Metadata_RVOlabels_FvdM.txt"
		{
			attribute<string> HLT_unquoted := trim(replace(HLT,'''',''));
			attribute<string> adres_key    := 
				//lowercase(
					replace(Postcode,'''','') + '_' + replace(HNR,'''','') + 
					(strlen(HLT_unquoted) > 0 
						? '_' + HLT_unquoted
						: ''
					)
				//)
				;
			unit<uint32> UniqueLabel := unique(label), DisableStorage="True" { attribute<uint32> Count := pcount(rlookup(label, values)); }
			
			//order of replace matters!
			attribute<Classifications/SchilLabel>   schillabel_rel := rlookup(replace(label, '+',''), Classifications/SchilLabel/name), IntegrityCheck = "IsDefined(this)";
			attribute<uint32>                       datum_numeriek := uint32(replace(DATUM,'''',''));
			
		}

		unit<uint32> data := unique(src/adres_key)
		{
			attribute<string>                     nummeraanduiding_id := nummeraanduiding/identificatie[rlookup(values, nummeraanduiding/adres_key)];
			attribute<string>                     vbo_id              := rjoin(nummeraanduiding_id, vbo/nummeraanduiding_id, vbo/identificatie), FreeData = "False";
			attribute<uint32>                     datum_laatste       := max(src/datum_numeriek, rlookup(src/adres_key, values));
			attribute<Classifications/SchilLabel> SchilLabel_rel      := rjoin(values + '_' + string(datum_laatste), src/adres_key + '_' + string(src/datum_numeriek), src/schillabel_rel), FreeData = "False";
		}
		
		unit<uint32> src_voorlopig
		:	StorageName     = "%SourceDataProjDir%/vraag/wonen/20191201_voorlopige_labels_rvo.csv"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	url             = ""
		{
			attribute<string> HLT_unquoted := trim(replace(HLT,'''',''));
			attribute<string> adres_key    :=
				//lowercase(
					replace(Postcode,'''','') + '_' + replace(HNR,'''','') + 
					(strlen(HLT_unquoted) > 0 
						? '_' + HLT_unquoted
						: ''
					)
				//)
				;
			unit<uint32> UniqueLabel := unique(label), DisableStorage="True" { attribute<uint32> Count := pcount(rlookup(label, values)); }
			
			//order of replace matters!
			attribute<Classifications/SchilLabel>   schillabel_rel := rlookup(replace(label, '+',''), Classifications/SchilLabel/name);// IntegrityCheck = "IsDefined(this)";
			attribute<uint32>                       datum_numeriek := uint32(replace(DATUM,'''',''));

		}

		unit<uint32> data_voorlopig := unique(src_voorlopig/adres_key)
		{
			attribute<string>                     nummeraanduiding_id := nummeraanduiding/identificatie[rlookup(values, nummeraanduiding/adres_key)];
			attribute<string>                     vbo_id              := rjoin(nummeraanduiding_id, vbo/nummeraanduiding_id, vbo/identificatie), FreeData = "False";
			attribute<uint32>                     datum_laatste       := max(src_voorlopig/datum_numeriek, rlookup(src_voorlopig/adres_key, values));
			attribute<Classifications/SchilLabel> SchilLabel_rel      := rjoin(values + '_' + string(datum_laatste), src_voorlopig/adres_key + '_' + string(src_voorlopig/datum_numeriek), src_voorlopig/schillabel_rel), FreeData = "False";
		}
	}

	#include <WarmteBronnen.dms>
	
	container buislengte 
	{
		unit<uint32> buislengte_input
		:	StorageName     = "%SourceDataProjDir%/infra/20200220_buislengte.csv"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	url             = "%SourceDataProjDir%/infra/20190618_metadata_buislengte.pdf";

		unit<uint32> per_buurt := Studiegebied/buurt, using = "buislengte_input"
		,	DialogType = "map"
		,	DialogData = "geometry"
		{
			attribute<Geography/rdc_meter> geometry (poly) := Studiegebied/buurt/Geometry;
			attribute<string>              BU_CODE         := Studiegebied/buurt/BU_CODE;

			attribute<m>       L_dist_input     := rjoin(BU_CODE, buislengte_input/BU_CODE, buislengte_input/Hoofdleiding_lengte_m)[m];
			attribute<nrPand>  nrAansluitingen  := rjoin(BU_CODE, buislengte_input/BU_CODE, buislengte_input/Aansluitingen)[units/nrPand];

			attribute<m>       L_aansl          := max_elem(rjoin(BU_CODE, buislengte_input/BU_CODE, buislengte_input/Aansluit_lengte_m)[m], nrPanden * 1[m_pand])[m] , Descr = "invoer lengte aansluitleidingen per buurt";
			attribute<m>       L_dist           := max_elem(rjoin(BU_CODE, buislengte_input/BU_CODE, buislengte_input/Hoofdleiding_lengte_m)[m], 500[m])[m]           , Descr = "invoer lengte distributieleidingen per buurt";
			attribute<nrPand>  nrPanden         := max_elem(rjoin(BU_CODE, buislengte_input/BU_CODE, buislengte_input/Panden)[units/nrPand], 1[units/nrPand])[nrPand] , Descr = "invoer aantal panden per buurt";
			attribute<m_pand>  L_aansl_pand     := max_elem(L_aansl / nrPanden, 1[m_pand])[m_pand]                                                                    , Descr = "invoer gemiddelde lengte aansluitleidingen per pand";
			attribute<float64> Niet_aangesloten := float64(nrPanden) - float64(nrAansluitingen);
		}
	}
	container infra
	{
		unit<uint32> netwerk_input
		:	StorageName     = "%SourceDataProjDir%/infra/20200825_E_G_infra.csv"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	url             = "%SourceDataProjDir%/infra/20200123_E_G_infra_metadata.txt"
		{
			attribute<ratio> fractie_3x25_aansl_ratio :=  replace(fractie_3x25_aansl,',','.')[ratio];
		}
		
		unit<uint32> per_buurt := Studiegebied/buurt
		, DialogType = "map"
		, DialogData = "geometry"
		{
			attribute<Geography/rdc_meter> geometry (poly) := Studiegebied/buurt/Geometry;
			attribute<string>              BU_CODE         := Studiegebied/buurt/BU_CODE;

			container BC := TussenResultaten/StartJaar/BebouwingsComponenten;

			attribute<nrAsl> input_aant_g_aansl            := rjoin(BU_CODE, netwerk_input/BU_CODE, netwerk_input/aant_g_aansl)[nrAsl], Descr = "invoer aantal gasaansluitingen per buurt";

			attribute<nrAsl> default_aant_g_aansl          := 
				= AsList('sum(BC/Bestaande' + /Classifications/BebouwingsSector/name + '/BO/nrAansluitingen, BC/Bestaande' + /Classifications/BebouwingsSector/name + '/BO/PlanRegio_rel)', ' + ');

			attribute<nrAsl> aant_g_aansl                  := IsDefined(input_aant_g_aansl) ? input_aant_g_aansl : default_aant_g_aansl;
			attribute<nrAsl> verschil_g_aansl              := aant_g_aansl - default_aant_g_aansl;

			attribute<m>     input_lengte_grogel_LD_net    := rjoin(BU_CODE, netwerk_input/BU_CODE, netwerk_input/lengte_grogel_LD_net__meters_)[m], Descr = "invoer lengte grondroeringsgevoelige LD-gasleidingen per buurt";
			attribute<m>     default_lengte_grogel_LD_net  := const(0[m],.), Descr = "default lengte grondroeringsgevoelige LD-gasleidingen per buurt";
			attribute<m>     lengte_grogel_LD_net          := IsDefined(input_lengte_grogel_LD_net) ? input_lengte_grogel_LD_net : default_lengte_grogel_LD_net;
			attribute<m>     verschil_lengte_grogel_LD_net := lengte_grogel_LD_net - default_lengte_grogel_LD_net;

			attribute<m>     input_lengte_LD_net           := rjoin(BU_CODE, netwerk_input/BU_CODE, netwerk_input/lengte_LD_net__meters_)[m], Descr = "invoer lengte LD-gasnet per buurt";
			attribute<m>     default_lengte_LD_net         := TussenResultaten/StartJaar/GebiedsAllocatie/RestWarmte/KostenBaten/KostenD/L_distr_g 
				* float64(TussenResultaten/StartJaar/StateNaAllocatie/Infra_per_buurt/aant_g_aansl > 0[nrAsl]);
			attribute<m>     lengte_LD_net                 := IsDefined(input_lengte_LD_net) && IsDefined(input_aant_g_aansl) ? input_lengte_LD_net : default_lengte_LD_net;
			attribute<m>     verschil_g_lengte_LD_net      := lengte_LD_net - default_lengte_LD_net;

			attribute<ratio> input_fractie_3x25_aansl      := rjoin(BU_CODE, netwerk_input/BU_CODE, netwerk_input/fractie_3x25_aansl_ratio), Descr = "invoer aandeel van aansluitingen per buurt dat momenteel al 3x25 of groter is";
			attribute<ratio> default_fractie_3x25_aansl    := const(0[ratio],.), Descr = "default aandeel van aansluitingen per buurt dat momenteel al 3x25 of groter is";
			attribute<ratio> fractie_3x25_aansl            := IsDefined(input_fractie_3x25_aansl) ? input_fractie_3x25_aansl : default_fractie_3x25_aansl;
			attribute<ratio> verschil_fractie_3x25_aansl   := fractie_3x25_aansl - default_fractie_3x25_aansl;

			attribute<kw>    input_capaciteit_buurt        := rjoin(BU_CODE, netwerk_input/BU_CODE, netwerk_input/capaciteit_buurt__kva_)[kw], Descr = "invoer huidige opgestelde capaciteit aan MS-ruimtes ";

			//TODO: restore terugvaloptie default
//			attribute<kw>    default_capaciteit_buurt      :=
//				= AsList('sum(BC/Bestaande' + /Classifications/BebouwingsSector/name + '/BO/AansluitCapaciteit/ASW_Eapp, BC/Bestaande' + /Classifications/BebouwingsSector/name + '/BO/PlanRegio_rel) 
//						  * TussenResultaten/StartJaar/Vermogens/GTF_' + /Classifications/BebouwingsSector/NcwRefBase + '_Enet  ', ' + ')
//			, Descr = "default huidige opgestelde capaciteit aan MS-ruimtes";
			
			attribute<kw>    capaciteit_buurt              := input_capaciteit_buurt;
//			attribute<kW>    verschil_capaciteit_buurt     := capaciteit_buurt - default_capaciteit_buurt;

			attribute<m>     input_lengte_LS_net           := rjoin(BU_CODE, netwerk_input/BU_CODE, netwerk_input/lengte_LS_buurt__meters_)[m],     Descr = "invoer totale lengte van het LS-net per buurt";
			attribute<m>     default_lengte_LS_net         := TussenResultaten/StartJaar/GebiedsAllocatie/RestWarmte/KostenBaten/KostenD/L_infra_e, Descr = "default totale lengte van het LS-net per buurt";
			attribute<m>     lengte_LS_net                 := IsDefined(input_lengte_LS_net) ? input_lengte_LS_net : default_lengte_LS_net;
			attribute<m>     verschil_lengte_LS_net        := lengte_LS_net - default_lengte_LS_net;
		}
	}

	// KNMI klimaatscenario voor daling functionele warmtevraag in de toekomst door hogere gemiddelde buitentemperatuur
	// Beschikbare varianten:
	// "%sourceDataProjDir%/hulpbestanden/klimaat/GLexp/GL_' + Classifications/ZichtJaar/label + '.tif"     ( + 1,0 graden celcius in 2050 )
	// "%sourceDataProjDir%/hulpbestanden/klimaat/GHexp/GH_' + Classifications/ZichtJaar/label + '.tif"     ( + 1,4 graden celcius in 2050 )
	// "%sourceDataProjDir%/hulpbestanden/klimaat/WLexp/WL_' + Classifications/ZichtJaar/label + '.tif"     ( + 2,0 graden celcius in 2050 )
	// "%sourceDataProjDir%/hulpbestanden/klimaat/WHexp/WH_' + Classifications/ZichtJaar/label + '.tif"     ( + 2,3 graden celcius in 2050 )

	
	container Klimaat :=
			for_each_ndva(
				 Classifications/Rekenjaar/name
				,Geography/rdc_grids/m100
				,float32
				,'%sourceDataProjDir%/hulpbestanden/klimaat/WHexp/WH_' + string(Classifications/Rekenjaar/Values) + '.tif'
			)
			, descr = "Klimaat_scenario_knmi"
			, url   = "%sourceDataProjDir%/hulpbestanden/klimaat/Werkwijze_aanmaak_correctiekaarten_klimaat_obv_KNMI2014_scenarios_tbv_Vesta33.pdf";
		
	
	
// 	container Klimaat :=
// 			for_each_ndva(
// 				 Classifications/ZichtJaar/name + '_in'
// 				,Geography/rdc_grids/m100
// 				,float32
// 				,'%sourceDataProjDir%/hulpbestanden/klimaat/GH/GH_' + Classifications/ZichtJaar/label + '.tif'
// 			)
// 			, descr = "Klimaat_scenario_knmi"
// 			, url   = "%sourceDataProjDir%/hulpbestanden/klimaat/Werkwijze_aanmaak_correctiekaarten_klimaat_obv_KNMI2014_scenarios_tbv_Vesta33.pdf"
// 			
// 	{
// 		parameter<ratio> correctiefactor :=
// 			1.0 + float64(mean(Startjaar_in) - mean(J2020_in)) * 0.8[ratio]
// 			, Descr = "kentallen warmtevraag bevatten al 80% van verschil tussen 2010 en 2020";
// 			
// 			attribute<float32> StartJaar (Geography/rdc_grids/m100) := float32(correctiefactor) * StartJaar_in;
// 			attribute<float32> J2020     (Geography/rdc_grids/m100) := float32(correctiefactor) * J2020_in;
// 			attribute<float32> J2030     (Geography/rdc_grids/m100) := float32(correctiefactor) * J2030_in;
// 			attribute<float32> J2040     (Geography/rdc_grids/m100) := float32(correctiefactor) * J2040_in; 
// 			attribute<float32> J2050     (Geography/rdc_grids/m100) := float32(correctiefactor) * J2050_in;  
// 	}
	// TODO: jaartallen in correctie parametriseren
			
	
	
	// inlezen kerncijfers wijken en buurten - meerdere jaren om missende waarden te ondervangen
	container CBSWijkEnBuurt: url="%sourceDataProjDir%/CBS/20200129_update_kerncijfers_wijken_buurten_BVB.txt"
	{
		unit<uint32> jaar := range(uint32,2013,2020)
		{
			attribute<string> filename:['20180802_kwb-2013','20180802_kwb-2014','20180802_kwb-2015','20190118_kwb-2016','20190118_kwb-2017','20190118_kwb-2018','20200129_kwb-2019'];
			attribute<string> reverse := string(max(id(.)) - (id(.) - min(id(.))));
		}
		container per_jaar: = for_each_ne('j' + string(id(jaar)), 'src_per_year(' + quote(string(id(jaar))) + ',' + quote(jaar/filename)+ ')');
		template src_per_year
		{
			// begin case parameters
			parameter<string> year;
			parameter<string> filename;
			// end case parameter

			unit<uint32> src:
				StorageName     = "='%SourceDataProjDir%/CBS/' + filename + '.csv'",
				StorageType     = "gdal.vect",
				StorageReadOnly = "True";
		}
	}
}
