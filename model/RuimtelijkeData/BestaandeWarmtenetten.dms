//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2021 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//       Deze DMS-file wordt aangeroepen door stam.dms                                  //
//       In deze configuratiefile wordt de brondata huidige Warmtenetten geconfigureerd //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container BestaandeWarmtenetten
{
	unit<uint32> Aflevergebied_data
	:   StorageName     = "%HestiaDataDir%/infra/BestaandeWarmtenetten/shapefiles/aflevergebied.shp"
	,   StorageType     = "gdal.vect"
	,	DialogData      = "geometry"
	,	DialogType      = "Map"
	,	StorageReadOnly = "True"
	{
	   attribute<rdc_meter> geometry   (poly);
	   attribute<rdc_mm   > geometry_mm(poly) := geometry[rdc_mm];

	   attribute<string>      label := Eigenaar + ' ' + Warmtenet;
		
		attribute<yr_uint16>   StartJaar;
		attribute<yr_uint16>   StartJaar_or_2000 := makedefined(StartJaar,2000[yr_uint16]);
		attribute<string>      Warmtenet;
		attribute<string>      Eigenaar;
		attribute<string>      Type;
		attribute<yr_uint16>   Jaar;
		attribute<string>      Nauwkeurig;
		attribute<Leverancier>  Leverancier_rel := rlookup(Eigenaar, Leverancier/name);
		attribute<AfleverType>  Type_rel := rlookup(Type, AfleverType/name);
		attribute<Warmtenetten> Warmtenet_rel   := rlookup(Warmtenet, Warmtenetten/name);
	}
	
	unit<uint32> overlap := polygon_connectivity(Aflevergebied_data/geometry[rdc_mm]), IsHidden = "True"
	{
		attribute<rdc_mm>    geometry_mm(poly) := Aflevergebied_data/Geometry_mm[F1] * Aflevergebied_data/Geometry_mm[F2];
		attribute<rdc_meter> geometry   (poly) := geometry_mm[rdc_meter];
		attribute<m2>        area := area(geometry, m2);
	}
	
	unit<uint32> AfleverType := unique(Aflevergebied_data/Type), DisableStorage = "True", IsHidden = "True"
	{
	   attribute<string> name  := Values;
	   attribute<string> label := name;
	   attribute<bool>   HeeftKoude := IsDefined(strpos(uppercase(name), 'WKO')) || IsDefined(strpos(uppercase(name), 'KOUDE'));
	}
	unit<uint32> Leverancier := unique(Aflevergebied_data/Eigenaar), DisableStorage = "True", IsHidden = "True"
	{
	   attribute<string> name  := Values;
	   attribute<string> label := name;
	}
	unit<uint32> Warmtenetten := unique(Aflevergebied_data/Warmtenet), DisableStorage = "True"
	{
	   attribute<string> name  := Values;
	   attribute<string> label := name;

	   attribute<float64> nr_HWK := sum(float64(Puntbronnen_data/Brontype_rel == Brontype/V/HulpKetel), Puntbronnen_data/Warmtenet_rel), Descr = "aantal Hulpketels in warmtenet";
	   attribute<ratio>   RP_HWK := makedefined(0.85[Ratio] / nr_HWK, 0.0[ratio]), Descr = "Aandeel vermogen per hulpketel";

	   attribute<Eur_kW>  Ki_kw_min := sum(Puntbronnen_data/ki_kw_max * Puntbronnen_data/P_cap, Puntbronnen_data/Warmtenet_rel);
	   attribute<Eur_kW>  Ki_kw_max := sum(Puntbronnen_data/ki_kw_min * Puntbronnen_data/P_cap, Puntbronnen_data/Warmtenet_rel);
	   attribute<Celsius> T_bron    := max(Puntbronnen_data/Temp_bron, Puntbronnen_data/Warmtenet_rel);
	   attribute<_yr>     R_OH      := sum(Puntbronnen_data/R_OH * Puntbronnen_data/P_cap, Puntbronnen_data/Warmtenet_rel);

	   container K_GJ := for_each_nedv(classifications/Rekenjaar/name
			, replace('sum(Puntbronnen_data/K_GJ/@X * Puntbronnen_data/P_vol_r, Puntbronnen_data/Warmtenet_rel)', '@X', classifications/Rekenjaar/name)
			, .
			, Eur_GJ
		);
		container Km_GJ := for_each_nedv(classifications/Rekenjaar/name
			, replace('sum(Puntbronnen_data/Km_GJ/@X * Puntbronnen_data/P_vol_r, Puntbronnen_data/Warmtenet_rel)', '@X', classifications/Rekenjaar/name)
			, .
			, Eur_GJ
		);
	}


	unit<uint32> Brontype := Kengetallen/WarmteBronnen/MetaData/Brontype, IsHidden = "True";

	unit<uint32> Puntbronnen_data
	:   StorageName     = "%HestiaDataDir%/infra/BestaandeWarmtenetten/shapefiles/puntbronnen.shp"
	,   StorageType     = "gdal.vect"
	,	DialogData      = "geometry"
	,	DialogType      = "Map"
	,	StorageReadOnly = "True"
	,	IsHidden        = "True"
	{
		
	   attribute<rdc_meter> geometry   ;
	   attribute<rdc_mm   > geometry_mm := geometry[rdc_mm];
	   attribute<string>    label        := Eigenaar + ' ' + Warmtenet;
	   attribute<percent>   P_vol_2021; 
	   attribute<ratio>     P_vol_r      := P_vol_2021 / 100[percent];
	   attribute<Brontype>  Brontype_rel := makedefined(rlookup(lowercase(Type), lowercase(Brontype/Type)), Brontype/V/Industrie);
		attribute<Eur_kW>   Ki_kW_min    := Brontype/Ki_cap_min[Brontype_rel];
		attribute<Eur_kW>   Ki_kW_max    := Brontype/Ki_cap_max[Brontype_rel];
		attribute<Celsius>  Temp_bron    := Brontype/T_bron[Brontype_rel];
		attribute<ratio>    P_cap        := not(Brontype_rel == Brontype/V/HulpKetel) ? Brontype/P_cap[Brontype_rel] : Warmtenetten/RP_HWK[Warmtenet_rel];
		attribute<_yr>      R_OH         := Brontype/R_oh[Brontype_rel];
		attribute<_yr>      R_adm        := Brontype/R_adm[Brontype_rel];

		container K_GJ := for_each_nedv(classifications/Rekenjaar/name
			, replace('Brontype/K_GJ/@X[Brontype_rel]', '@X', classifications/Rekenjaar/name)
			, .
			, Eur_GJ
		);
		container Km_GJ := for_each_nedv(classifications/Rekenjaar/name
			, replace('Brontype/Km_GJ/@X[Brontype_rel]', '@X', classifications/Rekenjaar/name)
			, .
			, Eur_GJ
		);

		attribute<Leverancier>  Leverancier_rel := rlookup(Eigenaar, Leverancier/name);
		attribute<Warmtenetten> Warmtenet_rel   := rlookup(Warmtenet, Warmtenetten/name);
	}
}