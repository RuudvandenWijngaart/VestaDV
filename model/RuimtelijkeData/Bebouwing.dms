//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2020 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//       Deze DMS-file wordt aangeroepen door stam.dms                                  //
//       In deze configuratiefile worden de bebouwingscomponenten geconfigureerd.       //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container Bebouwing :=
	for_each_ne( Classifications/ZichtJaar/name,
		'CalculationSchemes/BebouwingsOperaties/Samenstelling('
			'  impl/BestaandeWoning, impl/Nieuwbouw/woning/'      + Classifications/ZichtJaar/name + '/results, ' + string(Classifications/ZichtJaar/HasMutations) +
			', '+(Classifications/ZichtJaar/HasMutations ? 'Sloop/WoningResterendFactors/' + Classifications/ZichtJaar/name : 'RuimtelijkeData') +
			', impl/BestaandeUtil,  impl/Nieuwbouw/Utiliteit/'   + Classifications/ZichtJaar/name + '/results, ' + string(Classifications/ZichtJaar/HasMutations) +
			', '+(Classifications/ZichtJaar/HasMutations ? 'Sloop/UtilResterendFactors/'+Classifications/ZichtJaar/name : 'RuimtelijkeData') +
			', impl/BestaandeGlTb, impl/Nieuwbouw/Glastuinbouw/'+ Classifications/ZichtJaar/name+'/results, false, RuimtelijkeData'
			')'
		),
	Descr = "zie FO $2, Blok 1"
{
	container impl: isHidden = "True"
	{
		unit<uint32> BestaandeWoning := BAG/vbo_woonfunctie_studiegebied, DialogData = "point", DialogType = "Map"
		{
			unit<uint8>  BebouwingsTypeDomein  := Classifications/WoningtypeBestaand;
			unit<uint8>  BouwjaarDomein        := Classifications/BouwjaarWoningBestaand;
			unit<uint8>  ModelObjectKeyDomein  := Classifications/combines/WoningtypeBouwjaarBestaand;
			unit<uint8> WoningtypeBouwjaarBestaandRapportageDomein := Classifications/combines/WoningtypeBouwjaarBestaandRapportage;

			attribute<string>                                    code      := BAG/vbo_woonfunctie_studiegebied/identificatie;
			attribute<Invoer/RuimtelijkeData/StudieGebied/buurt> buurt_rel := BAG/vbo_woonfunctie_studiegebied/buurt_rel;

			attribute<nrAsl>                nrAansluitingen_i := impl/nrWon;
			attribute<m2>                   Oppervlakte_i     := median(BAG/vbo_woonfunctie_studiegebied/oppervlakte[m2], interval(50[m2], 200[m2]));

			attribute<BebouwingsTypeDomein> BebouwingsType := impl/WoningType, isHidden = "True";
			attribute<ModelObjectKeyDomein> ModelObjectKey := combine_data(ModelObjectKeyDomein, BebouwingsType, impl/BouwjaarWoningBestaand_rel);
			attribute<WoningtypeBouwjaarBestaandRapportageDomein> RapObjectKey   := combine_data(WoningtypeBouwjaarBestaandRapportageDomein, BebouwingsType, Impl/BouwjaarWoningBestaandRapportage_rel);
			attribute<BouwjaarDomein>       BouwJaar       := classify(BAG/vbo_woonfunctie_studiegebied/bouwjaar, Classifications/BouwjaarWoningBestaand/ClassBreak), isHidden = "True";

			attribute<rdc_meter>            point          := BAG/vbo_woonfunctie_studiegebied/geometry;

			container Gebied: IsHidden = "True"
			{
				attribute<float64> n      (..) := const(1.0,..);
				attribute<float64> MEAN_x (..) := float64(PointCol(point));
				attribute<float64> MEAN_y (..) := float64(PointRow(point));
				attribute<float64> SSD_xx (..) := const(0.0, ..);
				attribute<float64> SSD_xy (..) := const(0.0, ..);
				attribute<float64> SSD_yy (..) := const(0.0, ..);
			}

			unit<uint32> EnergieLabelData := RuimtelijkeData/EnergieLabel/Data;
			attribute<Classifications/SchilLabel> SchilLabel_rel := rjoin(code, EnergieLabelData/VBO_id, EnergieLabelData/schillabel_rel);
			attribute<Classifications/RVOEnergieLabel> RVOLabel_inclusief_voorlopig_rel := 
				MakeDefined(
					SchilLabel_rel
					, rjoin(code, RuimtelijkeData/EnergieLabel/Data_voorlopig/VBO_id, RuimtelijkeData/EnergieLabel/Data_voorlopig/schillabel_rel)
				)[Classifications/RVOEnergieLabel];
			attribute<uint8> ellabel_type := 
					isDefined(SchilLabel_rel) 
						? 1b
						: isDefined(rjoin(code, RuimtelijkeData/EnergieLabel/Data_voorlopig/VBO_id, RuimtelijkeData/EnergieLabel/Data_voorlopig/schillabel_rel))
							? 2b
							: 0b;

			container Criteria
			{
			}

			container impl : isHidden = "True"
			{
				attribute<nrAsl>                                  nrWon                      (..) := const(1,..,nrAsl);

				attribute<Classifications/BouwjaarWoningBestaand> BouwjaarWoningBestaand_rel (..) := BAG/vbo_woonfunctie_studiegebied/BouwjaarWoningBestaand_rel;
				attribute<string>                                 BouwJaarExcel              (..) := Classifications/BouwjaarWoningBestaand/excel_code[BouwjaarWoningBestaand_rel];
				
				attribute<Classifications/BouwjaarWoningBestaandRapportage> BouwjaarWoningBestaandRapportage_rel (..) := 
					isNull(Invoer/RuimtelijkeData/BAG/vbo_woonfunctie_studiegebied/bouwjaar) 
						? Classifications/BouwjaarWoningBestaandRapportage/onbekend 
						: classify(Invoer/RuimtelijkeData/BAG/vbo_woonfunctie_studiegebied/bouwjaar, Classifications/BouwjaarWoningBestaandRapportage/ClassBreak);

				attribute<classifications/WoningtypeBestaand>     WoningType                 (..) := BAG/vbo_woonfunctie_studiegebied/WoningtypeBestaand_rel;
				attribute<BebouwingsTypeDomein>                   BebouwingsType             (..) := WoningType;
			}
		}

		unit<uint32> BestaandeUtil := BAG/vbo_utiliteit_studiegebied
		{
			unit<uint8>  BebouwingsTypeDomein := Classifications/UtilTypeBestaand ,isHidden = "True";
			unit<uint8>  BouwjaarDomein       := Classifications/BouwjaarUtilBestaand;
			unit<uint8>  ModelObjectKeyDomein := Classifications/combines/UtiltypeBouwjaarBestaand;

			attribute<string> code     := BAG/vbo_utiliteit_studiegebied/identificatie;
			attribute<string> postcode := BAG/vbo_utiliteit_studiegebied/postcode;

			attribute<Invoer/RuimtelijkeData/StudieGebied/buurt> buurt_rel := BAG/vbo_utiliteit_studiegebied/buurt_rel, isHidden = "True";

			attribute<rdc_meter>                point    := BAG/vbo_utiliteit_studiegebied/locatie, isHidden = "True";
			attribute<Classifications/BouwJaar> BouwJaar := classify(BAG/vbo_utiliteit_studiegebied/bouwjaar, Classifications/BouwJaar/ClassBreak), isHidden = "True";

			attribute<nrAsl>                    nrAansluitingen_i := const(1[nrAsl], .);
			attribute<m2>                       Oppervlakte_i     := BAG/vbo_utiliteit_studiegebied/oppervlakte[m2];

			container Gebied: IsHidden = "True"
			{
				attribute<float64> n      (..) := const(1.0, ..);
				attribute<float64> MEAN_x (..) := PointCol(point);
				attribute<float64> MEAN_y (..) := PointRow(point);
				attribute<float64> SSD_xx (..) := const(0.0, ..);
				attribute<float64> SSD_xy (..) := const(0.0, ..);
				attribute<float64> SSD_yy (..) := const(0.0, ..);
			}

			// foreign key to model data
			attribute<Classifications/BouwjaarUtilBestaand> BouwjaarUtilBestaand_rel := BAG/vbo_utiliteit_studiegebied/BouwjaarUtilBestaand_rel, isHidden = "True";
			attribute<BebouwingsTypeDomein>                 BebouwingsType           := BAG/vbo_utiliteit_studiegebied/gebruiksdoel, isHidden = "True";
			attribute<ModelObjectKeyDomein>                 ModelObjectKey           := combine_data(ModelObjectKeyDomein, BebouwingsType, impl/BouwjaarUtilBestaand_rel);
			attribute<int16>                                SymbolIndex              := BebouwingsTypeDomein/SymbolIndex[BebouwingsType], DialogType = "SymbolIndex", isHidden = "True";

			container Criteria
			{
			}

			container impl : isHidden = "True"
			{
				attribute<nrAsl>                                nrWon                    (..) := const(1,..,nrAsl);

				attribute<Classifications/BouwjaarUtilBestaand> BouwjaarUtilBestaand_rel (..) := BAG/vbo_utiliteit_studiegebied/BouwjaarUtilBestaand_rel;
				attribute<string>                               BouwJaarExcel            (..) := Classifications/BouwjaarUtilBestaand/excel_code[BouwjaarUtilBestaand_rel];

				attribute<BebouwingsTypeDomein>                 BebouwingsType           (..) :=  BAG/vbo_utiliteit_studiegebied/gebruiksdoel;
			}
		}

		container Util_Nieuwbouw_Inbreiding :=
			for_each_nedv(
				RuimtelijkeData/Nieuwbouw/ZU/HasMutations ? RuimtelijkeData/Nieuwbouw/ZU/name : ''
				,	RuimtelijkeData/Nieuwbouw/ZU/ZichtJaar_jaar > 2010w && strlen(RuimtelijkeData/Nieuwbouw/ZU/wlo_filename_Nieuwbouw) > 0 
				?	'int32(sum( '
						'BestaandeUtil/Oppervlakte_i * ' +
						'float64(BestaandeUtil/BebouwingsTypeDomein/UtilTypeNieuwbouw_rel[BestaandeUtil/BebouwingsType] == '+string(RuimtelijkeData/Nieuwbouw/ZU/nr_2)+'[uint8])'
					+	', BestaandeUtil/point[rdc_grids/m100]'
					')'
					'*max_elem(float64(RuimtelijkeData/Nieuwbouw/InbreidingUtilFactor/'+RuimtelijkeData/Nieuwbouw/ZU/name+') - 1.0 , 0.0)'
					')'
				:	'const(0i, Geography/rdc_grids/m100)'
				,	Geography/rdc_grids/m100, int32
			);

		container Util_Nieuwbouw_Nieuwbouw :=
			for_each_nedv(
				RuimtelijkeData/Nieuwbouw/ZU/HasMutations ? RuimtelijkeData/Nieuwbouw/ZU/name : ''
				,	RuimtelijkeData/Nieuwbouw/ZU/ZichtJaar_jaar > 2010w && strlen(RuimtelijkeData/Nieuwbouw/ZU/wlo_filename_Nieuwbouw) > 0 
					?	'int32(RuimtelijkeData/Nieuwbouw/UtilOppervlak/'+RuimtelijkeData/Nieuwbouw/ZU/name +')'
						''
					:	'const(0i, Geography/rdc_grids/m100)'
				,	Geography/rdc_grids/m100, int32
			);

		container NieuwbouwUtil :=
			for_each_nedv(
				RuimtelijkeData/Nieuwbouw/ZU/HasMutations ? RuimtelijkeData/Nieuwbouw/ZU/name : ''
				,	'Util_Nieuwbouw_Nieuwbouw/'+RuimtelijkeData/Nieuwbouw/ZU/name + ' + Util_Nieuwbouw_Inbreiding/'+RuimtelijkeData/Nieuwbouw/ZU/name
				,	Geography/rdc_grids/m100, int32
			);

		unit<uint32> BestaandeGlTb := RuimtelijkeData/Glastuinbouw/bestaand_studiegebied
		, url = "%sourceDataProjDir%/vraag/glastuinbouw/Werkwijze_aanmaak_huidige_glastuinbouw_tbv_Vesta33.pdf"
		{
			unit<uint8> BebouwingsTypeDomein := Classifications/GLTB;
			unit<uint8> ModelObjectKeyDomein := combine_uint8(Classifications/GLTB, Classifications/BouwJaar);

			attribute<string>               code               := string(id(.));

			attribute<Studiegebied/buurt>   buurt_rel          :=  RuimtelijkeData/Glastuinbouw/bestaand_studiegebied/buurt_rel;


			attribute<nrAsl>                nrAansluitingen_i  := const(1[nrAsl   ], .);
			attribute<m2>                   Oppervlakte_i      := Opp_M2;

			// foreign key to model data
			attribute<BebouwingsTypeDomein> BebouwingsType     := GLTB_Code;
			attribute<ModelObjectKeyDomein> ModelObjectKey     := combine_data(ModelObjectKeyDomein, GLTB_Code, Classifications/BouwJaar/V/Onbekend);

			attribute<uint32>               strpos_space       := strpos(TYPE_GLTB, ' ');
			attribute<uint32>               strlen_TYPE_GLTB   := strlen(TYPE_GLTB);
			attribute<string>               Groep              := substr(TYPE_GLTB,0,strpos_space);
			attribute<string>               Type               := replace(substr(TYPE_GLTB,strpos_space+1,strlen_TYPE_GLTB - strpos_space)," ","_");

			attribute<Groep_BestaandeGlTb>  Groep_rel          := rlookup(Groep, Groep_BestaandeGlTb/Values);
			attribute<Type_BestaandeGlTb>   Type_rel           := rlookup(Type, Type_BestaandeGlTb/Values);

			container Criteria
			{
			//	attribute<bool>     KanBesparen := const(false, BebouwingsObject); // Vul  hier iets anders in als je in RuimtelijkeVraagMetBesparing wel besparingen voor glastuinbouw wilt
			}

			unit<uint32> Groep_BestaandeGlTb := unique(Groep)
			{
				attribute<string> Values;
				attribute<string> label  := Values;
				attribute<uint32> aantal := pcount(Groep_rel);
			}

			unit<uint32> Type_BestaandeGlTb := unique(Type)
			{
				attribute<string> Values;
				attribute<string> label  := Values;
				attribute<uint32> aantal := pcount(Type_rel);
			}

			container GlTbTabel_Groep_Type := for_each_nedv(
				  Type_BestaandeGlTb/Values
				, 'sum(Type_rel == ' + string(id(Type_BestaandeGlTb)) + '[Type_BestaandeGlTb] ?  Opp_M2 : 0[m2]  ,Groep_rel)'
				, Groep_BestaandeGlTb
				, m2
			)
			{
				attribute<string> label (Groep_BestaandeGlTb) := Groep_BestaandeGlTb/label;
			}
		}
		container Nieuwbouw := =SpecifiekeInstellingen/NieuwbouwInputTemplate + '()';
	}
}
