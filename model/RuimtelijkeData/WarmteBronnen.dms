//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2020 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//       Deze DMS-file wordt aangeroepen door stam.dms                                  //
//       In deze configuratiefile wordt de brondata voor de Warmtebronnen geconfigureerd//
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container WarmteBronnen
{
	container MetaData := Kengetallen/WarmteBronnen/MetaData;

	container RestWarmte: Descr = "zie FO $3.3", FreeData = "False"
	{
		parameter<string> status := 
			#linkset/bron_studiegebied_uit_in == 0 && #linkset/herkomstbuurt_studiegebied_uit_in  == 0 
				? 'Ok'
				: string(#linkset/bron_studiegebied_uit_in) + ' : bronnen studiegebied in/uit, ' + string(#linkset/herkomstbuurt_studiegebied_uit_in) + ' : herkomstbuurten studiegebied in/uit';

		// inlezen bestand voor bekende puntbronnen geschikt voor warmtelevering
		unit<uint32> data
		:	StorageName     = "%SourceDataProjDir%/aanbod/puntbronnen/20200311_puntbronnen_MT.csv"
		,	StorageType     = "gdal.vect"
		,	DialogType      = "Map"
		,	DialogData      = "point"
		,	StorageReadOnly = "True"
		{
			attribute<string>    nr;
			attribute<float64>   rd_X  := float64(X);
			attribute<float64>   rd_Y  := float64(Y);
			attribute<rdc_meter> point := point(rd_Y, rd_X, rdc_meter);

			attribute<MetaData/TypeInfo>     TypeInfo_rel     := makedefined(rlookup(Type_bron, MetaData/TypeInfo/Type), 5[metadata/Typeinfo]);
			attribute<MetaData/TypeInfoList> TypeInfoList_rel := MetaData/TypeInfo/TypeInfoList_rel[TypeInfo_rel];

			//status == "Optie A"     warmtebron is gepland, zal uiterlijk vanaf 2030 beschikbaar zijn
			//status == "Optie B"     warmtebron bestaat en blijft in ieder geval tot 2030 beschikbaar
			//status == "Optie C"     warmtebron bestaat maar zal in 2030 niet meer beschikbaar zijn	

			attribute<yr_uint16> ingebruik  := (status == "Optie A") ? 2029[yr_uint16] : 1999[yr_uint16];
			attribute<yr_uint16> uitgebruik := (status == "Optie C") ? 2019[yr_uint16] : 2100[yr_uint16];

			attribute<Celsius> T_bron    := makedefined(Brontemperatuur[Celsius], MetaData/TypeInfo/Temp_default[TypeInfo_rel]);

			attribute<MW>      MWth_min  := value(MetaData/TypeInfo/MWth_min[TypeInfo_rel], MW);
			attribute<MW>      MWth_max  := makedefined(MWcapaciteit[MW], MetaData/TypeInfo/MWth_default[TypeInfo_rel]);
			attribute<Eur_kW>  Ki_kW_min := makedefined(Uitkoppel_min[Eur_kw] , value(MetaData/TypeInfo/Ki_kW_min[TypeInfo_rel], Eur / kW));
			attribute<Eur_kW>  Ki_kW_max := makedefined(Uitkoppel_max[Eur_kw] , value(MetaData/TypeInfo/Ki_kW_max[TypeInfo_rel], Eur / kW));
			attribute<ratio>   P_vol     := makedefined(volfactor[ratio], MetaData/TypeInfo/Pvol_default[TypeInfo_rel]);
			attribute<ratio>   P_cap     := makedefined(capfactor[ratio], MetaData/TypeInfo/Pcap_default[TypeInfo_rel]);

			attribute<_yr>  Rj_Onderhoud := value(MetaData/TypeInfo/JaarKosten[ TypeInfo_rel ], _yr);

			container K_GJ  := for_each_nedv(classifications/Rekenstap/name, 'makedefined(Productiekosten[Eur_GJ] , MetaData/TypeInfo/K_GJ/'+classifications/Rekenstap/name+'[TypeInfo_rel])', ., Eur_GJ);
			container Km_GJ := for_each_nedv(classifications/Rekenstap/name, 'makedefined(Productiekosten[Eur_GJ] , MetaData/TypeInfo/Km_GJ/'+classifications/Rekenstap/name+'[TypeInfo_rel])', ., Eur_GJ);

			attribute<kg_GJ>   CO2_2010  := value(MetaData/TypeInfo/CO2_2010[TypeInfo_rel],kg_GJ);
			attribute<kg_GJ>   CO2_2020  := value(MetaData/TypeInfo/CO2_2020[TypeInfo_rel],kg_GJ);
			attribute<kg_GJ>   CO2_2030  := value(MetaData/TypeInfo/CO2_2030[TypeInfo_rel],kg_GJ);
			attribute<kg_GJ>   CO2_2040  := value(MetaData/TypeInfo/CO2_2040[TypeInfo_rel],kg_GJ);
			attribute<kg_GJ>   CO2_2050  := value(MetaData/TypeInfo/CO2_2050[TypeInfo_rel],kg_GJ);
			attribute< g_GJ>   NOx_2010  := value(MetaData/TypeInfo/NOx_2010[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   NOx_2020  := value(MetaData/TypeInfo/NOx_2020[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   NOx_2030  := value(MetaData/TypeInfo/NOx_2030[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   NOx_2040  := value(MetaData/TypeInfo/NOx_2040[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   NOx_2050  := value(MetaData/TypeInfo/NOx_2050[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   SO2_2010  := value(MetaData/TypeInfo/SO2_2010[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   SO2_2020  := value(MetaData/TypeInfo/SO2_2020[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   SO2_2030  := value(MetaData/TypeInfo/SO2_2030[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   SO2_2040  := value(MetaData/TypeInfo/SO2_2040[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   SO2_2050  := value(MetaData/TypeInfo/SO2_2050[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   VOS_2010  := value(MetaData/TypeInfo/VOS_2010[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   VOS_2020  := value(MetaData/TypeInfo/VOS_2020[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   VOS_2030  := value(MetaData/TypeInfo/VOS_2030[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   VOS_2040  := value(MetaData/TypeInfo/VOS_2040[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   VOS_2050  := value(MetaData/TypeInfo/VOS_2050[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   TS_2010   := value(MetaData/TypeInfo/TS_2010 [TypeInfo_rel],g_GJ );
			attribute< g_GJ>   TS_2020   := value(MetaData/TypeInfo/TS_2020 [TypeInfo_rel],g_GJ );
			attribute< g_GJ>   TS_2030   := value(MetaData/TypeInfo/TS_2030 [TypeInfo_rel],g_GJ );
			attribute< g_GJ>   TS_2040   := value(MetaData/TypeInfo/TS_2040 [TypeInfo_rel],g_GJ );
			attribute< g_GJ>   TS_2050   := value(MetaData/TypeInfo/TS_2050 [TypeInfo_rel],g_GJ );

			attribute<string>  label           := nr                             , DialogType = "labelText";
			attribute<float64> SymbolWorldSize := sqrt(MWth_max * 100000[1 / MW]), DialogType = "SymbolWorldSize";
			parameter<int16>   SymbolIndex     := 44s                            , DialogType = "SymbolIndex";

			attribute<Geography/RegioIndelingen/gemeente> gem_rel_P      := point_in_polygon(point, Geography/RegioIndelingen/gemeente/Geometry);
			attribute<Geography/RegioIndelingen/gemeente> target_gem_rel := MakeDefined(rlookup(targetGMC,Geography/RegioIndelingen/gemeente/GM_CODE),gem_rel_P);

			attribute<bool> inStudieGebied := Invoer/RuimtelijkeData/StudieGebied/selected_per_gemeente[target_gem_rel];
		}

		template BronSelectie: IsHidden = "True"
		{
			// begin case parameters
			parameter<string> RekenstapName;
			// end case parameters

			parameter<classifications/Rekenstap> Rekenstap_rel := rlookup(RekenstapName, classifications/Rekenstap/name);
			parameter<units/yr_uint16>           Jaar          := classifications/Rekenstap/jaar[Rekenstap_rel];
			parameter<classifications/Rekenstap> PrevRekenstap_rel := sub_or_null(Rekenstap_rel,1[uint8]);
			parameter<units/yr_uint16>           ZichtJaar     := Classifications/ZichtJaar/Jaar[classify(Jaar, Classifications/ZichtJaar/Jaar)];

			unit<uint32> WarmteBronnen := data;

			unit<uint32> BronElementen := select_with_org_rel(
					Invoer/RuimtelijkeData/StudieGebied/selected_per_gemeente[WarmteBronnen/target_gem_rel]                    // ruimtelijke selectie
					&& WarmteBronnen/ingebruik <= Jaar && (WarmteBronnen/uitgebruik == 0w || WarmteBronnen/uitgebruik > Jaar) // tijdselectie
					&& WarmteBronnen/T_bron >= 70[celsius] //temperatuurselectie
					&& WarmteBronnen/MWth_max > 0[mw] // capaciteitselectie
				) 
				, DialogType = "Map"
				, DialogData = "point"
			{
				attribute<units/yr_uint16>       ingebruik        := WarmteBronnen/ingebruik[org_rel];
				attribute<string>                bron_naam        := WarmteBronnen/bron_naam[org_rel], DialogType = "labelText";
				attribute<string>                label            := WarmteBronnen/label[org_rel], DialogType = "labelText";
				attribute<MetaData/TypeInfoList> TypeInfoList_rel := WarmteBronnen/TypeInfoList_rel[org_rel];
				attribute<rdc_meter>             point            := WarmteBronnen/point[org_rel];

				attribute<ratio>                 P_vol            := WarmteBronnen/P_vol[org_rel];
				attribute<ratio>                 P_cap            := WarmteBronnen/P_cap[org_rel];
				attribute<MW>                    MWTh_min         := WarmteBronnen/MWth_min[org_rel];
				attribute<Eur_kW>                Ki_kW_min        := WarmteBronnen/Ki_kW_min[org_rel];
				attribute<Eur_kW>                Ki_kW_max        := WarmteBronnen/Ki_kW_max[org_rel];
				attribute<_yr>                   Rj_Onderhoud     := WarmteBronnen/Rj_Onderhoud[org_rel];
				attribute<MW>                    MWth_max         := WarmteBronnen/MWth_max[org_rel];
				attribute<Eur_GJ>                K_GJ             := = 'WarmteBronnen/K_GJ/' +RekenstapName+'[org_rel]';
				attribute<Eur_GJ>                Km_GJ            := = 'WarmteBronnen/Km_GJ/'+RekenstapName+'[org_rel]';
				attribute<kg_GJ>                 CO2_GJ           := ='WarmteBronnen/CO2_'+string(ZichtJaar)+'[org_rel]';
				attribute<G_GJ>                  NOx_GJ           := ='WarmteBronnen/NOx_'+string(ZichtJaar)+'[org_rel]';
				attribute<G_GJ>                  SO2_GJ           := ='WarmteBronnen/SO2_'+string(ZichtJaar)+'[org_rel]';
				attribute<G_GJ>                  VOS_GJ           := ='WarmteBronnen/VOS_'+string(ZichtJaar)+'[org_rel]';
				attribute<G_GJ>                  TS_GJ            := ='WarmteBronnen/TS_' +string(ZichtJaar)+'[org_rel]';
			}

			unit<uint32> Bronnen := unique(BronElementen/point)
			,	DialogType = "Map"
			,	DialogData = "point"
			{
				attribute<string>                label                             := AsItemList(BronElementen/label, per_BronElementen), DialogType = "labelText";

				attribute<.>                     per_BronElementen (BronElementen) := rlookup(BronElementen/point, Values);
				attribute<MetaData/TypeInfoList> TypeInfoList_rel                  := modus_weighted(BronElementen/TypeInfoList_rel, BronElementen/MWth_max, per_BronElementen);

				attribute<rdc_meter>             point        := Values;
				attribute<ratio>                 P_vol        := sum(BronElementen/P_vol        * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<ratio>                 P_cap        := sum(BronElementen/P_cap        * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<Eur_kW>                Ki_kW_min    := sum(BronElementen/Ki_kW_min    * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<Eur_kW>                Ki_kW_max    := sum(BronElementen/Ki_kW_max    * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<MW>                    MWth_max     := sum(BronElementen/MWth_max, per_BronElementen);
				attribute<MW>                    MWth_min     := sum(BronElementen/MWth_min, per_BronElementen);
				attribute<_yr>                   Rj_Onderhoud := sum(BronElementen/Rj_Onderhoud * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<Eur_GJ>                K_GJ         := sum(BronElementen/K_GJ         * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<Eur_GJ>                Km_GJ        := sum(BronElementen/Km_GJ        * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<kg_GJ >                CO2_GJ       := sum(BronElementen/CO2_GJ       * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<G_GJ >                 NOx_GJ       := sum(BronElementen/NOx_GJ       * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<G_GJ >                 SO2_GJ       := sum(BronElementen/SO2_GJ       * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<G_GJ >                 VOS_GJ       := sum(BronElementen/VOS_GJ       * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<G_GJ >                 TS_GJ        := sum(BronElementen/TS_GJ        * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<m>                     cumulDist    := const(0[m], .);
				attribute<MW>                    cumulP       := const(0[MW], .);
				attribute<Bronnen>               Bronnen_rel  := id(.);
			}
		}
		// Vooralsnog per ZichtJaar, zou ook per rekenstap kunnnen.
		container BronSelecties := for_each_ne(Classifications/Rekenstap/name, 'BronSelectie('+Quote(Classifications/Rekenstap/name)+')');

		container linkset
		{
			// TODO BAS: REMVOE %SourceDataProjDir%/infra/20200114_CBS_bestaande_warmtenetten_Leeg.csv; wordt geregeld door HasStartingArcSet, dat op false staat in Default en Leidraad.
			
			unit<uint32> src: StorageName = "%SourceDataProjDir%/infra/20200114_CBS_bestaande_warmtenetten_2019.csv" // bestand met bestaande warmtenetten
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			,	url             = "%SourceDataProjDir%/infra/20200114_update_bestaande_warmtenetten_FvdM.txt"
			{
				attribute<string> BU_code;
				attribute<string> BU_code_dk; // buurt waarvan afgetakt is (upstream)
				attribute<string> bronnaam;

				attribute<Geography/RegioIndelingen/buurt>  BU_rel    := rlookup(BU_Code,    Geography/RegioIndelingen/buurt/BU_code), IntegrityCheck = "IsDefined(BU_rel)";
				attribute<Geography/RegioIndelingen/buurt>  BU_DK_rel := rlookup(BU_Code_dk, Geography/RegioIndelingen/buurt/BU_code), IntegrityCheck = "IsDefined(BU_rel)   || BU_Code_dk == ''";

				attribute<bool> check1 := IsDefined(rlookup(bronnaam, data/bron_naam )) && BU_Code_dk == '';
				attribute<bool> check2 := bronnaam == '' && IsDefined(BU_DK_rel);
				attribute<bool> check := check1 || check2;
				
				attribute<data> bron_rel    := rlookup(bronnaam, data/bron_naam ), IntegrityCheck = "check";
				attribute<bool> BU_selected := Invoer/RuimtelijkeData/StudieGebied/selected_per_buurt[BU_rel];
				attribute<bool> DK_selected := Invoer/RuimtelijkeData/StudieGebied/selected_per_buurt[BU_DK_rel] || data/inStudieGebied[bron_rel];
			}

			unit<uint32> geometry := src
			,	DialogType = "Map"
			,	DialogData = "geometry"
			{
				attribute<rdc_meter> first_point := centroid_or_mid(rjoin(src/BU_code,  Geography/RegioIndelingen/buurt/BU_code,  Geography/RegioIndelingen/buurt/geometry));
				attribute<rdc_meter> last_point  := bronnaam <> ''
					? rjoin(src/bronnaam, data/bron_naam, data/point)
					: centroid_or_mid(rjoin(src/BU_code_dk,  Geography/RegioIndelingen/buurt/BU_code,  Geography/RegioIndelingen/buurt/geometry));

				attribute<rdc_meter> geometry  (arc) := points2sequence(pointset/point, pointset/sequence, pointset/ordinal)
				{
					parameter<uint32> PenColor := rgb(100,0,0), DialogType = "PenColor";
					parameter<int16>  PenWidth := 3s          , DialogType = "PenWidth";
				}

				unit<uint32> pointset := union_unit(.,.)
				{
					attribute<rdc_meter> point    := union_data(.,first_point,last_point);
					attribute<..>        sequence := union_data(.,id(src),id(src));
					attribute<uint32>    ordinal  := union_data(.,const(0,src),const(1,src));
				}
			}

			unit<uint32> selected := Subset(src/BU_selected), IntegrityCheck = "src/BU_selected == src/DK_selected"
			{
				attribute<string> BU_code    := src/BU_code[nr_OrgEntity];
				attribute<string> BU_code_dk := src/BU_code_dk[nr_OrgEntity];
				attribute<bool>   BU_rel_dk  := IsDefined(rlookup(BU_code_dk, Invoer/RuimtelijkeData/StudieGebied/buurt/BU_code));
				attribute<string> bronnaam   := src/bronnaam[nr_OrgEntity];      // bron waarvan direct afgetapt wordt.
			}

			unit<uint32> bron_studiegebied_uit_in := Subset((src/BU_selected <> src/DK_selected) && src/bronnaam <> '') // Deze set bekijken bij het niet voldoen aan de integrity check op linkset_selected. De set moet leeg zijn.
			{
				attribute<string> BU_code  := src/BU_code[nr_OrgEntity];
				attribute<string> gemeente := rjoin(BU_code, Geography/RegioIndelingen/buurt/BU_code, Geography/RegioIndelingen/buurt/GM_naam);

				attribute<string> herkomst_bronnaam                := src/bronnaam[nr_OrgEntity];
				attribute<string> herkomst_bron_toegekendegemeente := RegioIndelingen/Gemeente/label[RestWarmte/data/target_gem_rel[src/bron_rel[nr_OrgEntity]]];

				attribute<rdc_meter> van_point  := centroid_or_mid(rjoin(BU_code,  Geography/RegioIndelingen/buurt/BU_code,  Geography/RegioIndelingen/buurt/geometry));
				attribute<rdc_meter> naar_point := rjoin(herkomst_bronnaam, data/bron_naam, data/point);

				attribute<rdc_meter> geometry  (arc) := points2sequence(pointset/point, pointset/sequence, pointset/ordinal)
				{
					parameter<uint32> PenColor := rgb(100,0,0), DialogType = "PenColor";
					parameter<int16>  PenWidth := 3s          , DialogType = "PenWidth";
				}

				unit<uint32> pointset := union_unit(.,.)
				{
					attribute<rdc_meter> point    := union_data(.,van_point, naar_point);
					attribute<..>        sequence := union_data(.,id(..),id(..));
					attribute<uint32>    ordinal  := union_data(.,const(0,..),const(1,..));
				}
			}
			unit<uint32> herkomstbuurt_studiegebied_uit_in := Subset((src/BU_selected <> src/DK_selected) && src/BU_code_dk <> '') // Deze set bekijken bij het niet voldoen aan de integrity check op linkset_selected. De set moet leeg zijn.
			{
				attribute<string> BU_code  := src/BU_code[nr_OrgEntity];
				attribute<string> gemeente := rjoin(BU_code, Geography/RegioIndelingen/buurt/BU_code, Geography/RegioIndelingen/buurt/GM_naam);

				attribute<string> herkomst_BU_code  := src/BU_code_dk[nr_OrgEntity];
				attribute<string> herkomst_gemeente := rjoin(herkomst_BU_code, Geography/RegioIndelingen/buurt/BU_code, Geography/RegioIndelingen/buurt/GM_naam);

				attribute<rdc_meter> van_point  := centroid_or_mid(rjoin(BU_code,  Geography/RegioIndelingen/buurt/BU_code,  Geography/RegioIndelingen/buurt/geometry));
				attribute<rdc_meter> naar_point := centroid_or_mid(rjoin(herkomst_BU_code,  Geography/RegioIndelingen/buurt/BU_code,  Geography/RegioIndelingen/buurt/geometry));

				attribute<rdc_meter> geometry  (arc) := points2sequence(pointset/point, pointset/sequence, pointset/ordinal)
				{
					parameter<uint32> PenColor := rgb(100,0,0), DialogType = "PenColor";
					parameter<int16>  PenWidth := 3s          , DialogType = "PenWidth";
				}

				unit<uint32> pointset := union_unit(.,.)
				{
					attribute<rdc_meter> point    := union_data(.,van_point, naar_point);
					attribute<..>        sequence := union_data(.,id(..),id(..));
					attribute<uint32>    ordinal  := union_data(.,const(0,..),const(1,..));
				}
			}
		}
	}

	container GeoThermie: Descr = "zie FO $3.4"
	{
		container import
		{
			unit<uint32> ContourSet:
				StorageName      = "%sourceDataProjDir%/aanbod/GeoThermie/technisch_pot_aardwarmte_ThermoGIS21_maart_2019_EBN.dbf",
				StorageReadOnly = "True",
				url             = "%sourceDataProjDir%/aanbod/GeoThermie/technisch_pot_aardwarmte_ThermoGIS21_maart_2019_EBN.txt",
				DialogType      = "Map",
				DialogData      = "geometry"
			{
				attribute<rdc_meter> geometry (poly): StorageName = "%sourceDataProjDir%/aanbod/GeoThermie/technisch_pot_aardwarmte_ThermoGIS21_maart_2019_EBN.shp", StorageReadOnly = "True";
				attribute<int32>     id;
				attribute<int32>     GRIDCODE;
			}
		}

		unit<uint32> ContourSet := subset(import/ContourSet/GRIDCODE >= 2i), FreeData = "False"
		{
			attribute<rdc_meter>  geometry (poly)                     := import/ContourSet/geometry[nr_OrgEntity];
			attribute<ContourSet> Grid     (Geography/rdc_grids/m100) := poly2grid(geometry, Geography/rdc_grids/m100), FreeData = "True";

			unit<uint32> pointSet := subset(IsDefined(Grid)), FreeData = "False"
			{
				attribute<rdc_meter> point := rdc_grids/m100/point[nr_OrgEntity];
			}
		}
	}
	container WKO: Descr = "zie FO $3.4"
	{
		unit<uint32> ContourSet:
			StorageName     = "%sourceDataProjDir%/Aanbod/WKO/20180802_WKO_potentiecontour.dbf",
			StorageReadOnly = "True",
			url             = "%sourceDataProjDir%/Aanbod/WKO/20180802_metadata_wko_contour.txt",
			DialogType      = "Map",
			DialogData      = "geometry"
		{
			attribute<rdc_meter> geometry(poly) : StorageName = "%sourceDataProjDir%/Aanbod/WKO/20180802_WKO_potentiecontour.shp", StorageReadOnly = "True";
			attribute<string>    WKO;
			attribute<bool>      Geschikt := WKO == 'geschikt' || WKO == 'zeer geschikt';
		}

		unit<uint32> GeschikteContour := subset(ContourSet/Geschikt), FreeData = "False"
		{
			container impl : FreeData = "True", IsHidden = "True"
			{
				attribute<rdc_meter> geometry  (poly, GeschikteContour) := ContourSet/geometry[nr_OrgEntity];
			}
			attribute<ContourSet> Grid (Geography/rdc_grids/m100) := poly2grid(impl/geometry, Geography/rdc_grids/m100), FreeData = "False";
		}
	}
	container TEO: Descr = "zie FO $3.4"
	{
		unit<uint32> ContourSet:
			StorageName     = "%sourceDataProjDir%/Aanbod/WKO/20200211_TEO_potentiecontour.dbf",
			StorageReadOnly = "True",
			url             = "%sourceDataProjDir%/Aanbod/WKO/20200211_TEO_potentiecontour.pdf",
			DialogType      = "Map",
			DialogData      = "geometry"
		{
			attribute<rdc_meter> geometry(poly) : StorageName = "%sourceDataProjDir%/Aanbod/WKO/20200211_TEO_potentiecontour.shp", StorageReadOnly = "True";
			attribute<uint32>    hulp;
			attribute<bool>      Geschikt := const(true, .);
		}
		unit<uint32> GeschikteContour := subset(ContourSet/Geschikt), FreeData = "False"
		{
			container impl : FreeData = "True", IsHidden = "True"
			{
				attribute<rdc_meter> geometry  (poly, GeschikteContour) := ContourSet/geometry[nr_OrgEntity];
			}
			attribute<ContourSet> Grid (Geography/rdc_grids/m100) := poly2grid(impl/geometry, Geography/rdc_grids/m100), FreeData = "False";
			unit<uint32> pointSet := subset(IsDefined(Grid)), FreeData = "False"
			{
				attribute<rdc_meter> point := rdc_grids/m100/point[nr_OrgEntity];
			}
		}
	}
	
	container LtWarmte: Source = "SN82_Functioneel ontwerp LT-warmtenetten_CPT_2018-10-3.docx"
	{
		unit<uint32> Categorie: nrofrows = 15 // source is 5N82 Functioneel Ontwerp LT-warmtenetten_CPT_2018-10-3.docx Tabel 16
		{
			attribute<string> code : [
				'Supermarkt'
			,	'RWZI'
			,	'KoelVries'
			,	'Bakkerij'
			,	'Wasserij'
			,	'Dienstverlening_Informatie'
			,	'Voedingsmiddelen_dranken_tabak'
			,	'Slachthuis'
			,	'Datacenter'
			,	'IJsbaan'
			,	'GemaalKoude'
			,	'GemaalWarmte'
			,	'Zwembad'
			,	'Glastuinbouw'
			,	'WKO'
			];
			
			attribute<string> label : [
				'Supermarkt'
			,	'RWZI'
			,	'KoelVries'
			,	'Bakkerij'
			,	'Wasserij'
			,	'Dienstverlening_Informatie'
			,	'Voedingsmiddelen_dranken_tabak'
			,	'Slachthuis'
			,	'Datacenter'
			,	'IJsbaan'
			,	'GemaalKoude'
			,	'GemaalWarmte'
			,	'Zwembad'
			,	'Glastuinbouw'
			,	'WKO'
			];
			attribute<bool> levert_koude := const(false, .);
			attribute<bool> vraagt_koude_koude :
			[
				true, false, true, false, false, false, true, true, true, true, true, false, false, false, false
			];
			attribute<MW>      MWth_max  : [0, 11, 2, 0, 2, 5, 24, 3, 13, 0, 0, 0, 0, 0, 0]            , Descr = "Maximale capaciteit waarvoor de bron kan worden ingezet";
			attribute<percent> bron_vol  := const(70[percent], .)                                      , Descr = "Aandeel op secundair netvolume dat de bron voor rekening kan nemen";
			attribute<percent> bron_cap  := const(30[percent], .)                                      , Descr = "Aandeel op secundaire netcapaciteit dat de bron voor rekening kan nemen";
			attribute<Celsius> T_Bron    : [30, 30, 30, 30, 30, 50, 30, 30, 30, 30, 30, 30, 30, 30, 15], Descr = "Temperatuur welke de bron maximaal kan leveren zonder hulpvoorziening";
			attribute<Eur_kW>  Ki_KW_min := const(50	[Eur_kW], .)                                   , Descr = "";
			attribute<Eur_kW>  Ki_KW_max := const(250[Eur_kW], .)                                      , Descr = "";
			attribute<Eur_GJ>  K_GJ      := const(0[Eur_GJ], .)                                        , Descr = "";
			attribute<Eur_GJ>  E_GJ      := const(0[Eur_GJ], .)                                        , Descr = "";
		}
		
		unit<uint32> data
		:	StorageName     = "%SourceDataProjDir%/aanbod/puntbronnen/20200311_Puntbronnen_LT.csv"
		,	StorageType     = "gdal.vect"
		,	DialogType      = "Map"
		,	DialogData      = "point"
		,	StorageReadOnly = "True"
		{
			attribute<float64>   rd_X  := float64(X);
			attribute<float64>   rd_Y  := float64(Y);
			attribute<rdc_meter> point := point(rd_Y, rd_X, rdc_meter);

			attribute<Categorie> Categorie_rel := rlookup(Type_bron, Categorie/code);
			attribute<metadata/Typeinfo> Typeinfo_rel := const( 6[metadata/Typeinfo], .);

			//status == "Optie A"     warmtebron is gepland, zal uiterlijk vanaf 2030 beschikbaar zijn
			//status == "Optie B"     warmtebron bestaat en blijft in ieder geval tot 2030 beschikbaar
			//status == "Optie C"     warmtebron bestaat maar zal in 2030 niet meer beschikbaar zijn	

			attribute<yr_uint16> ingebruik   := (status == "Optie A") ? 2029[yr_uint16] : 1999[yr_uint16];
			attribute<yr_uint16> uitgebruik  := (status == "Optie C") ? 2019[yr_uint16] : 2100[yr_uint16];
			attribute<Celsius>   T_bron      := MakeDefined(makedefined(Brontemperatuur[Celsius], Categorie/T_bron[Categorie_rel]), metadata/TypeInfo/temp_default[Typeinfo_rel]);

			attribute<MW>        MWth_max    := MakeDefined(makedefined(MWcapaciteit[MW], Categorie/MWth_max[Categorie_rel]), metadata/TypeInfo/MWth_default[Typeinfo_rel]);
			attribute<Eur_kW>    Ki_kW_min   := MakeDefined(makedefined(Uitkoppel_min[Eur_kw] , value(Categorie/Ki_kW_min[Categorie_rel], Eur / kW)), metadata/TypeInfo/Ki_kW_min[Typeinfo_rel]);
			attribute<Eur_kW>    Ki_kW_max   := MakeDefined(makedefined(Uitkoppel_max[Eur_kw] , value(Categorie/Ki_kW_max[Categorie_rel], Eur / kW)), metadata/TypeInfo/Ki_kW_max[Typeinfo_rel]);
			attribute<Eur_GJ>    K_GJ        := MakeDefined(makedefined(Productiekosten[Eur_GJ] , value(Categorie/K_GJ[Categorie_rel], Eur / GJ)), metadata/TypeInfo/K_GJ/StartJaar[Typeinfo_rel]);

			attribute<ratio>     P_vol       := MakeDefined(makedefined(volfactor[percent] / 100[percent], Categorie/bron_vol[Categorie_rel] / 100[percent]), metadata/TypeInfo/Pvol_default[Typeinfo_rel]);
			attribute<ratio>     P_cap       := MakeDefined(makedefined(capfactor[percent] / 100[percent], Categorie/bron_cap[Categorie_rel] / 100[percent]), metadata/TypeInfo/Pcap_default[Typeinfo_rel]);

			attribute<string>    label           := nr, DialogType = "labelText";
			attribute<float64>   SymbolWorldSize := sqrt(MWth_max * 100000[1 / MW]), DialogType = "SymbolWorldSize";
			parameter<int16>     SymbolIndex     := 44s, DialogType = "SymbolIndex";
		}

// 		unit<uint32> LTbronnen_capaciteit
// 		:	StorageName     = "%sourceDataProjDir%/aanbod/puntbronnen/20190612_LT_puntbronnen.shp"
// 		,	StorageType     = "gdal.vect"
// 		,	StorageReadOnly = "True"
// 		,	DialogType      = "Map"
// 		,	DialogData      = "Geometry"
// 		,	Source          = "CE-Delft"
// 		{
// 			attribute<rdc_meter>	Geometry;
// 			attribute<rdc_meter>	point := Geometry;
// 			
// 			attribute<string> Type_bron;			
// 			attribute<unique_categorie> unique_categorie_rel := rlookup(type_bron, unique_categorie/values);
// 			attribute<../categorie> categorie_rel := unique_categorie/categorie_rel[unique_categorie_rel];

// 			attribute<string>	bron_naam;
// 			attribute<string>	label := bron_naam;
// 			attribute<string>	volfactor;
// 			attribute<string>	capfactor;
// 			attribute<string>	tempniv; 
// 			attribute<string>	uitk_min_e;
// 			attribute<string>	uitk_max_e;
// 			attribute<string>	wp_euro_gj;
// 			attribute<string>	MWth_max;
// 			
// 			attribute<Celsius>	T_bron			:= float64(tempniv)[Celsius]; 
// 			attribute<Eur_kW>	Ki_KW_min		:= float64(uitk_min_e)[Eur_kW];
// 			attribute<Eur_kW>	Ki_KW_max		:= float64(uitk_max_e)[Eur_kW];
// 			attribute<Eur_GJ>	K_GJ			:= float64(wp_euro_gj)[Eur_GJ];
// 			attribute<percent>	bron_vol	 	:= float64(volfactor)[percent];
// 			attribute<percent>	bron_cap 		:= float64(capfactor)[percent];
// 			attribute<MW>		MWth_max_f 		:= float64(MWth_max)[MW];
// 		}
		
// 		unit<uint32> unique_categorie := unique(data/categorie_rel)
// 		{
// 			attribute<categorie> categorie_rel := rlookup(values, categorie/code);
// 		}
		unit<uint32> bron := data 
		,	DialogType = "Map"
		,	DialogData = "point"
		{
			attribute<rdc_meter> point         := data/point;
			attribute<string>    label         := data/label;
			attribute<yr_uint16> ingebruik     := data/ingebruik;
			attribute<yr_uint16> uitgebruik    := data/ingebruik;
			attribute<categorie> Categorie_rel := data/Categorie_rel;

			//invoerwaardes
// 			attribute<MW>			MWth_max_spec	:=	LTbronnen_capaciteit/MWth_max_f;
// 			attribute<percent>		Bron_vol_spec	:=	LTbronnen_capaciteit/bron_vol;
// 			attribute<percent>		Bron_cap_spec	:=	LTbronnen_capaciteit/bron_cap;
// 			attribute<Celsius>		T_bron_spec		:=	LTbronnen_capaciteit/T_bron;

// 			attribute<Eur_kW>		Ki_kW_min_spec	:=	LTbronnen_capaciteit/Ki_kW_min;
// 			attribute<Eur_kW>		Ki_kW_max_spec	:=	LTbronnen_capaciteit/Ki_kW_max;
// 			attribute<Eur_GJ>		K_GJ_spec		:=	LTbronnen_capaciteit/K_GJ;

			//aangevulde waardes met kentallen wanneer geen invoerwaarde is opgegeven
			attribute<MW>      MWth_max := data/MWth_max;
			attribute<ratio>   Bron_vol := data/P_vol;
			attribute<ratio>   Bron_cap := data/P_cap;
			attribute<Celsius> T_bron   := data/T_bron;
			attribute<kW>      P_ow_max := MWth_max * 1000[kW / MW];

			attribute<Eur_kW> Ki_kW_min := data/Ki_KW_min;
			attribute<Eur_kW> Ki_kW_max := data/Ki_KW_max;
			attribute<Eur_GJ> K_GJ      := data/K_GJ;
		}
	}

	container Gas: Descr = "Gasleidingennet beheersgebied Stedin"
	{
		unit<uint32> Leiding:
			StorageName      = "%sourceDataProjDir%/Aanbod/Gas/ModelLeidingen20190517.dbf",
			StorageReadOnly = "True",
			DialogType      = "Map",
			DialogData      = "Leidingen",
			url             = "%sourceDataProjDir%/Aanbod/Gas/ModelLeidingen20190517.mht",//https://www.stedin.net/zakelijk/open-data/gasvervangingsdata#
			SyncMode        = "All"
			{
				attribute<rdc_meter>                   Leidingen (arc): StorageName = "%sourceDataProjDir%/Aanbod/Gas/ModelLeidingen20190517.shp";
				attribute<string>                      Categorie;
				attribute<Classifications/CategorieKl> Categorie_rel := rlookup(Categorie, Classifications/CategorieKl/label);
			}
	}
}

// 		unit<uint32> bron
// 		:	StorageName     = "%sourceDataProjDir%/aanbod/puntbronnen/20190802_MT_puntbronnen.dbf"
// 		,	StorageReadOnly = "True"
// 		,	DialogType      = "Map"
// 		,	DialogData      = "P"
// 		,	Source          = "%sourceDataProjDir%/aanbod/puntbronnen/20180724_metadata_puntbronnen.txt"
// 		{
// 			attribute<rdc_meter> P: StorageName = "%sourceDataProjDir%/aanbod/puntbronnen/20190802_MT_puntbronnen.shp", StorageReadOnly = "True";
// 			attribute<string>    bron_naam;

// 			attribute<string>                Type := makedefined(Type_bron , 'Onbekend');
// 			attribute<MetaData/TypeInfo>     TypeInfo_rel     := rlookup(Type_bron, MetaData/TypeInfo/Type);
// 			attribute<MetaData/TypeInfoList> TypeInfoList_rel := MetaData/TypeInfo/TypeInfoList_rel[TypeInfo_rel];

// 			attribute<string> status;
// 			attribute<yr_uint16> ingebruik	:=	((status == "Optie B") || (status == "Optie C")) ? 1999[yr_uint16] : 2029[yr_uint16];
// 			attribute<yr_uint16> uitgebruik	:=	(status == "Optie C") ? 2019[yr_uint16] : 0w;

// 			attribute<MW>      MWth_max;
// 			
// 			attribute<MW>      MWth_min  := value(MetaData/TypeInfo/MWth_min[TypeInfo_rel],MW);
// 			attribute<Eur_kW>  Ki_kW_min := value(MetaData/TypeInfo/Ki_kW_min[TypeInfo_rel], Eur / kW);
// 			attribute<Eur_kW>  Ki_kW_max := value(MetaData/TypeInfo/Ki_kW_max[TypeInfo_rel], Eur / kW);
// 			
// 			attribute<_yr>  Rj_Onderhoud := value(MetaData/TypeInfo/JaarKosten[ TypeInfo_rel ], _yr);
// 			attribute<Eur_GJ>  K_GJ10    :=       MetaData/TypeInfo/K_GJ10[TypeInfo_rel];
// 			attribute<Eur_GJ>  K_GJ20    :=       MetaData/TypeInfo/K_GJ20[TypeInfo_rel];
// 			attribute<Eur_GJ>  K_GJ30    :=       MetaData/TypeInfo/K_GJ30[TypeInfo_rel];
// 			attribute<Eur_GJ>  K_GJ40    :=       MetaData/TypeInfo/K_GJ40[TypeInfo_rel];
// 			attribute<Eur_GJ>  K_GJ50    :=       MetaData/TypeInfo/K_GJ50[TypeInfo_rel];
// 			attribute<Eur_GJ>  Km_GJ10   :=       MetaData/TypeInfo/Km_GJ10[TypeInfo_rel];
// 			attribute<Eur_GJ>  Km_GJ20   :=       MetaData/TypeInfo/Km_GJ20[TypeInfo_rel];
// 			attribute<Eur_GJ>  Km_GJ30   :=       MetaData/TypeInfo/Km_GJ30[TypeInfo_rel];
// 			attribute<Eur_GJ>  Km_GJ40   :=       MetaData/TypeInfo/Km_GJ40[TypeInfo_rel];
// 			attribute<Eur_GJ>  Km_GJ50   :=       MetaData/TypeInfo/Km_GJ50[TypeInfo_rel];
// 			attribute<kg_GJ>   CO2_2010  := value(MetaData/TypeInfo/CO2_2010[TypeInfo_rel],kg_GJ);
// 			attribute<kg_GJ>   CO2_2020  := value(MetaData/TypeInfo/CO2_2020[TypeInfo_rel],kg_GJ);
// 			attribute<kg_GJ>   CO2_2030  := value(MetaData/TypeInfo/CO2_2030[TypeInfo_rel],kg_GJ);
// 			attribute<kg_GJ>   CO2_2040  := value(MetaData/TypeInfo/CO2_2040[TypeInfo_rel],kg_GJ);
// 			attribute<kg_GJ>   CO2_2050  := value(MetaData/TypeInfo/CO2_2050[TypeInfo_rel],kg_GJ);
// 			attribute< g_GJ>   NOx_2010  := value(MetaData/TypeInfo/NOx_2010[TypeInfo_rel],g_GJ );
// 			attribute< g_GJ>   NOx_2020  := value(MetaData/TypeInfo/NOx_2020[TypeInfo_rel],g_GJ );
// 			attribute< g_GJ>   NOx_2030  := value(MetaData/TypeInfo/NOx_2030[TypeInfo_rel],g_GJ );
// 			attribute< g_GJ>   NOx_2040  := value(MetaData/TypeInfo/NOx_2040[TypeInfo_rel],g_GJ );
// 			attribute< g_GJ>   NOx_2050  := value(MetaData/TypeInfo/NOx_2050[TypeInfo_rel],g_GJ );
// 			attribute< g_GJ>   SO2_2010  := value(MetaData/TypeInfo/SO2_2010[TypeInfo_rel],g_GJ );
// 			attribute< g_GJ>   SO2_2020  := value(MetaData/TypeInfo/SO2_2020[TypeInfo_rel],g_GJ );
// 			attribute< g_GJ>   SO2_2030  := value(MetaData/TypeInfo/SO2_2030[TypeInfo_rel],g_GJ );
// 			attribute< g_GJ>   SO2_2040  := value(MetaData/TypeInfo/SO2_2040[TypeInfo_rel],g_GJ );
// 			attribute< g_GJ>   SO2_2050  := value(MetaData/TypeInfo/SO2_2050[TypeInfo_rel],g_GJ );
// 			attribute< g_GJ>   VOS_2010  := value(MetaData/TypeInfo/VOS_2010[TypeInfo_rel],g_GJ );
// 			attribute< g_GJ>   VOS_2020  := value(MetaData/TypeInfo/VOS_2020[TypeInfo_rel],g_GJ );
// 			attribute< g_GJ>   VOS_2030  := value(MetaData/TypeInfo/VOS_2030[TypeInfo_rel],g_GJ );
// 			attribute< g_GJ>   VOS_2040  := value(MetaData/TypeInfo/VOS_2040[TypeInfo_rel],g_GJ );
// 			attribute< g_GJ>   VOS_2050  := value(MetaData/TypeInfo/VOS_2050[TypeInfo_rel],g_GJ );
// 			attribute< g_GJ>   TS_2010   := value(MetaData/TypeInfo/TS_2010 [TypeInfo_rel],g_GJ );
// 			attribute< g_GJ>   TS_2020   := value(MetaData/TypeInfo/TS_2020 [TypeInfo_rel],g_GJ );
// 			attribute< g_GJ>   TS_2030   := value(MetaData/TypeInfo/TS_2030 [TypeInfo_rel],g_GJ );
// 			attribute< g_GJ>   TS_2040   := value(MetaData/TypeInfo/TS_2040 [TypeInfo_rel],g_GJ );
// 			attribute< g_GJ>   TS_2050   := value(MetaData/TypeInfo/TS_2050 [TypeInfo_rel],g_GJ );
// 			attribute<string>  Eigenaar;
// 			attribute<string>  Brandstof;

// 			// aspects
// 			attribute<string>  label           := bron_naam,                            DialogType = "labelText";
// 			attribute<float64> SymbolWorldSize := sqrt(MWth_max * 100000[1 / MW]), DialogType = "SymbolWorldSize";
// 			parameter<int16>   SymbolIndex     := 44s,                             DialogType = "SymbolIndex";

// 			attribute<Geography/RegioIndelingen/gemeente>  gem_rel_P      := point_in_polygon(P, Geography/RegioIndelingen/gemeente/Geometry);
// 			attribute<Geography/RegioIndelingen/gemeente>  target_gem_rel := MakeDefined(rlookup(targetGMC,Geography/RegioIndelingen/gemeente/GM_CODE),gem_rel_P);

// 			// in StudieGebied
// 			attribute<bool> inStudieGebied := Invoer/RuimtelijkeData/StudieGebied/selected_per_gemeente[target_gem_rel];
// 		}