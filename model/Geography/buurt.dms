//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2020 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//       In deze configuratiefile wordt de regio indeling buurt met eigendommen etc.    //
//       geconfigureerd                                                                 //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

unit<uint32> Buurt:
	StorageName     = "%SourceDataProjDir%/hulpbestanden/buurt/20240425_CBS_buurt_2023.dbf",
	DialogData      = "geometry",
	DialogType      = "Map",
	StorageReadOnly = "True",
	url             = "%sourceDataProjDir%/hulpbestanden/buurt/20240516_buurtgrenzen_update_WP.txt"
{
	attribute<rdc_meter> geometry (poly)
	:	label           = "De CBS buurtkaart 2023"
	,	StorageName     = "%SourceDataProjDir%/hulpbestanden/buurt/20240425_CBS_buurt_2023.shp"
	,	StorageReadOnly = "True";
	attribute<string>    BU_CODE;
	attribute<uint32>    code          := uint32(substr(BU_CODE,2,8));
	
	attribute<string> Label := BU_NAAM;

	// bepalen centroide en oppervlakte o.b.v. buurtpolygoon
	attribute<rdc_meter> point         := centroid_or_mid(geometry);
	attribute<m2>        area          := area(geometry, m2);
	attribute<km2>       AreaInKm2     := area / value(1000000, m2 / km2);
	attribute<ha>        AreaInHa      := area / value(10000, m2 / ha);

	// ruimtelijke niveau's nationaal, provincie, gemeente en wijk worden afgeleid uit de buurtkaart
	attribute<NL>           NL_rel           := const(0[NL],.);
	attribute<Provincie>    Provincie_rel    := rlookup(PROV_CODE, Provincie/Values);
	attribute<Energieregio> Energieregio_rel := rlookup(ER_NAAM, Energieregio/Values);
	attribute<Gemeente>     Gemeente_rel     := rlookup(GM_CODE, Gemeente/Values);
	attribute<Wijk>         Wijk_rel         := rlookup(WK_CODE, Wijk/Values);
	
	// jaar waar vanaf BMC in een planregio is toegestaan
	attribute<yr_uint16> BioWKK_Start  := const(2020[yr_uint16], .); 
	
	parameter<string> rjoin_per_jaar_expr_template := 
		'MakeDefined('
			+ AsList('rjoin(BU_CODE, j' + Invoer/RuimtelijkeData/CBSWijkEnBuurt/Jaar/reverse + '/src/gwb_code_10, j' + Invoer/RuimtelijkeData/CBSWijkEnBuurt/Jaar/reverse + '/src/@@@var@@@)' ,',')
		+ ')';

	// diverse kenmerken op buurtniveau, afgeleid uit de kerncijfers wijken en buurten van het CBS
	container Eigendom: Using = Invoer/RuimtelijkeData/CBSWijkEnBuurt/per_jaar
	{
		attribute<percent> p_koopw    (..) := = replace(rjoin_per_jaar_expr_template, '@@@var@@@', 'p_koopw[percent]');  // Koopwoningen
		attribute<percent> p_huurw    (..) := = replace(rjoin_per_jaar_expr_template, '@@@var@@@', 'p_huurw[percent]');  // Huurwoningen totaal
		attribute<percent> p_wcorpw   (..) := = replace(rjoin_per_jaar_expr_template, '@@@var@@@', 'p_wcorpw[percent]'); // In bezit woningcorporatie
		attribute<percent> p_ov_hw    (..) := = replace(rjoin_per_jaar_expr_template, '@@@var@@@', 'p_ov_hw[percent]');  // In bezit overige verhuurders
		attribute<percent> p_e_o_w    (..) := = replace(rjoin_per_jaar_expr_template, '@@@var@@@', 'p_e_o_w[percent]');  // Eigendom onbekend

		attribute<percent> p_checksum (..) := p_koopw + p_wcorpw + p_ov_hw + p_e_o_w;
	}

	container Inkomen : Using = Invoer/RuimtelijkeData/CBSWijkEnBuurt/per_jaar
	{
		attribute<percent> p_hh_li    (..) := = replace(rjoin_per_jaar_expr_template, '@@@var@@@', 'p_hh_li[percent]'); // lage inkomens
		attribute<percent> p_hh_hi    (..) := = replace(rjoin_per_jaar_expr_template, '@@@var@@@', 'p_hh_hi[percent]'); // hoge inkomens
		attribute<percent> p_hh_mi    (..) := 100[percent] - (p_hh_li + p_hh_hi);                                       // middeninkomens
		attribute<percent> p_checksum (..) := p_hh_li + p_hh_mi + p_hh_hi;
	}
	
	// overige kenmerken die van belang zijn voor de modelberekening
	container Overigen : Using = Invoer/RuimtelijkeData/CBSWijkEnBuurt/per_jaar 
	{
		attribute<percent> p_stadsv  (..) := = replace(rjoin_per_jaar_expr_template, '@@@var@@@', 'p_stadsv[percent]'); // aandeel huidige aansluiting stadsverwarming
		attribute<percent> p_aardgas (..) := 100[percent] - (p_stadsv);                                                 // aandeel huidige aansluiting aardgas

		attribute<ha> a_opp_ha       (..) := = replace(rjoin_per_jaar_expr_template, '@@@var@@@', 'a_opp_ha[ha]'); // totaal oppervlak buurt
		attribute<ha> a_lan_ha       (..) := = replace(rjoin_per_jaar_expr_template, '@@@var@@@', 'a_lan_ha[ha]'); // landoppervlak buurt
		attribute<ha> a_wat_ha       (..) := = replace(rjoin_per_jaar_expr_template, '@@@var@@@', 'a_wat_ha[ha]'); // wateroppervlak buurt

		//oppervlakte als aandeel
		attribute<ratio> r_land_com  (..) := MakeDefined(r_land, 0[ratio]);//null waarden liggen in zee
		attribute<ratio> r_land      (..) := 1d / a_opp_ha* a_lan_ha;
		attribute<ratio> r_water     (..) := (1d / a_opp_ha)* a_wat_ha;
		attribute<ratio> r_checksum  (..) := r_land + r_water;
	}
}

unit<uint32> Buurt2023 := Buurt;
unit<uint32> Buurt2022: 
	StorageName     = "%SourceDataProjDir%/hulpbestanden/buurt/buurten_2022_v2.dbf",
	DialogData      = "geometry",
	DialogType      = "Map",
	StorageReadOnly = "True"
{
	attribute<rdc_meter> geometry (poly)
	:	label           = "De CBS buurtkaart 2022"
	,	StorageName     = "%SourceDataProjDir%/hulpbestanden/buurt/buurten_2022_v2.shp"
	,	StorageReadOnly = "True";
	attribute<string> Label := BU_NAAM;
}

unit<uint32> Buurt2022x2023 := overlay_polygon(ipolygon(Buurt2022/geometry), ipolygon(Buurt2023/geometry)), DialogType = "Map", DialogData = "rdc_geometry"
{
	attribute<rdc_meter> rdc_geometry (poly) := dpolygon(geometry);
	attribute<Float64> AreaWeight := area(rdc_geometry, Float64);
	
	attribute<string> Label := first_rel->Label + '->' + second_rel->Label;

	attribute<Float64> AreaFractionOf_2022 := AreaWeight / sum(AreaWeight, first_rel )[first_rel ];
	attribute<Float64> AreaFractionOf_2023 := AreaWeight / sum(AreaWeight, second_rel)[second_rel];

	unit<uint32> OSM_dynapoints := Invoer/RuimtelijkeData/OSM/DynaPoints;
	attribute<.> per_dynapoint(OSM_dynapoints) := point_in_polygon(OSM_dynapoints/point, rdc_geometry);
	attribute<UInt32> OSM_dyna_point_count := pcount(per_dynapoint);
	attribute<Float64> OSM_Weight := Float64(OSM_dyna_point_count);
	attribute<Float64> OSM_FractionOf_2022 := OSM_Weight / sum(OSM_Weight, first_rel )[first_rel ];
	attribute<Float64> OSM_FractionOf_2023 := OSM_Weight / sum(OSM_Weight, second_rel)[second_rel];
	
	unit<uint32> VBO := /Invoer/RuimtelijkeData/BAG/import/vbo;
	attribute<.> per_VBO(VBO) := point_in_polygon(VBO/geometry, rdc_geometry);
	attribute<bool> SelectedVBO(VBO) := IsDefined(vbo/pand_rel); 
	attribute<bool> IsWoning(VBO) := IsDefined(VBO/gebruiksdoelen/woon);
	attribute<Float64> VBO_weight := sum(Float64(SelectedVBO) * 
		(Float64(and(IsWoning, IsDefined(VBO/oppervlak_filters/wonen)))+ Float64(and(not(IsWoning), IsDefined(VBO/oppervlak_filters/utiliteit))) * Float64(vbo/oppervlakte) / 130[m2])
		, per_VBO
		);
		
	attribute<Float64> VBO_FractionOf_2022 := VBO_Weight / sum(VBO_Weight, first_rel )[first_rel ];
	attribute<Float64> VBO_FractionOf_2023 := VBO_Weight / sum(VBO_Weight, second_rel)[second_rel];
	
	attribute<Float64> Length_FractionOf_2022 := MakeDefined(OSM_FractionOf_2022, AreaFractionOf_2022); // use area fraction when sum OSM_Weight for 2022  is zero, such as in water areas
	attribute<Float64> OS_FractionOf_2022     := MakeDefined(VBO_FractionOf_2022, AreaFractionOf_2022); // use area fraction when sum VBO_Weight for 2022  is zero, such as in water areas
	attribute<Float64> OS_FractionOf_2023     := MakeDefined(VBO_FractionOf_2023, AreaFractionOf_2023); // use area fraction when sum VBO_Weight for 2022  is zero, such as in water areas
}
