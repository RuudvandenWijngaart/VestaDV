//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2020 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//       In deze configuratiefile worden de klassificaties geconfigureerd.              //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container Classifications: Using = "Units", KeepData = "True", IsHidden = "True"
{
	unit<uint8> BebouwingsSectorBase: nrofrows = 3
	{
		attribute<string> name     : [ 'Woning', 'Util', 'GlTb'];
		attribute<bool>   isActive := Invoer/SpecifiekeInstellingen/BS_isActive;
		attribute<string> label    := name, DialogType = "LabelText";

		attribute<bool>   IsGlastuinbouw   : [ false, false,  true ];
		attribute<bool>   DraagtBTW        : [ true, false, false ];
		attribute<.>      Warmtewet_BC_rel : [ 0, 1, 2 ]; /// warmtewet prijs voor Nieuwbouw obv bestaande objecten

		attribute<string> NcwRefBase   : ['w', 'u', 't'];
		attribute<string> BcCode       : ['w', 'u', 'u'];

		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}

	unit<uint8> BebouwingsSector:= select_with_org_rel(BebouwingsSectorBase/isActive)
	{
		attribute<string> name             := BebouwingsSectorBase/name[org_rel];
		attribute<string> label            := BebouwingsSectorBase/label[org_rel], DialogType = "LabelText";

		attribute<bool>   IsGlastuinbouw   := BebouwingsSectorBase/IsGlastuinbouw[org_rel];
		attribute<bool>   DraagtBTW        := BebouwingsSectorBase/DraagtBTW[org_rel];
		attribute<BebouwingsSectorBase>      Warmtewet_BC_rel := BebouwingsSectorBase/Warmtewet_BC_rel[org_rel];

		attribute<string> NcwRefBase       := BebouwingsSectorBase/NcwRefBase[org_rel];
		attribute<string> BcCode           := BebouwingsSectorBase/BcCode[org_rel];

		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}

	unit<uint8> BebouwingsComponentBase := combine_uint8(BebouwingsSectorBase, bool )
	{
		attribute<string> name     := ( nr_2 ? 'Nieuwbouw' : 'Bestaande') + BebouwingsSectorBase/name[nr_1];
		attribute<string> TypeName := BebouwingsSectorBase/name[nr_1] + 'Type' + ( nr_2 ? 'Nieuwbouw' : 'Bestaand');
		attribute<bool>   isActive := BebouwingsSectorBase/isActive[nr_1] && (Invoer/SpecifiekeInstellingen/BC_doNieuwbouw || !isNieuwbouw);
		attribute<string> label    := name, DialogType = "LabelText";
		attribute<string> Code     := string(id(.));
		
		attribute<BebouwingsSectorBase> BebouwingsSectorBase_rel := nr_1;

		attribute<bool>   isBestaand       := not(IsNieuwbouw);
		attribute<bool>   isGlastuinbouw   := BebouwingsSectorBase/isGlastuinbouw[nr_1];
		attribute<bool>   isNieuwbouw      := nr_2;
		attribute<bool>   DraagtBTW        := BebouwingsSectorBase/DraagtBTW[nr_1];
		attribute<bool>   KanWKO           := not(IsGlastuinbouw);
		attribute<bool>   Warmtewet        : [ true, false, false, false, false, false ]; // prijsberekening warmte volgens ACM berekening ?
		attribute<.>      Warmtewet_BC_rel : [ 0, 0, 2, 2, 4, 4 ]; /// warmtewet prijs voor Nieuwbouw obv bestaande objecten
		attribute<string> SchilSprong_sel  : ['bw', 'none', 'bu', 'none', 'none', 'none'];
		attribute<string> BronExpr:
		[
			 'Bebouwing/BagWoning',    'BebouwingsComponenten/Nieuwbouw/woning/@BRON@/@JAAR@/results'
			,'Bebouwing/BagUtil',      'BebouwingsComponenten/Nieuwbouw/Utiliteit/@BRON@/@JAAR@/results'
			,'Bebouwing/Glastuinbouw', 'BebouwingsComponenten/Glastuinbouw/@BRON@/@JAAR@/Nieuwbouw'
		];
		attribute<string> entity := 'BebouwingsComponenten/'+ name +'/BebouwingsObject';

		attribute<string> NcwRefBase : ['bw', 'nw', 'bu', 'nu', 'bt', 'nt'];
		attribute<string> BcCode     := BebouwingsSectorBase/BcCode[nr_1];

		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}

	unit<uint8> BebouwingsComponent := subset(BebouwingsComponentBase/isActive) 
	{
		attribute<string> name       := BebouwingsComponentBase/name [nr_OrgEntity];
		attribute<string> TypeName   := BebouwingsComponentBase/TypeName[nr_OrgEntity];
		attribute<string> code       := BebouwingsComponentBase/code [nr_OrgEntity];
		attribute<string> label      := BebouwingsComponentBase/label[nr_OrgEntity];
		attribute<string> BronExpr   := BebouwingsComponentBase/BronExpr[nr_OrgEntity];
		attribute<string> NcwRefBase := BebouwingsComponentBase/NcwRefBase[nr_OrgEntity];
		
		attribute<BebouwingsSectorBase> BebouwingsSectorBase_rel := BebouwingsComponentBase/BebouwingsSectorBase_rel[nr_OrgEntity];
//		attribute<BebouwingsSectorBase> BebouwingsSectorBase_rel := nr_OrgEntity -> BebouwingsSectorBase_rel; // TODO: new syntax isssue XXX

		attribute<bool > IsBestaand       := BebouwingsComponentBase/IsBestaand[nr_OrgEntity];
		attribute<bool > IsGlastuinbouw   := BebouwingsComponentBase/IsGlastuinbouw[nr_OrgEntity];
		attribute<bool > IsNieuwbouw      := BebouwingsComponentBase/IsNieuwbouw[nr_OrgEntity];
		attribute<bool > DraagtBTW        := BebouwingsComponentBase/DraagtBTW[nr_OrgEntity];
		attribute<bool > KanWKO           := BebouwingsComponentBase/KanWKO[nr_OrgEntity];
		attribute<bool > Warmtewet        := BebouwingsComponentBase/Warmtewet[nr_OrgEntity];
		attribute<.>     Warmtewet_BC_rel := rlookup(BebouwingsComponentBase/Warmtewet_BC_rel[nr_OrgEntity], nr_OrgEntity);
		attribute<string> SchilSprong_sel := BebouwingsComponentBase/SchilSprong_sel[nr_OrgEntity];

		attribute<string> entity := BebouwingsComponentBase/entity[nr_OrgEntity];
		attribute<string> BcCode := BebouwingsComponentBase/BcCode[nr_OrgEntity];

		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}

	unit<uint8> BtwComponent := subset(BebouwingsComponent/DraagtBTW)
	{
		attribute<string> name        := BebouwingsComponent/name[nr_OrgEntity];
	}

	unit<uint8> WoningComponent := subset(BebouwingsComponent/BebouwingsSectorBase_rel == BebouwingsSectorBase/V/Woning) 
	{
		attribute<string> name        := BebouwingsComponent/name [nr_OrgEntity];
		attribute<string> NcwRefBase  := BebouwingsComponent/NcwRefBase[nr_OrgEntity];
		attribute<bool  > IsNieuwbouw := BebouwingsComponent/IsNieuwbouw[nr_OrgEntity];
	}
	unit<uint8> UtilComponent := subset(BebouwingsComponent/BebouwingsSectorBase_rel == BebouwingsSectorBase/V/Util) 
	{
		attribute<string> name        := BebouwingsComponent/name [nr_OrgEntity];
		attribute<string> NcwRefBase  := BebouwingsComponent/NcwRefBase[nr_OrgEntity];
		attribute<bool  > IsNieuwbouw := BebouwingsComponent/IsNieuwbouw[nr_OrgEntity];
	}
	unit<uint8> WoningUtilComponent := union_unit_uint8(WoningComponent, UtilComponent) {
		attribute<string> name        := union_data(., WoningComponent/Name, UtilComponent/Name);
		attribute<string> NcwRefBase  := union_data(., WoningComponent/NcwRefBase, UtilComponent/NcwRefBase);
		attribute<bool> IsNieuwbouw := union_data(., WoningComponent/IsNieuwbouw, UtilComponent/IsNieuwbouw);
	}
	
// =========  Classificaties voor Bebouwingscomponenten
	unit<uint8> WoningtypeBestaand : nrofrows = 7
	{
		attribute<string> label                : ['geen woonpand','vrijstaand','2 onder 1 kap'   ,'rijwoning hoek','rijwoning tussen','meergezins: laag en midden','meergezins: hoog'] , DialogType = "LabelText";
		attribute<string> name                 : ['geen_woonpand','vrijstaand','twee_onder_1_kap','hoekwoning'    ,'tussenwoning'    ,'meergezinspand_laag_midden','meergezinspand_hoog'];
		attribute<string> resterendFactorName  : [     'onbekend','vrijstaand', 'TweeOnderEenKap','Rijtjeshuis'   ,'Rijtjeshuis'     , 'FlatTot4'                 ,'Flat5'];

		attribute<bool>   IsMeergezins         : [ false, false, false, false, false, true, true ];
		attribute<bool>   IsHoogbouw           := id(.) == V/meergezinspand_hoog;
		attribute<Units/asl_pand> StapelFactor : [ 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 6.0 ];

		attribute<uint32> BrushColor: DialogType = "BrushColor",
		[
			 rgb(255,255,255)
			,rgb( 26,152, 80)
			,rgb(166,217,106)
			,rgb(100,100,255)
			,rgb(255,255,  0)
			,rgb(255, 50, 50)
			,rgb(255,  0,  0)
		];
		attribute<uint32> PenColor   := rgb((bitand(BrushColor / 16384, 255) / 2), (bitand(BrushColor / 256, 255) / 2), (bitand(BrushColor, 255) / 2)),	DialogType = "PenColor";
		attribute<string> excel_code := label;

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}

	unit<uint8> WoningtypeNieuwbouw: nrofrows = 15
	{
		attribute<bool>  IsMeergezins: [ false, false, false, false, true, true, true, true, false, true, false, true, false, false, false ];
		attribute<bool>  IsHoogbouw  := id(.) == V/Flat5;
		attribute<string> label      := excel_code, DialogType = "LabelText";

		attribute<string> name: [
			'onbekend', 'vrijstaand', 'TweeOnderEenKap',
			'rijtjeshuis', 'FlatTot4', 'Flat5',
			'EtageWoning', 'Appartement', 'Herenhuis',
			'BejaardenWoning', 'Boerderij', 'StudentenWoning',
			'Woonboot', 'Woonwagen', 'Divers'
		];
		attribute<Units/asl_pand> StapelFactor : [ 1.0, 1.0, 1.0, 1.0, 2.0, 6.0, 3.0, 3.0, 3.0, 2.0, 1.0, 6.0, 1.0, 1.0, 1.0 ];
		attribute<Units/pand_asl> pand_aandeel := IsMeergezins ? 1.0 / StapelFactor : 1.0[units/pand_asl];

		attribute<string> excel_code: [
			'onbekend', 'vrijstaand/bungalows', 'twee onder een kap', 
			'rijtjeshuizen/eengezins', 'flats 4 of minder verdiepingen', 'flats meer dan 4 verdiepingen',
			'etagewoning/maisonnette', 'etage/flats grachtenpand', 'herenhuis grachtenpand',
			'zelfstandige bejaardenwoning', 'boerderij/tuinderij', 'studentenwoning/flat',
			'woonboten', 'woonwagens', 'divers'
		];
		attribute<string> wlo_FileName: [
			'onbekend', 'vrijstaand_bungalows', 'twee_onder_een_kap',
			'rijtjeshuizen_eengezins','flats_tot_vijf', 'flats_vijf_of_meer',
			'etagewoning_maisonnette', 'etageflats_grachtenpand', 'herenhuis_grachtenpand',
			'bejaardenwoning', 'boerderij_tuinderij', 'studentenwoning_flat',
			'woonboten', 'woonwagens', 'divers'
		];
		attribute<string> resterendFactorName := name;

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}

	unit<uint8> UtilTypeBestaand: nrofrows = 10
	{
		attribute<bool>              IsMeergezins          := const(false, .);
		attribute<bool>              IsHoogbouw            := const(false, .);
		attribute<string>            label                 := Label_key == 'Overig' ? 'overige_gebruiks' : Label_key, DialogType = "LabelText";
		attribute<string>            Label_key             : ['Kantoor', 'Winkel', 'Gezondheidszorg', 'Logies', 'Onderwijs', 'Industrie','Bijeenkomst','Sport','Overig','Cel'];
		attribute<string>            excel_code            := Label_key;
		attribute<int16>             SymbolIndex           : [41,54,241,49,67,213,107,246,171,150], DialogType = "SymbolIndex";
		attribute<string>            name                  := label;
		attribute<string>            resterendFactorName   : ['kantoor', 'winkel', 'verzorging_verpleging', 'horeca', 'onderwijs', 'overig', 'overig', 'overig', 'overig', 'overig'];
		attribute<UtilTypeNieuwbouw> UtilTypeNieuwbouw_rel := rlookup(resterendFactorName, UtilTypeNieuwbouw/label);

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}

	unit<uint8> UtilTypeNieuwbouw: nrofrows = 9
	{
		attribute<bool>         IsMeergezins           := const(false, .);
		attribute<bool>         IsHoogbouw             := const(false, .);
		attribute<string>       label                  : ['kantoor' , 'winkel' , 'groothandel', 'autohandel_reperatie'    , 'verzorging_verpleging'   , 'ziekenhuis'  , 'onderwijs', 'horeca' , 'overig'                 ], DialogType = "LabelText";
		attribute<string>       Label_key              : ['kantoren', 'winkels', 'Groothandel', 'Autohandel en reparatie' , 'Verpleging en verzorging', 'Ziekenhuizen', 'Onderwijs', 'Horeca' , 'Overige dienstverlening'], isHidden = "True";
		attribute<string>       filename_Nieuwbouw     : ['kantoren', 'winkels', 'groothandel', 'autohandel'              , 'verpleging'              , 'ziekenhuis'  , 'onderwijs', 'horeca' , 'overig'                 ], isHidden = "True";
		attribute<string>       wlo_filename_Nieuwbouw : ['kantoor' , 'winkel' , ''           , ''                        , 'verpleging_verzorging'   , ''            , 'onderwijs', 'horeca' , 'overig_dienstverlening' ], isHidden = "True";
		attribute<string>       excel_code             := Label_key, isHidden = "True";
		attribute<int16>        SymbolIndex            : [41,54,241,49,67,213,107,246,171], DialogType = "SymbolIndex", isHidden = "True";
		attribute<string>       name                   := label, isHidden = "True";
		attribute<string>       resterendFactorName    := name;

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}

	unit<uint8> GLTB : nrofrows = 13
	{
		attribute<bool>   IsMeergezins := const(false, .);
		attribute<bool>   IsHoogbouw   := const(false, .);
		attribute<string> label        := csv_output, DialogType = "LabelText";
		attribute<string> name         := replace(label, ' ', '_');
		attribute<string> excel_code: 
		[
			 'onbekend'
			,'groente verwarmd'
			,'groente onverwarmd'
			,'groente belicht'
			,'groente onbelicht'
			,'bloemen verwarmd'
			,'bloemen onverwarmd'
			,'bloemen belicht'
			,'bloemen onbelicht'
			,'overig verwarmd'
			,'overig onverwarmd'
			,'overig belicht'
			,'overig onbelicht'
		];

		attribute<string> resterendFactorName := name;
		attribute<string> csv_output          := replace(excel_code, ', ', '_'); // no comma's in output to csv as Excel will treat them as seperate columns
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	unit<uint8> GlTbTypeBestaand := GLTB;
	unit<uint8> GlTbTypeNieuwbouw:= GLTB;

// =========  Classificaties voor bouw/zichtjaren
	unit<uint8> BouwjaarWoningBestaand : nrofrows = 11
	{
		attribute<units/yr> ClassBreak : [ -9998 ,  1930 ,  1946 ,  1965 ,  1975 ,  1992 ,  1996 ,  2000 ,  2006 ,  2011 ,  2014 ];
		attribute<string>   name       : ['v1930','v1946','v1965','v1975','v1992','v1996','v2000','v2006','v2011','v2014','v2020'];

		attribute<string> Excel_code:
		[
			 'voor 1930'
			,'1930 - 1945'
			,'1946 - 1964'
			,'1965 - 1974'
			,'1975 - 1991'
			,'1992 - 1995'
			,'1996 - 1999'
			,'2000 - 2005'
			,'2006 - 2010'
			,'2011 - 2014'
			,'2015 - 2020'
		];

		attribute<string> label:
		[
			 'Tot en met 1929 '		//Vooroorlogse woningbouw, overwegend zonder spouw
			,'van 1930 t/m 1945 '	//Vooroorlogse woningbouw, overwegend met spouw
			,'van 1946 t/m 1964 '	//Naoorlogse woningebouw, weinig aandacht voor energiezuinigheid
			,'van 1965 t/m 1974 '	//Vanaf 1965 aandacht voor  isolatie van dichte bouwedelen (bron: AGNL voorbeeldwoningen 2011)
			,'van 1975 t/m 1991 '	//EI van woningen na 1974 substantieel lager  (bron: AGNL voorbeeldwoningen 2011)
			,'van 1992 t/m 1995 '	//Vanaf 1992 voor alle bouwdelen een voorschrift voor warmte-isolatie van tenminste Rc 2,5 , evenals dubbele beglazing in alle ramein (bron: AGNL voorbeeldwoningen 2011)
			,'van 1996 t/m 1999 '	//Bouwbesluit, EPC eis woningen 1,4 en 1,2 (gecombineerd omdat de eis al na 2 jaar van 1,4 naar 1,2 werd aangescherpt)
			,'van 2000 t/m 2005 '	//Bouwbesluit, EPC eis woningen 1,0
			,'van 2006 t/m 2010 '	//Bouwbesluit, EPC eis woningen 0,8
			,'van 2011 t/m 2014 '	//Bouwbesluit, EPC eis woningen 0,6
			,'van 2015 t/m 2020'	//Bouwbesluit, EPC eis woningen 0,4
		];

		attribute<uint32> SymbolColor: DialogType = "SymbolColor",
		[
			 rgb(255, 0,  0)
			,rgb(230, 0, 26)
			,rgb(204, 0, 51)
			,rgb(179, 0, 77)
			,rgb(153, 0,102)
			,rgb(128, 0,128)
			,rgb(102, 0,153)
			,rgb( 77, 0,179)
			,rgb( 51, 0,204)
			,rgb( 26, 0,230)
			,rgb(  0, 0,255)
		];
		
		attribute<BouwjaarWoningBestaandRapportage> BouwjaarWoningBestaandRapportage_rel:
			[0,1,2,3,4,5,5,5,6,6,6];

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		parameter<.> onbekend := V/v1930;
	}
	
	unit<uint8> BouwjaarWoningBestaandRapportage: nrofrows = 7
	{	
		attribute<units/Yr> ClassBreak : [ -9998 ,  1930 ,  1946 ,  1965 ,  1975 ,  1992 ,  2006 ];
		attribute<string>   name       : ['v1930','v1946','v1965','v1975','v1992','v2006','v2020'];

		attribute<string> Label:
		[
			 'Tot en met 1929 '		//Vooroorlogse woningbouw, overwegend zonder spouw
			,'van 1930 t/m 1945 '	//Vooroorlogse woningbouw, overwegend met spouw
			,'van 1946 t/m 1964 '	//Naoorlogse woningebouw, weinig aandacht voor energiezuinigheid
			,'van 1965 t/m 1974 '	//Vanaf 1965 aandacht voor  isolatie van dichte bouwedelen (bron: AGNL voorbeeldwoningen 2011)
			,'van 1975 t/m 1991 '	//EI van woningen na 1974 substantieel lager  (bron: AGNL voorbeeldwoningen 2011)
			,'van 1992 t/m 2005 '	//Vanaf 1992 voor alle bouwdelen een voorschrift voor warmte-isolatie van tenminste Rc 2,5 , evenals dubbele beglazing in alle ramein (bron: AGNL voorbeeldwoningen 2011)
			,'van 2006 t/m 2020 '	//Bouwbesluit, EPC eis woningen 0,8
		];

		attribute<uint32> SymbolColor: DialogType = "SymbolColor",
		[
			 rgb(255, 0,  0)
			,rgb(230, 0, 26)
			,rgb(204, 0, 51)
			,rgb(179, 0, 77)
			,rgb(153, 0,102)
			,rgb(128, 0,128)
			,rgb( 51, 0,204)
		];

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		parameter<.> onbekend := V/v1930;
	}

	unit<uint8> BouwjaarUtilBestaand: nrofrows = 6
	{
		attribute<units/yr> ClassBreak : [     0 ,  1920 ,  1975 ,  1990 ,  1995 , null];
		attribute<string>   name       : ['v1920','v1975','v1990','v1995','n1995','onbekend'];

		attribute<string> Excel_code:
		[
			'0<=1920',
			'1920<=1975',
			'1975<=1990',
			'1990<=1995',
			'1995<=2019',
			'onbekend'
		];

		attribute<string> label:
		[
			'voor 1920',
			'van 1920 t/m 1974',
			'van 1975 t/m 1989',
			'van 1990 t/m 1995',
			'van 1996 t/m 2019',//In BAG 20190101 komt bouwjaar 2019 ook nog voor
			'onbekend'
		];

		attribute<uint32> SymbolColor: DialogType = "SymbolColor",
		[
			rgb(255,  0,  0)
		,	rgb(255,128,  0)
		,	rgb(255,255,  0)
		,	rgb(128,128,128)
		,	rgb(  0,  0,100)
		,	rgb(128,128,128)
		];

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}

	unit<uint8> bouwjaar: nrofrows = 16
	{
		attribute<units/yr> ClassBreak : [      null,  -9998,  1800 ,  1900 ,  1920 ,  1940 , 1960 ,   1970,   1980 ,  1990 ,  1995 ,  2000 ,  2010 ,  2020 ,  2030 ,  2040 ];
		attribute<string>   name       : ['onbekend','v1800','v1900','v1920','v1940','v1960','v1970','v1980','v1990','v1995','v2000','v2010','n2010','n2020','n2030','n2040'];

		attribute<string> Excel_code:
		[
			 "onbekend"
			,"voor 1800"
			,"1800<=1900"
			,"1900<=1920"
			,"1920<=1940"
			,"1940<=1960"
			,"1960<=1970"
			,"1970<=1980"
			,"1980<=1990"
			,"1990<=1995"
			,"1995<=2000"
			,"2000<=2010"
			,"2010<=2020"
			,"2020<=2030"
			,"2030<=2040"
			,"2040<=2050"
		];
		attribute<string> label:
		[
			 'onbekend'
			,'voor 1800 '
			,'tussen 1800 en 1899 '
			,'tussen 1900 en 1919 '
			,'tussen 1920 en 1939 '
			,'tussen 1940 en 1959 '
			,'tussen 1960 en 1969 '
			,'tussen 1970 en 1979 '
			,'tussen 1980 en 1989 '
			,'tussen 1990 en 1994 '
			,'tussen 1995 en 1999 '
			,'later dan 2000 '
			,'vanaf 2010 '
			,'vanaf 2020 '
			,'vanaf 2030 '
			,'vanaf 2040 '
		];
		attribute<uint32> SymbolColor: DialogType = "SymbolColor",
		[
			 rgb(128,128,128)
			,rgb(255,  0,  0)
			,rgb(255, 36,  0)
			,rgb(255, 72,  0)
			,rgb(255,109,  0)
			,rgb(255,146,  0)
			,rgb(255,182,  0)
			,rgb(255,219,  0)
			,rgb(255,255,  0)
			,rgb(219,219, 15)
			,rgb(182,182, 29)
			,rgb(128,128,128)
			,rgb(109,109, 58)
			,rgb( 72, 72, 73)
			,rgb( 36, 36, 87)
			,rgb(  0,  0,100)
		];

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}

	unit<uint8> ZichtJaar: nrofrows = 5 
	{
		attribute<units/yr_uint16> Jaar         : [2010, 2020, 2030, 2040, 2050];
		attribute<bool>            HasMutations := Jaar > 2010[units/yr_uint16];
		attribute<string>          label        := string(Jaar);
		attribute<string>          name         := id(.) == 0b ? 'StartJaar' : 'J' + label; // eerste ZichtJaar wordt startjaar genoemd omdat de gebruikte data betrekking heeft op verschillende jaren.
		attribute<string>          period_name  := 'Y' + label[sub_or_null(id(.),1[.])] + '_Y' + label;

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
	// Hier kun je meer of minder Rekenstappen per jaar gaan definieren. Pas dan ook de onderstaande attribuutdata aan.
	// Waarschijnlijk moet de eerste Rekenstap wel verwijzen naar het eerste ZichtJaar en moeten volgende Rekenstappen niet naar eerdere jaren verwijzen.
	
	unit<uint8> Rekenstap := /Rekenstap
	{
		attribute<ZichtJaar> ZichtJaar_rel_klimaat   := classify(Jaar, ZichtJaar/Jaar);
		attribute<ZichtJaar> ZichtJaar_rel_bebouwing := Invoer/SpecifiekeInstellingen/BC_doNieuwbouw ? ZichtJaar_rel_klimaat : 0[ZichtJaar];
		
		attribute<RekenJaar> RekenJaar_rel := rlookup(jaar, RekenJaar/Values);
		attribute<bool>      HasMutations  := ZichtJaar/HasMutations[ZichtJaar_rel_bebouwing];
	
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}

	unit<uint8> RekenJaar := unique(Rekenstap/jaar)
	{
		attribute<string> name := 'J' + string(Values);
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
// =========  Classificaties voor rapgroepen
	// let op: de set van mogelijke RapGroeperingen is afhankelijk van de gekozen BebouwingsComponenten.
	unit<uint8> WoningBestaandRapGroep: nrofrows = 16 // Eigendom (4) en inkomensklasse (8) zijn nu niet beschikbaar voor woningBAG
	{
		attribute<string> label: DialogType = "LabelText",
		[
			'0=geen onderverdeling',
			'1=woningtype',
			'2=bouwkjaarklasse',
			'3=woningtype & bouwjaarklasse',
			'4=Eigendom(koop/huur/onbekend)',
			'', '', '', 
			'8=inkomensklasse(obv: ???)',
			'', '', '', '', '', '', ''
		];
		attribute<string> ExportLabel: // GEEN SPATIES of SLASHES E.D. GEBRUIKEN
		[
			'geen_onderverdeling',
			'woningtype',
			'bouwkjaarklasse',
			'woningtype_bouwjaarklasse',
			'Eigendom',
			'', '', '', 
			'inkomensklasse',
			'', '', '', '', '', '', ''
		];
		attribute<string> ClassRef:
		[
			'Classifications/GeenOnderverdeling',
			'Allocatie/BestaandeWoning/BO/BebouwingsTypeDomein',
			'Allocatie/BestaandeWoning/BO/BouwjaarDomein',
			'Allocatie/BestaandeWoning/BO/ModelObjectKeyDomein',
			'Classifications/WoningEigendom',
			'', '', '', 
			'Classifications/InkomensKlasse',
			'', '', '', '', '', '', ''
		];
		attribute<string> AttrRef:
		[
			'GeenOnderverdeling',
			'BebouwingsType',
			'Bouwjaar',
			'ModelObjectKey',
			'BO/Eigendom',
			'', '', '', 
			'BO/Inkomen',
			'', '', '', '', '', '', ''
		];
	}

	unit<uint8> UtilBestaandRapGroep: nrofrows = 4
	{
		attribute<string> label: DialogType = "LabelText",
		[
			'undefined',
			'1: Ziekenhuis etc',
			'minder dan 11 werknememers en niet 1',
			'11 of meer werknemers en niet 1'
		];
		attribute<string> ExportLabel:
		[
			'geen_onderverdeling',
			'utiltype',
			'bouwkjaarklasse',
			'utiltype_bouwjaarklasse'
		];
		attribute<string> ClassRef:
		[
			'Classifications/GeenOnderverdeling',
			'Allocatie/BestaandeUtil/BO/BebouwingsTypeDomein',
			'Allocatie/BestaandeUtil/BO/BouwjaarDomein',
			'Allocatie/BestaandeUtil/BO/ModelObjectKeyDomein'
		];
		attribute<string> AttrRef:
		[
			'GeenOnderverdeling',
			'BebouwingsType',
			'Bouwjaar',
			'ModelObjectKey'
		];
	}

	unit<uint8> WoningEigendom: nrofrows = 7
	{
		attribute<string> label: DialogType = "LabelText",
		[
			 'onbekend'
			,'allemaal huur'
			,'grootste deel huur'
			,'evenveel huur en koop'
			,'grootste deel koop'
			,'allemaal koop'
			,'divers'
		];

		attribute<uint32> SymbolColor: DialogType = "SymbolColor",
		[
			 rgb(128,128,128)
			,rgb(255,  0,  0)
			,rgb(192, 64,  0)
			,rgb(128,128,  0)
			,rgb( 64,182,  0)
			,rgb(  0,255,  0)
			,rgb(128,128,128)
		];

		parameter<.> AllemaalHuur     : [1];
		parameter<.> GrootsteDeelHuur : [2];
		parameter<.> EvenveelHuurKoop : [3];
		parameter<.> GrootsteDeelKoop : [4];
		parameter<.> AllemaalKoop     : [5];
	}

	unit<uint8> GebruiksgrootteKlasse : nrofrows = 5
	{
		attribute<string> code           : [ 'TL', 'KG', 'KMG', 'MMG', 'GG' ];
		attribute<string> label          : [ 'Teruglevering', 'Klein Gebruik', 'Klein Middelgroot Gebruik', 'Midden Middelgroot Gebruik', 'Groot middelgroot en groot gebruik' ];
		attribute<string> name           : [ 'Teruglevering', 'KleinGebruik', 'KleinMiddelGebruik', 'MiddelMiddelGebruik', 'GrootGebruik' ];
		attribute<m3_yr>  gas_break_m3   : [-1e+10, 0,  5000, 170000,  1000000 ];
		attribute<kwh_yr> elek_break_kwh : [-1e+10, 0, 10000,  50000, 10000000 ];

		attribute<GJ_yr>  gas_break      := gas_break_m3 * Invoer/Kengetallen/constanten/GasEnergie;
		attribute<GJ_yr>  elek_break     := elek_break_kwh [GJ_yr];
	}

	unit<uint8> InkomensKlasse: nrofrows = 7
	{
		attribute<string> label : DialogType = "LabelText",
		[
			 '0 Onbekend'
			,'1 Hoog'
			,'2 BovenModaal'
			,'3 Modaal'
			,'4 Laag'
			,'5 Minimum'
			,'6 Onbekend'
		];
		attribute<bool> KanBesparen : [ false, true, true, true, false, false, false ];
	}

	// =========  Classificaties voor Woningen en Utiliteit, zonder Glastuinbouw
	unit<uint8> WoonUtilComponent := Subset(BebouwingsComponent/KanWKO)
	{
		attribute<string> name        := BebouwingsComponent/name[nr_OrgEntity];
		attribute<string> Code        := BebouwingsComponent/Code[nr_OrgEntity];
		attribute<bool>   IsNieuwbouw := BebouwingsComponent/IsNieuwbouw[nr_OrgEntity];
	}

	// =========  Classificaties voor Energielabels
	unit<uint32> RVOEnergieLabel: nrofrows = 7
	{
		attribute<string> name  : ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
		attribute<string> label : ['A+', 'B', 'C', 'D', 'E', 'F', 'G'], DialogType = "LabelText";

		attribute<uint32> Color : DialogType = "BrushColor",
		[
			 rgb(053,152,000)
			,rgb(114,167,017)
			,rgb(176,196,001)
			,rgb(247,230,000)
			,rgb(251,182,001)
			,rgb(249,097,014)
			,rgb(249,026,031)
		];
		attribute<uint32> SymbColor := Color, DialogType = "SymbolColor";

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
	unit<uint8> schillabel: nrofrows = 8
	{
		attribute<string> name          : ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'N'];
		attribute<string> label         : ['A+', 'B', 'C', 'D', 'E', 'F', 'G', 'Geen Label'], DialogType = "LabelText";
		attribute<string> LeercurveName : ['Verder', 'Bpls', 'Cmin', 'Cmin', 'Cmin', 'Cmin', 'Cmin'];

		attribute<uint32> Color : DialogType = "BrushColor",
		[
			 rgb(053,152,000)
			,rgb(114,167,017)
			,rgb(176,196,001)
			,rgb(247,230,000)
			,rgb(251,182,001)
			,rgb(249,097,014)
			,rgb(249,026,031)
		];
		attribute<uint32> SymbColor := Color, DialogType = "SymbolColor";

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
	unit<uint8> DoelLabel_NaSprong := unique(SchilSprong/Naar_rel)
	{
		attribute<string>     name           := SchilLabel/name[SchilLabel_rel];
		attribute<schillabel> SchilLabel_rel := values;

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);		
	}

	unit<uint8> DoelLabel := 
		range(uint8, 0b, uint8(#DoelLabel_NaSprong+1)) // REMOVE WHEN stop support for version < 7.208
		// new SYNTAX for GeoDMS 7.208: 
		// union_unit_uint8(DoelLabel_NaSprong, void)
	{
		attribute<string>             name           := union_data(., DoelLabel_NaSprong/name, 'geen');
		attribute<DoelLabel_NaSprong> NaSprong_rel   := union_data(., id(DoelLabel_NaSprong), (0/0)[DoelLabel_NaSprong]);
		attribute<schillabel>         SchilLabel_rel := union_data(., DoelLabel_NaSprong/SchilLabel_rel, (0/0)[schillabel]);
		attribute<uint32>             Color          := schillabel/Color[SchilLabel_rel], DialogType = "BrushColor";

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}

	unit<uint32> ProductType: nrofrows = 3
	{
		attribute<string> name  : ['RV', 'TW', 'K'];
		attribute<string> label := name, DialogType = "LabelText";
	}

	unit<uint32> ServiceNiveau : nrofrows = 2
	{
		attribute<string> name  : ['b', 'p'];
		attribute<string> label : ['basis', 'piek'], DialogType = "LabelText";
	}

	unit<uint32> Product := combine(ProductType, ServiceNiveau) 
	{
		attribute<ProductType> ProductType_rel := nr_1;

		attribute<string> TypeName    := ProductType/name[nr_1];
		attribute<string> ServiceName := ServiceNiveau/name[nr_2];
		attribute<string> name        := TypeName + ServiceName;
		attribute<string> label       := ProductType/label[nr_1] + '.' + ServiceNiveau/label[nr_2], DialogType = "LabelText";

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}

	unit<uint32> AfgifteSysteem : nrofrows = 3
	{
		attribute<string> name  : [ 'geen', 'MTAS', 'LTAS' ];
		attribute<string> label := name, DialogType = "LabelText";

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}

	unit<uint32> Input : nrofrows = 10
	{
		attribute<string> name         : ['e', 'gas', 'H2', 'biomassa', 'pellets', 'LT', 'MT', 'zon', 'wind', 'kolen'];
		attribute<string> label        := name, DialogType = "LabelText";
		attribute<bool>   isBemeterd   := id(.) <= V/MT;
		attribute<bool>   gebiedsOptie := id(.) <= V/MT && not(gebouwOptie);
		attribute<bool>   opwekOptie   := id(.) == V/zon || id(.) == V/wind;
		attribute<bool>   gebouwOptie  := id(.) <= V/pellets || opwekOptie;

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	unit<uint32> BemeterdeGebouwInput := subset(Input/gebouwOptie && Input/isBemeterd)
	{
		attribute<string> name  := Input/name[nr_OrgEntity];
		attribute<string> label := name, DialogType = "LabelText";

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
	// te lezen van .csv files
	unit<uint32> Installatie_imp: StorageName = "%projDir%/installaties/installatie.csv", StorageType = "gdal2.vect", StorageReadOnly = "True"
	{
		attribute<string> name; // PrimaryKey
	}

	unit<uint32> Installatie := Installatie_imp
	,	IntegrityCheck = "#(unique(Installatie_imp/name)) == #(Installatie_imp)"
	{
		attribute<string> label := name, DialogType = "LabelText";

		attribute<float64> OpDak              := float64(Installatie_imp/Dak);
		container          KanLeveren         := for_each_nedv(Product/name, 'float64(Installatie_imp/'+Product/name+')', ., ratio);
		attribute<bool>    GebouwOptieBepaald := ='or(' + AsItemList('KanLeveren/' + Product/name + ' > 0.0') + ')';

		// kosten attr
		attribute<Eur_asl> Ki_asl_min_w := Installatie_imp/Ki_asl_min_w [Eur_asl];
		attribute<Eur_asl> Ki_asl_max_w := Installatie_imp/Ki_asl_max_w [Eur_asl];
		attribute<Eur_asl> Ki_asl_min_u := Installatie_imp/Ki_asl_min_u [Eur_asl];
		attribute<Eur_asl> Ki_asl_max_u := Installatie_imp/Ki_asl_max_u [Eur_asl];

		attribute<Eur_kW> Ki_cap_min_w  := Installatie_imp/Ki_cap_min_w [Eur_kW];
		attribute<Eur_kW> Ki_cap_max_w  := Installatie_imp/Ki_cap_max_w [Eur_kW];
		attribute<Eur_kW> Ki_cap_min_u  := Installatie_imp/Ki_cap_min_u [Eur_kW];
		attribute<Eur_kW> Ki_cap_max_u  := Installatie_imp/Ki_cap_max_u [Eur_kW];

		attribute<Eur_m2> Ki_opp_min_w  := Installatie_imp/Ki_opp_min_w [Eur_m2];
		attribute<Eur_m2> Ki_opp_max_w  := Installatie_imp/Ki_opp_max_w [Eur_m2];
		attribute<Eur_m2> Ki_opp_min_u  := Installatie_imp/Ki_opp_min_u [Eur_m2];
		attribute<Eur_m2> Ki_opp_max_u  := Installatie_imp/Ki_opp_max_u [Eur_m2];

		attribute<leerCurves> LeerCurve_rel := MakeDefined(rlookup(LeerCurve, leerCurves/name), rlookup(name, LeerCurves/name), rlookup('Default', LeerCurves/name));

		attribute<_yr>    R_OH    := Installatie_imp/R_OH [_yr];
		attribute<_yr>    R_Adm   := Installatie_imp/R_Adm [_yr];

		attribute<ratio>  AT30    := Installatie_imp/AT30 [ratio];
		attribute<ratio>  AT20    := Installatie_imp/AT20 [ratio];
		attribute<ratio>  AT15    := 1.0 - AT20 - AT30;

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}

	// te lezen van .csv files
	unit<uint32> Performance_imp: StorageName = "%projDir%/installaties/Performance.csv", StorageType = "gdal2.vect", StorageReadOnly = "True"
	{
		attribute<string> Installatie_name; // pk
		attribute<string> schillabel_name;  // bijvoorbeeld A
		attribute<string> ProductType_name; // bijvoorbeeld: RV

		// attributes
		attribute<string> AS_name;    // bijvoorbeel: RAS
		attribute<string> Input_name; // bijvoorbeel: e, H2, of gas
	}

	unit<uint32> Performance := Performance_imp
	,	IntegrityCheck = "# unique(Performance_imp/Installatie_name + '.' + Performance_imp/schillabel_name + '.' + Performance_imp/ProductType_name) == #(Performance_imp)"
	{
		attribute<string> label := Installatie_name + '.' + schillabel_name + '.' + ProductType_name, DialogType = "LabelText";
		attribute<string> code  := label;

		// relatie met andere entiteiten
		attribute<Installatie> Installatie_rel := rlookup(Installatie_name, Installatie/name), IntegrityCheck="IsDefined(this)";
		attribute<SchilLabel>  schillabel_rel  := rlookup(schillabel_name,  schillabel/name ), IntegrityCheck="IsDefined(this) || schillabel_name == 'x'";
		attribute<ProductType> ProductType_rel := rlookup(ProductType_Name, ProductType/name), IntegrityCheck="IsDefined(this) || ProductType_Name == 'e' || ProductType_Name == 'geen'";

		attribute<AfgifteSysteem> AfgifteSysteem_rel := rlookup(AS_Name, AfgifteSysteem/name), IntegrityCheck = "IsDefined(this)";
		attribute<Input>          Input_rel          := rlookup(Input_Name, Input/name),       IntegrityCheck = "IsDefined(this) || Input_name == 'geen'";

		// attributes
		attribute<float64> P_vol := Performance_imp/P_vol[float64]; // aandeel in volume van basislevering (rest is pieklevering, evt door andere installatie)
		attribute<float64> P_cap := Performance_imp/P_cap[float64]; // aandeel in capaciteit van basislevering 
		attribute<float64> SPF_b := Performance_imp/SPF_b[float64], IntegrityCheck = "this != 0.0"; // SPF van basislevering
		attribute<float64> SPF_p := Performance_imp/SPF_p[float64], IntegrityCheck = "this != 0.0"; // SPF van pieklevering

		attribute<GJ_yr_kw> eEffect_cap := Performance_imp/eEffect_cap[GJ_yr_kw];
		attribute<GJ_GJ>    eEffect_vol := Performance_imp/eEffect_vol[GJ_GJ];
		attribute<kW_m2>    Pdak_opp    := Performance_imp/Pdak_opp   [kW_m2];
	}

	unit<uint8> energielabel: nrofrows = 10
	{
		attribute<string> name  : ['AeWP', 'EWV', 'Aplus', 'LabelB', 'LabelC', 'LabelD', 'LabelE', 'LabelF', 'LabelG', 'BeWP'];
		attribute<string> label : DialogType = "LabelText",  ['AeWP', 'EWV', 'A+', 'B', 'C', 'D', 'E', 'F', 'G', 'BeWP'];
				
		attribute<SchilLabel> schillabel_rel := union_data(., 
			schillabel/V/A, schillabel/V/A, 
			schillabel/V/A, schillabel/V/B,
			schillabel/V/C, schillabel/V/D,
			schillabel/V/E, schillabel/V/F,
			schillabel/V/G, schillabel/V/B
		);
		attribute<bool> HasEWP := id(.) == V/AeWP || id(.) == V/BeWP;
		attribute<bool> HasEWV := id(.) == V/EWV;

		attribute<uint32> Color : DialogType = "BrushColor",
		[
			 rgb(000,255,255)
			,rgb(000,255,000)
			,rgb(053,152,000)
			,rgb(114,167,017)
			,rgb(176,196,001)
			,rgb(247,230,000)
			,rgb(251,182,001)
			,rgb(249,097,014)
			,rgb(249,026,031)
			,rgb(114,255,255)
		];
		attribute<uint32> SymbColor := Color, DialogType = "SymbolColor";

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}

	unit<uint32> SchilSprongCode := combine(SchilLabel, SchilLabel);

	unit<uint8> SchilSprongOrg: nrofrows = 6
	{
		attribute<string> label := code + ': '+Descr, DialogType = "LabelText";
		attribute<string> Descr:
		[
			'Van Huidig (E..G) Naar Tussenlabel(C..E)',
			'Van Huidig (C..G) Naar B',
			'Van Huidig( A..G) Naar A+',
			'Van Tussenlabel naar B',
			'Van Tussenlabel naar A+',
			'Van B naar A+'
		];
		attribute<string> code:  DialogType = "LabelText",
		['S_H_T', 'S_H_B', 'S_H_AP', 'S_T_B', 'S_T_AP', 'S_B_AP'];

		attribute<string> code_base: // sprongen zoals gegeven met modelwoning
		['S_H_T', 'S_H_B', 'S_H_AP', 'S_T_B', 'S_T_AP', 'S_B_AP'];

		attribute<string> code_xtra: // sprongen bovenop zoals gegeven met modelwoning
		[ null, null, null, null, null, null];

		attribute<bool> NaWijziging: 
		[false, false, false, true,  true,  true];
	}

	unit<uint8> SchilSprong: nrofrows = 22
	{
		attribute<string> Van:  ['B', 'C', 'C', 'D', 'D', 'D', 'E', 'E', 'E', 'E', 'F', 'F', 'F', 'F', 'G', 'G', 'G', 'G', 'N', 'N', 'N', 'N'];
		attribute<string> Naar: ['A', 'A', 'B', 'A', 'B', 'C', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D'];
		attribute<bool>   bw:   [ 1 ,  1 ,  1 ,  1 ,  1 ,  1 ,  1 ,  1 ,  1 ,  1 ,  1 ,  1 ,  1 ,  1 ,  1 ,  1 ,  1 ,  1 ,  1 ,  1 ,  1 ,  1 ];
		attribute<bool>   bu:   [ 1 ,  1 ,  1 ,  1 ,  1 ,  0 ,  1 ,  1 ,  0 ,  0 ,  1 ,  1 ,  0 ,  0 ,  1 ,  1 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ];
		attribute<bool>   none := const(false, .);

		attribute<SchilLabel>      Van_rel             := rlookup(Van , SchilLabel/name), IntegrityCheck = "IsDefined(this)";
		attribute<SchilLabel>      Naar_rel            := rlookup(Naar, SchilLabel/name), IntegrityCheck = "IsDefined(this)";
		attribute<string>          name                := 'S'+Van+Naar;
		attribute<string>          Descr               := 'Van '+Van+' naar '+Naar;
		attribute<string>          label               := name, DialogType = "LabelText";
		attribute<SchilSprongCode> SchilSprongCode_rel := combine_data(SchilSprongCode, Van_rel, Naar_rel);
	}

	unit<uint8> LabelSprong: nrofrows = 17
	{
		attribute<string> label := code + ': '+Descr, DialogType = "LabelText";
		attribute<string> Descr:
		[
			'Van Huidig (E..G) Naar Tussenlabel(C..E)',
			'Van Huidig (C..G) Naar B',
			'Van Huidig( A..G) Naar A+',
			'Van Tussenlabel naar B',
			'Van Tussenlabel naar A+',
			'Van B naar A+',

			'Van Huidig(C..G) Naar B met eWP',
			'Van Tussenlabel naar B met eWP',
			'Van B naar B met eWP',

			'Van Huidig(C..G) Naar A+ met eWP',
			'Van Tussenlabel naar A+ met eWP',
			'Van B naar A+ met eWP',
			'Van A+ naar A+ met eWP',

			'Van Huidig(C..G) Naar A+ met EWV',
			'Van Tussenlabel naar A+ met EWV',
			'Van B naar A+ met EWV',
			'Van A+ naar A+ met EWV'
		];

		attribute<SchilSprong> SchilSprong_rel: [0, 1, 2, 3, 4, 5, 1, 3, null, 2, 4, 5, null, 2, 4, 5, null];
		attribute<string> code:  DialogType = "LabelText",
		[
			'S_H_T', 'S_H_B',  'S_H_AP',
			'S_T_B', 'S_T_AP', 'S_B_AP',

			'S_H_BeWP', 'S_T_BeWP', 'S_B_BeWP',
			'S_H_AeWP', 'S_T_AeWP', 'S_B_AeWP', 'S_AP_AeWP',
			'S_H_EWV', 'S_T_EWV', 'S_B_EWV', 'S_AP_EWV'
		];

		attribute<string> code_base: // sprongen zoals gegeven met modelwoning
		[
			'S_H_T', 'S_H_B',  'S_H_AP',
			'S_T_B', 'S_T_AP', 'S_B_AP',

			'S_H_B', 'S_T_B', null, // excl LTAS + eWP
			'S_H_AP', 'S_T_AP', 'S_B_AP', null, // excl LTAS + eWP
			'S_H_AP', 'S_T_AP', 'S_B_AP', null  // excl EWV
		];

		attribute<string> code_xtra: // sprongen bovenop zoals gegeven met modelwoning
		[
			 null, null, null,
			 null, null, null,

			'BeWP', 'BeWP', 'BeWP',
			'AeWP', 'AeWP', 'AeWP', 'AeWP',
			'EWV', 'EWV', 'EWV', 'EWV'
		];

		attribute<bool> NaWijziging: [
			false, false, false,
			true,  true, true,

			false, true, false,
			false, true, true, true,
			false, true, true, true
		];
	}

	unit<uint32> LabelBasedOnModelAndObservedValue : nrofrows = 33 // alleen voorzover CurrValue anders moet zijn dan ModelValue
	{
		attribute<EnergieLabel> ModelLabel    : [ 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 2, 2 ];
		attribute<EnergieLabel> ObservedLabel : [ 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 3, 2, 1, 0, 2, 1, 0, 1, 0 ];
		
		
		attribute<LabelSprong>  CurrSprong: [ 0, 0, 1, 1, 2, 2, 2, 0, 1, 1, 2, 2, 2, 0, 0, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2 ];
		attribute<EnergieLabel> CurrLabel : [ 6, 6, 3, 3, 2, 2, 2, 5, 3, 3, 2, 2, 2, 4, 4, 3, 2, 2, 2, 3, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2 ];

		attribute<uint8> code := ModelLabel * uint8(#EnergieLabel) + ObservedLabel;
		
		attribute<SchilLabel>   ModelSchil_rel    := EnergieLabel/Schillabel_rel[ModelLabel];
		attribute<SchilLabel>   ObservedSchil_rel := EnergieLabel/Schillabel_rel[ObservedLabel];
		attribute<SchilLabel>   CurrSchil_rel     := EnergieLabel/Schillabel_rel[CurrLabel];
		
		attribute<uint8> codeSL := ModelSchil_rel * uint8(#SchilLabel) + ObservedSchil_rel;
		
		attribute<string> ModelSchil_name    := SchilLabel/name[ModelSchil_rel   ];
		attribute<string> ObservedSchil_name := SchilLabel/name[ObservedSchil_rel];
		attribute<string> CurrSchil_name     := SchilLabel/name[CurrSchil_rel    ];
	}

// =========  Classificaties overig	
	unit<uint8> LeerCurves : nrofrows = 22
	{
		attribute<string> name: [ 
			'Cmin', 'Bpls', 'Verder', 'mWKK', 'ZonB', 'ZonPV', 'eWPlw', 'eWPww', 'hWP', 'EWV', 
			'LTAS', 'MTnet', 'Inpand', 'Aansl', 'Verl', 'OenM', 'LTnet', 'Infra', 'Waterstof', 'Geothermie', 'HR', 'Default' 
		];
	}

	unit<uint8> GebouwOptie_imp : StorageName = "%projDir%/installaties/GebouwOptie.csv", StorageType = "gdal2.vect", StorageReadOnly = "True"
	{
		attribute<string> name; // PrimaryKey
	}

	unit<uint8> GebouwOptie := GebouwOptie_imp
	{
		attribute<bool>         kanGebiedsOptie := GebouwOptie_imp/kanGebiedsOptie[bool];
		attribute<../DoelLabel> DoelLabel_rel   := rlookup(GebouwOptie_imp/DoelLabel, ../DoelLabel/name);

		container I := Installatie/V;

		container PerProduct := for_each_nedv(
			 Product/name
			,'rlookup(UpperCase(GebouwOptie_imp/'+Product/name+'), UpperCase(Installatie/name))'
			,.
			, Installatie
		);
		
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);

		attribute<WarmteOptie> WarmteOptie_rel := rlookup(name, WarmteOptie/name);

		unit<uint32> xProduct := combine(Product, GebouwOptie)
		{
			attribute<Product>     Product_rel     := nr_1;
			attribute<GebouwOptie> GebouwOptie_rel := nr_2;
			attribute<string>      label           := Product/name[Product_rel] + '.' + GebouwOptie/name[GebouwOptie_rel];
			attribute<Installatie> Installatie_rel := ='union_data(., '+AsItemList('PerProduct/'+Product/name)+')';
		}

		unit<uint32> xInstallatie := combine(GebouwOptie, Installatie);
		unit<uint32> uInstallatie := subset(pcount(combine_data(xInstallatie, xProduct/GebouwOptie_rel, xProduct/Installatie_rel)) > 0) 
		{
			attribute<GebouwOptie> GebouwOptie_rel := xInstallatie/nr_1[nr_OrgEntity];
			attribute<Installatie> Installatie_rel := xInstallatie/nr_2[nr_OrgEntity];
		}
		
		container xProduct_rel := for_each_nedv(Product/name
		,	'combine_data(xProduct, Product/V/'+Product/name+', id(GebouwOptie))'
		,	GebouwOptie, xProduct
		);

		container Installatie_rel := for_each_nedv(Product/name
		,	'xProduct/Installatie_rel[xProduct_rel/'+Product/name+']'
		,	GebouwOptie, Installatie
		);
	}

	unit<uint8> GebiedsOptie : nrofrows = 15 // volgorde niet hier instellen maar in SpecifiekeInstellingen/VoorkEuren/BaseLine/WarmteOpties
	{
		attribute<string> name:
		[
			 'RestWarmte'
			,'GeoThermie'
			,'WijkWKK'
			,'BioWKK'
			,'WKO'
			,'Lt15_30'
			,'Lt15_50'
			,'Lt15_70'
			,'Lt30_30' // Geen collectieve WP.
			,'Lt30_50'
			,'Lt30_70'
			,'TEO'
			,'WaterstofHR'
			,'WaterstofWP'
			,'BuurtWKO'
		];
		attribute<WarmteOptie> WarmteOptie_rel := rlookup(name, WarmteOptie/name); // WarmteOptie is een zelfstandige gebouw-optie of een gebiedsoptie.
		attribute<GebouwOptie> GebouwOptie_rel :=
			id(.) == V/WKO ? GebouwOptie/V/Gebied_mk :
			id(.) == V/WaterstofWP ? GebouwOptie/V/H2WP :
			id(.) == V/WaterstofHR ? GebouwOptie/V/H2R :
			GebouwOptie/V/Gebied_zk;
		attribute<GebouwOptie> GebouwOptie_rel_u :=
			id(.) == V/WKO ? GebouwOptie/V/Gebied_mk :
			id(.) == V/WaterstofWP ? GebouwOptie/V/H2WPu :
			id(.) == V/WaterstofHR ? GebouwOptie/V/H2Ru :
			GebouwOptie/V/Gebied_zk;
			
		attribute<string> code             := string(id(.));
		attribute<bool>   IsPlanRegioOptie : [ true, true, true, true, false, false, false, false, false, false, false, false, true, true, true]; //, false ];
		attribute<bool>   IsMT : [ true, true, true, true, false, 
			false, false, false, false, false, false, 
			false, false, false, false]; //, false ];
		attribute<bool>   IsH2 := id(.) == V/WaterstofHR || id(.) == V/WaterstofWP;
		attribute<bool>   IsLT := not(IsMT) && not(IsH2);

		attribute<string> label := name, DialogType = "LabelText";
		attribute<uint32> Color : DialogType = "BrushColor",
		[
			 rgb(150,  0,  0)
			,rgb(  0,  0,150)
			,rgb(128,128,  0)
			,rgb(  0,255,128)
			,rgb(  0,150,  0)
			,rgb(255,130,  0) // oranje
			,rgb(255,155,  0) // geel
			,rgb(255,180,  0) // geel
			,rgb(255,205,  0) // geel
			,rgb(255,230,  0) // geel
			,rgb(255,255,  0) // geel
			,rgb(255,130,  0) // oranje
			,rgb(100,000,100) // paars
			,rgb(100,040,100) // paars
			,rgb(255,100,  0) // oranje
		];
		attribute<uint32> SymbolColor := Color, DialogType = "SymbolColor";
		attribute<uint32> PenColor    := Color, DialogType = "PenColor";

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	unit<uint8> WarmteOptie := union_unit_uint8(GebouwOptie, GebiedsOptie)
	{
		attribute<string> name            := union_data(., GebouwOptie/name, GebiedsOptie/name);
		attribute<bool>   isGebiedsOptie  := union_data(., const(false, GebouwOptie), const(true, GebiedsOptie));
		attribute<bool>   kanGebiedsOptie := union_data(., GebouwOptie/kanGebiedsOptie, const(false, GebiedsOptie));
		attribute<bool>   IsMT            := union_data(., const(false, GebouwOptie), GebiedsOptie/IsMT);
		attribute<bool>   IsLT            := union_data(., const(false, GebouwOptie), GebiedsOptie/IsLT);
		attribute<bool>   IsH2            := union_data(., const(false, GebouwOptie), GebiedsOptie/IsH2);

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		attribute<string> LabelText := name;
	}

	unit<uint8> PlanRegioOptie := subset(GebiedsOptie/IsPlanRegioOptie) 
	{
		attribute<string> code := GebiedsOptie/code[nr_OrgEntity];
		attribute<string> name := GebiedsOptie/name[nr_OrgEntity];
	}

	unit<uint8> ClusterOptie := subset(!GebiedsOptie/IsPlanRegioOptie) 
	{
		attribute<string> code := GebiedsOptie/code[nr_OrgEntity];
		attribute<string> name := GebiedsOptie/name[nr_OrgEntity];
	}
// =========  Classificaties voor montaire /actor units

	unit<uint32> Kostensoort : nrofrows = 28
	{
		parameter<uint32> nrAttr := 4;
		unit<uint32> Elements := Range(uint32, 0, nrAttr * #.)
		{
			attribute<string> values:
			[
				//name                   ,IsMaatschappelijkeKosten ,IsOverheid
				 'Netwerk'               ,'True'                   ,'False', ''
				,'GasNet'                ,'False'                  ,'True',  ''
				,'ElektriciteitsNet'     ,'False'                  ,'True',  ''
				,'AardGas'               ,'True'                   ,'False',  ''
				,'Elektriciteit'         ,'True'                   ,'False',  ''
				,'LokaleOpwekking'       ,'True'                   ,'False',  ''
				,'Gebouw'                ,'True'                   ,'False',  ''
				,'Onderhoud'             ,'True'                   ,'False',  ''
				,'Admin'                 ,'True'                   ,'False',  ''
				,'Comfort'               ,'True'                   ,'False',  ''
				,'InpandigeDistributie'  ,'True'                   ,'False',  ''
				,'WijkDistributie'       ,'True'                   ,'False',  ''
				,'PrimairTransport'      ,'True'                   ,'False',  ''
				,'Opwekking'             ,'True'                   ,'False',  ''
				,'WarmteInkoop'          ,'True'                   ,'False',  ''
				,'GebouwEigenaar'        ,'False'                  ,'False',  'ge'
				,'InpandigeDistributEur' ,'False'                  ,'False',  'id'
				,'WijkDistributEur'      ,'False'                  ,'False',  'wd'
				,'PrimairTransportEur'   ,'False'                  ,'False',  'pt'
				,'Opwekker'              ,'False'                  ,'False',  'ow'
				,'Leverancier'           ,'False'                  ,'False',  ''
				,'KL_p'                  ,'False'                  ,'False',  ''
				,'KL_e'                  ,'False'                  ,'False',  ''
				,'EmissieRechten'        ,'True'                   ,'False',  ''
				,'BTW'                   ,'False'                  ,'True',   ''
				,'Precario'              ,'False'                  ,'True',   ''
				,'EnergieHeffing'        ,'False'                  ,'True',   ''
				,'Subsidie'              ,'False'                  ,'True',   ''
			];
		}
		attribute<string> name                     :=      Elements/values[value(id(.) * nrAttr + 0,Elements)];
		attribute<bool>   IsMaatschappelijkeKosten := bool(Elements/values[value(id(.) * nrAttr + 1,Elements)]);
		attribute<bool>   IsOverheid               := bool(Elements/values[value(id(.) * nrAttr + 2,Elements)]);
		attribute<string> GebiedsOptieActorCode    :=      Elements/values[value(id(.) * nrAttr + 3,Elements)];
	}

	unit<uint32> Actor := union_unit(Kostensoort, BebouwingsComponent, BebouwingsComponent, GebiedsOptie)
	{
		attribute<string> BaseName                 := union_data(., Kostensoort/name, BebouwingsComponent/name, BebouwingsComponent/name,  GebiedsOptie/name);
		attribute<string> name                     := union_data(., Kostensoort/name, BebouwingsComponent/name + '/Eigenaar', BebouwingsComponent/name + '/Gebruiker', GebiedsOptie/name);
		attribute<string> full_name                := replace(name, '/', '_');
		attribute<bool>   IsMaatschappelijkeKosten := union_data(., Kostensoort/IsMaatschappelijkeKosten, const(false, BebouwingsComponent), const(false, BebouwingsComponent), const(false, GebiedsOptie));
		attribute<bool>   IsOverheid               := union_data(., Kostensoort/IsOverheid, const(false, BebouwingsComponent), const(false, BebouwingsComponent), const(false, GebiedsOptie));
		attribute<string> GebiedsOptieActorCode    := union_data(., Kostensoort/GebiedsOptieActorCode, const('', BebouwingsComponent), const('', BebouwingsComponent), const('', GebiedsOptie));
	}

	unit<uint32> GebiedsOptieActor := subset(Actor/GebiedsOptieActorCode <> '')
	{
		attribute<string> name := Actor/name[nr_OrgEntity];
		attribute<string> code := Actor/GebiedsOptieActorCode[nr_OrgEntity];
		attribute<string> label := code;
		
		container V := for_each_nedv(code, string(id(.))+'[..]', void, .);
	}

	unit<uint8> GebiedsOptie_jaarlijks : nrofrows = 72
	{
		attribute<string> name: [
			'Kj_ge_hv' , 'Kji_ge_ov', 'Kji_ge_pm'   , 'Kmi_ge_ov'    , 'Kmi_ge_pm' , 'Om_ge_comfort', 'Bji_ge_Aansl', 'Oji_ge_EIA', 'Omi_ge_EIA',
			'Kj_id_gas', 'Km_id_gas', 'Kj_id_gas_EH', 'Kj_id_gas_CO2', 'Kj_id_elek', 'Km_id_elek'   , 'Kj_id_elek_EH', 'Kj_id_elek_CO2',
			'Kj_id_oh' , 'Kj_id_adm', 'Kji_id'      , 'Kmi_id'       , 'Oji_id_EIA', 'Omi_id_EIA'   , 'Oj_id_SDE',
			'Kj_wd_gas', 'Km_wd_gas', 'Kj_wd_gas_EH', 'Kj_wd_gas_CO2', 'Kj_wd_elek', 'Km_wd_elek'   , 'Kj_wd_elek_EH', 'Kj_wd_elek_CO2',
			'Kj_wd_oh' , 'Kj_wd_adm', 'Kji_wd'      , 'Kmi_wd'       , 'Oji_wd_EIA', 'Omi_wd_EIA'   , 'Oj_wd_SDE',
			'Kj_pt_oh' , 'Kj_pt_adm', 'Kji_pt'      , 'Kmi_pt'       , 'Oji_pt_EIA', 'Omi_pt_EIA'   ,
			'Kj_ow_gas', 'Km_ow_gas', 'Kj_ow_gas_EH', 'Kj_ow_gas_CO2', 'Kj_ow_elek', 'Km_ow_elek'   , 'Kj_ow_elek_EH', 'Kj_ow_elek_CO2', 
			'Kj_ow_productie', 
			'Kj_ow_oh' , 'Kj_ow_adm', 'Kji_ow'      , 'Kmi_ow'       , 'Oji_ow_EIA', 'Omi_ow_EIA'   , 'Oj_ow_SDE',
			'Oji_lv_Aansl', 'Omi_lv_Aansl', 'Oj_lv_verbruik', 'Oj_lv_vastrecht', 'Oj_lv_SDE',
			'Kji_wd_Gnet' , 'Kmi_wd_Gnet', 'Kj_wd_Gnet_oh',
			'Kji_id_LO'   , 'Kmi_id_LO', 'Kj_id_LO_oh'
			];
		attribute<string> actor_code: [
			'ge', 'ge', 'ge', 'ge', 'ge', 'ge', 'ge', 'ge', 'ge',
			'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 
			'id', 'id', 'id', 'id', 'id', 'id', 'id', 
			'wd', 'wd', 'wd', 'wd', 'wd', 'wd', 'wd', 'wd', 
			'wd', 'wd', 'wd', 'wd', 'wd', 'wd', 'wd', 
			'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 
			'ow', 'ow', 'ow', 'ow', 'ow', 'ow', 'ow', 'ow', 
			'ow',
			'ow', 'ow', 'ow', 'ow', 'ow', 'ow', 'ow', 
			'lv', 'lv', 'lv', 'lv', 'lv',
			'wd', 'wd', 'wd',
			'id', 'id', 'id'
		];
		attribute<GebiedsOptieActor> GebiedsOptieActor_rel := rlookup(actor_code, GebiedsOptieActor/code);
		attribute<bool> leverancier_vergoed: [
			true , true , true , false, false, true , false, true , true,
			true , false, false, false, true , false, false, false,
			true , true , true , false, true , false, true , 
			true , false, false, false, true , false, false, false,
			true , true , true , false, true , false, true , 
			true , true , true , false, true , false,  
			true , false, false, false, true , false, false, false,
			true ,
			true , true , true , false, true , false, true ,
			false, false, false, false, false,
			true , true , true,
			true , true , true
		];

		attribute<string> GebiedsOptie_Expr(GebiedsOptieActor) := 'add('+AsItemList(leverancier_vergoed ? 'StateNaAllocatie/Cumulaties/@RO@/jaarlijks/'+full_name: '' ,GebiedsOptieActor_rel)+')';

		attribute<string> descr: [
			'Huurverlaging_@RO@', 'ongeriefsvergoeding_E@RO@', 'projectmanagement_E@RO@', 'ongeriefsvergoeding_M@RO@', 'projectmanagement_M@RO@', 'Koude_@RO@', 'Aansluitbijdrage@RO@', 'Oji_ge_EIA_@RO@', 'Omi_ge_EIA_@RO@',
			'', '@RO@_bijstook_id', '@RO@_bijstook_id_gas', '@RO@_bijstook_id_gas_CO2', '', '@RO@_bijstook_id', '@RO@_bijstook_id_elek', '@RO@_bijstook_id_elek_CO2',
			'Kj_id_oh_@RO@', 'Kj_id_adm_@RO@', '@RO@', '@RO@', 'Oji_id_EIA_@RO@', 'Omi_id_EIA_@RO@',  'Oj_id_SDE_@RO@',
			'', '@RO@_bijstook_wd_gas', '@RO@_bijstook_wd_gas', '@RO@_bijstook_wd_gas_CO2', '', '@RO@_bijstook_wd_elek', '@RO@_bijstook_wd_elek', '@RO@_bijstook_wd_elek_CO2',
			'Kj_wd_oh_@RO@', 'Kj_wd_adm_@RO@', 'Kji_wd_@RO@', 'Kmi_wd_@RO@', 'Oji_wd_EIA_@RO@', 'Omi_wd_EIA_@RO@',  'Oj_wd_SDE_@RO@',
			'Kj_pt_oh_@RO@', 'Kj_pt_adm_@RO@', 'Kji_pt_@RO@', 'Kmi_pt_@RO@', 'Oji_pt_EIA_@RO@', 'Omi_pt_EIA_@RO@', 
			'', 'Km_ow_gas', 'Kj_ow_gas_EH', 'Kj_ow_gas_CO2_@RO@', '', 'Km_ow_elek', 'Kj_ow_elek_EH', 'Kj_ow_elek_CO2_@RO@',			
			'Kj_ow_productie', 
			'Kj_ow_oh', 'Kj_ow_adm', 'Kji_ow', 'Kmi_ow_@RO@', 'Oji_ow_EIA', 'Omi_ow_EIA_@RO@',  'Oj_ow_SDE',
			'Oji_lv_Aansl', 'Omi_lv_Aansl', 'Oj_lv_verbruik_@RO@', 'Oj_lv_vastrecht_@RO@', 'Oj_lv_SDE_@RO@',
			'Kji_wd_Gnet@RO@', 'Kmi_wd_Gnet@RO@', 'Kj_wd_Gnet_oh@RO@',
			'Kji_id_LO@RO@'  , 'Kmi_id_LO@RO@' , 'Kj_id_LO_oh@RO@'
		];
		attribute<string> full_name := actor_code + '/' + name;
		attribute<string> leverancier : [
			'Comfort', 'KL_e', 'KL_e', 'Comfort', 'Admin', 'BestaandeWoning/Gebruiker', 'KL_e', 'BestaandeWoning/Eigenaar', 'KL_e'
		,	'', 'AardGas', 'EnergieHeffing', 'EmissieRechten', '', 'Elektriciteit', 'EnergieHeffing', 'EmissieRechten'
		,	'Onderhoud', 'Admin', 'KL_p', 'InpandigeDistributie', 'InpandigeDistributEur', 'KL_p',   'InpandigeDistributEur'
		,	'', 'AardGas', 'EnergieHeffing', 'EmissieRechten', '', 'Elektriciteit', 'EnergieHeffing', 'EmissieRechten'
		,	'Onderhoud', 'Admin', 'KL_p', 'WijkDistributie', 'WijkDistributEur', 'KL_p',   'WijkDistributEur'
		,	'Onderhoud', 'Admin', 'KL_p', 'PrimairTransport', 'PrimairTransportEur', 'KL_p'
		,	'', 'AardGas', 'EnergieHeffing', 'EmissieRechten', '', 'Elektriciteit', 'EnergieHeffing', 'EmissieRechten'
		,	'WarmteInkoop'
		,	'Onderhoud', 'Admin', 'KL_p', 'Opwekking', '@RO@', 'KL_p',  '@RO@'
		,	'', '', '', '', 'Leverancier'
		,	'GasNet', 'GasNet', 'Onderhoud'
		,	'LokaleOpwekking','LokaleOpwekking','Onderhoud'
		];
		// TODO_OV: checken dat wat hier aan BestaandeWoning/xxx geleverd zou worden niet aan andere BC geleverd zou moeten worden.
		attribute<string> afnemer : [
			'BestaandeWoning/Eigenaar', 'BestaandeWoning/Eigenaar', 'BestaandeWoning/Eigenaar','KL_e','KL_e', 'Comfort','BestaandeWoning/Eigenaar', 'KL_e', 'Subsidie'
		,	'', 'InpandigeDistributEur', 'InpandigeDistributEur', 'AardGas', '', 'InpandigeDistributEur', 'InpandigeDistributEur', 'Elektriciteit'
		,	'InpandigeDistributEur', 'InpandigeDistributEur', 'InpandigeDistributEur', 'KL_p', 'KL_p', 'Subsidie',  'Subsidie'
		,	'', 'WijkDistributEur', 'WijkDistributEur', 'AardGas', '', 'WijkDistributEur', 'WijkDistributEur', 'Elektriciteit'
		,	'WijkDistributEur', 'WijkDistributEur', 'WijkDistributEur', 'KL_p', 'KL_p', 'Subsidie',  'Subsidie'
		,	'PrimairTransportEur', 'PrimairTransportEur', 'PrimairTransportEur', 'KL_p', 'KL_p', 'Subsidie'
		,	'', '@RO@', '@RO@', 'AardGas', '', '@RO@', '@RO@', 'Elektriciteit'
		,	'@RO@'
		,	'@RO@', '@RO@', '@RO@', 'KL_p', 'KL_p', 'Subsidie', 'Subsidie'
		,	'', '', '', '', 'Subsidie'
		,	'WijkDistributEur','WijkDistributEur','WijkDistributEur'
		,	'InpandigeDistributEur','InpandigeDistributEur','InpandigeDistributEur'
		];
	}
	unit<uint8> GebiedsOptie_eenmalig : nrofrows = 14
	{
		attribute<string> name: [ 
			'Oi_lv_Aansl', 'Ki_ge_ov', 'Ki_ge_pm', 'Oi_ge_EIA',
			'Ki_id', 'Oi_id_EIA', 
			'Ki_wd', 'Oi_wd_EIA',
			'Ki_pt', 'Oi_pt_EIA', 
			'Ki_ow', 'Oi_ow_EIA',
			'Ki_wd_Gnet',
			'Ki_id_LO'
		];

		attribute<string> actor_code: [ 
			'lv', 'ge', 'ge', 'ge',
			'id', 'id', 
			'wd', 'wd', 
			'pt', 'pt', 
			'ow', 'ow',
			'wd',
			'id'
		];

		attribute<string> descr := name + (leverancier == '@RO@' || afnemer == '@RO@' ? '' : '_@RO@');
		attribute<string> full_name := name;

		attribute<string> leverancier : [
			'Leverancier', 'Comfort', 'Admin', 'BestaandeWoning/Eigenaar', 
			'InpandigeDistributie', 'InpandigeDistributEur', 
			'WijkDistributie', 'WijkDistributEur',
			'PrimairTransport', 'PrimairTransportEur',
			'Opwekking', '@RO@',
			'GasNet',
			'LokaleOpwekking'
		];
		attribute<string> afnemer : [
			'BestaandeWoning/Eigenaar',	'BestaandeWoning/Eigenaar', 'BestaandeWoning/Eigenaar', 'Subsidie', 
			'InpandigeDistributEur', 'Subsidie', 
			'WijkDistributEur', 'Subsidie',
			'PrimairTransportEur', 'Subsidie',
			'@RO@', 'Subsidie',
			'WijkDistributEur',
			'InpandigeDistributEur'
		];
	}
	unit<uint8> GebiedsOptie_Verbruik: nrofrows = 12
	{
		attribute<string> name: [  
			'V_id_gas',  'V_wd_gas',  'V_ow_gas', 
			'V_id_elek', 'V_wd_elek', 'V_ow_elek', 
			'V_id_verlies', 'V_wd_verlies', 'V_pt_verlies', 
			'V_warmte', 'V_koude',
			'V_H2'
		];
		attribute<string> actor_code: [ 
			'id', 'wd', 'ow', 
			'id', 'wd', 'ow', 
			'id', 'wd', 'pt', 
			'', '',
			''
		];
		attribute<string> full_name := name;
	}

	unit<uint8> GebiedsOptie_Uitstoot: nrofrows = 6
	{
		attribute<string> name: [  'CO2_id_gas', 'CO2_wd_gas', 'CO2_ow_gas', 'CO2_id_elek', 'CO2_wd_elek', 'CO2_ow_elek' ];
		attribute<string> actor_code: [ 'id', 'wd', 'ow', 'id', 'wd', 'ow'];
	}

	unit<uint8> Eur_M2_15K: nrofrows = 15
	{
		attribute<Eur_M2> ClassBreaks: DialogType = "Classification",
			[	-500,-25, -15
			,	-5, -0.01, 0.01
			,	2, 3, 4
			,	5, 6, 8
			,	10, 15, 25
			];

		attribute<uint32> BrushColor: DialogType = "BrushColor",
			[rgb(  9,  9,145),rgb( 34, 89,194),rgb( 92,163,230),rgb(182,237,240),rgb(196,196,196),
			 rgb(255,245,  0),rgb(255,216,  0),rgb(255,180,  0),
			 rgb(255,163,  0),rgb(255,140,  0),rgb(255,132,  0),rgb(255,128,0),rgb(255,51,0),rgb(230,0,0), rgb(153,0,0)];

		attribute<string> label: DialogType = "LabelText",
			[' < -25','-25 tot -15','-15 tot -5',' -5 tot 0','     0     ','  0 tot  2','  2 tot  3','  3 tot  4','  4 tot  5',
			'  5 tot  6','  6 tot  8','  8 tot 10',' 10 tot 15',' 15 tot 25',' > 25'];
	}

// =========  Classificaties voor Percentages
	unit<uint8> Percentage13K: nrofrows = 13
	{
		attribute<percent> ClassBreaks: DialogType = "Classification",
			[0,10,20,30,40,50,60,70,80,90,100,120,150];

		attribute<uint32> BrushColor : DialogType = "BrushColor",
			[
				 rgb(255,255,255),rgb(255,229,204),rgb(255,204,153)
				,rgb(255,178,102),rgb(255,153, 51),rgb(255,128,  0)
				,rgb(223, 96, 32),rgb(191, 64, 64),rgb(180,  0,  0)
				,rgb(120,  0,  0),rgb( 60,  0,  0),rgb(120,  0,128),rgb(255,  0,200)
			];

		attribute<string> label : DialogType = "LabelText",
			[' 0 -  10','10 -  20','20 -  30','30 -  40','40 -  50','50 -  60','60 -  70','70 -  80','80 -  90','90 - 100','100- 120','120- 150','150- 200'];
	}

	unit<uint8> ratio9K: nrofrows = 9
	{
		attribute<ratio> ClassBreaks: DialogType = "Classification",
			[0,0.0001,0.15,0.30,0.45,0.60,0.75,0.90,1.05];

		attribute<uint32> BrushColor: DialogType = "BrushColor",
			[
				 rgb(218,218,218), rgb(255,255,204),rgb(255,255,128)
				,rgb(255,230,102), rgb(255,179, 51),rgb(255,128,  0)
				,rgb(255, 51,  0), rgb(230,  0,  0),rgb(153,  0,  0)
			];

		attribute<uint32> SymbolColor:= BrushColor, DialogType = "SymbolColor";

		attribute<string> label : DialogType = "LabelText",
			[' 0 ', '0    - 0.15', '0.15 - 0.30', '0.30 - 0.45', '0.45 - 0.60', '0.60 - 0.75', '0.75 - 0.90', '0.90 - 1.05', '> 1.05'];
	}

// =========  Classificatie voor Potentiaal (eenheidsloos)
	unit<uint8> Potentiaal10K: nrofrows = 10
	{
		attribute<potentiaal> ClassBreaks: DialogType = "Classification",
			[0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9];

		attribute<uint32> BrushColor: DialogType = "BrushColor",
			[rgb(192,192,192),rgb(0,0,255),rgb(0,64,192),rgb(0,128,128),rgb(0,192,64),rgb(0,255,0),rgb(64,192,0),rgb(128,128,0),rgb(192,64,0),rgb(255,0,0)];

		attribute<string> label: DialogType = "LabelText",
			['0.00 - 0.10','0.10 - 0.20','0.20 - 0.30','0.30 - 0.40','0.40 - 0.50','0.50 - 0.60','0.60 - 0.70','0.70 - 0.80','0.80 - 0.90','0.90 - 1.00'];
	}

// =========  Classificatie voor afstanden in km
	unit<uint8> km_7k: nrofrows = 8
	{
		attribute<km> ClassBreaks: DialogType = "Classification",
			[0,5,10,15,30,50,75,100];

		attribute<uint32> BrushColor: DialogType = "BrushColor",
			[rgb(0,0,255),rgb(85,85,170),rgb(170,170,85),rgb(255,255,0),rgb(255,204,0),rgb(255,153,0),rgb(255,102,0),rgb(192,192,192)];

		attribute<string> label: DialogType = "LabelText",
			['0 to 5','5 to 10','10 to 15','15 to 30','30 to 50','50 to 75','75 to 100','Geen'];
	}

// =========  Classificatie voor de vervangingsstatus van Gasleidingen beheerd door Stedin
	unit<uint8> CategorieKl: nrofrows = 3
	{
		attribute<string> label: DialogType = "LabelText",
		[
			 'Jonger dan 30 jaar'
			,'Ouder dan 30 jaar'
			,'Te vervangen'
		];
		attribute<uint32> SymbolColor: DialogType = "PenColor",
		[
			 rgb(100,100,100)
			,rgb(200,200,200)
			,rgb(  0,  0,  0)
		];
	}

// =========  Classificaties van combinaties (carthesianse producten) van class domains
	container combines
	{
		unit<uint8> WoningtypeBouwjaarBestaand := combine_uint8(WoningtypeBestaand, BouwjaarWoningBestaand)
		{
			attribute<string> LabelWoningtype := WoningtypeBestaand/label[nr_1];
			attribute<string> LabelBouwjaar   := BouwjaarWoningBestaand/label[nr_2];
			attribute<string> label           := LabelWoningtype + '_' + LabelBouwjaar;
			attribute<BouwjaarWoningBestaandRapportage> BouwjaarWoningBestaandRapportage_rel := 
				BouwjaarWoningBestaand/BouwjaarWoningBestaandRapportage_rel[nr_2];
		}
		
	
		unit<uint8> WoningtypeBouwjaarBestaandRapportage := combine_uint8(WoningtypeBestaand, BouwjaarWoningBestaandRapportage)
		{
			attribute<string> LabelWoningtype := WoningtypeBestaand/Label[nr_1];
			attribute<string> LabelBouwjaar   := BouwjaarWoningBestaandRapportage/Label[nr_2];
			attribute<string> Label           := LabelWoningtype + '_' + LabelBouwjaar;
		}

		unit<uint32> ZichtJaarWonen := combine(ZichtJaar, WoningtypeNieuwbouw) // wordt gebruikt om Nieuwbouw maps en ResterdFactorMaps te lezen.
		{
			attribute<bool>                HasMutations            := ZichtJaar/HasMutations[nr_1];
			attribute<string>              ZichtJaar_label         := ZichtJaar/label[nr_1];
			attribute<string>              ZichtJaar_name          := ZichtJaar/name[nr_1];
			attribute<string>              prev_ZichtJaar_name     := ZichtJaar/name[sub_or_null(nr_1, 1b)];
			attribute<units/yr_uint16>     ZichtJaar_jaar          := ZichtJaar/Jaar[nr_1];
			attribute<string>              period_name             := ZichtJaar/period_name[nr_1];
			attribute<string>              Wonen_Name              := WoningtypeNieuwbouw/name[nr_2];
			attribute<string>              Wonen_wlo_FileName      := WoningtypeNieuwbouw/wlo_FileName[nr_2];
			attribute<WoningtypeNieuwbouw> WoningtypeNieuwbouw_rel := nr_2;
			attribute<string>              name                    := ZichtJaar_Name + '/' + Wonen_Name;
			attribute<string>              prev_name               := prev_ZichtJaar_Name + '/' + wonen_Name;
			attribute<string>              label                   := name;

			container V := for_each_nedv(name, 'value('+string(id(.))+', ...)', void, .);
		}

		unit<uint8> UtiltypeBouwjaarBestaand := combine_uint8(UtiltypeBestaand, BouwjaarUtilBestaand)
		{
			attribute<string> LabelUtiltype := UtiltypeBestaand/label[nr_1];
			attribute<string> LabelBouwjaar   := BouwjaarUtilBestaand/label[nr_2];
			attribute<string> label           := LabelUtiltype + '_' + LabelBouwjaar;
		}

		unit<uint8> GLTBBouwJaarNieuw := combine_uint8(GLTB, BouwJaar);

		unit<uint32> ZichtJaarUtiliteit := combine(ZichtJaar, UtilTypeNieuwbouw)
		{
			attribute<bool>            HasMutations            := ZichtJaar/HasMutations[nr_1];
			attribute<string>          ZichtJaar_label         := ZichtJaar/label[nr_1];
			attribute<string>          ZichtJaar_name          := ZichtJaar/name[nr_1];
			attribute<string>          prev_ZichtJaar_name     := ZichtJaar/name[sub_or_null(nr_1, 1b)];
			attribute<units/yr_uint16> ZichtJaar_jaar          := ZichtJaar/Jaar[nr_1];
			attribute<string>          period_name             := ZichtJaar/period_name[nr_1];
			attribute<string>          utiliteit_Name          := UtilTypeNieuwbouw/name[nr_2];
			attribute<string>          wlo_filename_Nieuwbouw  := UtilTypeNieuwbouw/wlo_filename_Nieuwbouw[nr_2];
			attribute<string>          name                    := ZichtJaar_Name + '/' + utiliteit_Name;
			attribute<string>          prev_name               := prev_ZichtJaar_Name + '/' + utiliteit_Name;
			attribute<string>          label                   := name;
		}

		unit<uint32> LabelChange := combine(energielabel, LabelSprong)
		{
			attribute<string> label := LabelSprong/code[nr_2]+': van ' + energieLabel/label[nr_1] + ' naar ' + energieLabel/label[Label_na], DialogType = "LabelText";
	
			attribute<energielabel> Label_na: [
			//  org   org   org   new   new   new   org    new   new   new    org    new   new   new
			//	EG_T  CG_B  BG_AP T_B   T_AP  B_AP  AG_eWP T_eWP B_eWP AP_eWP AG_EWV T_EWV B_EWV AP_EWV'
			
			//  H_T, H_B, H_AP, T_B, T_AP, B_AP, H_BeWP, T_BeWP, B_BeWP, H_AeWP, T_AeWP, B_AeWP, A_AeWP, H_EWV, T_EWV, B_EWV, A_EWV,
				0  , 0  , 0   , 0  , 0   , 0   , 0     , 0     , 0     , 0     , 0     , 0     , 0     , 0    , 0    , 0    , 0    ,	// sprongen vanaf AeWP (0)
				1  , 1  , 1   , 1  , 1   , 1   , 1     , 1     , 1     , 1     , 1     , 1     , 1     , 1    , 1    , 1    , 1    ,	// sprongen vanaf EWV  (1)
				2  , 2  , 2   , 2  , 2   , 2   , 9     , 9     , 9     , 0     , 0     , 0     , 0     , 1    , 1    , 1    , 1    ,	// sprongen vanaf A+   (2)
				3  , 3  , 2   , 3  , 2   , 2   , 9     , 9     , 9     , 0     , 0     , 0     , 0     , 1    , 1    , 1    , 1    ,	// sprongen vanaf B    (3)
				3  , 3  , 2   , 3  , 2   , 2   , 9     , 9     , 9     , 0     , 0     , 0     , 0     , 1    , 1    , 1    , 1    ,	// sprongen vanaf C    (4, evt als zijnde Tussenlabel)
				3  , 3  , 2   , 3  , 2   , 2   , 9     , 9     , 9     , 0     , 0     , 0     , 0     , 1    , 1    , 1    , 1    ,	// sprongen vanaf D    (5, evt als zijnde Tussenlabel)
				4  , 3  , 2   , 3  , 2   , 2   , 9     , 9     , 9     , 0     , 0     , 0     , 0     , 1    , 1    , 1    , 1    ,	// sprongen vanaf E    (6, evt als zijnde Tussenlabel)
				5  , 3  , 2   , 3  , 2   , 2   , 9     , 9     , 9     , 0     , 0     , 0     , 0     , 1    , 1    , 1    , 1    ,	// sprongen vanaf F    (7)
				6  , 3  , 2   , 3  , 2   , 2   , 9     , 9     , 9     , 0     , 0     , 0     , 0     , 1    , 1    , 1    , 1    ,	// sprongen vanaf G    (8)
				9  , 9  , 9   , 9  , 9   , 9   , 9     , 9     , 9     , 9     , 9     , 9     , 9     , 9    , 9    , 9    , 9    		// sprongen vanaf BeWP (9)
			];
		}
	}
}