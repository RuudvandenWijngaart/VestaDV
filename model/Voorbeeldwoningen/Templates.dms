//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2021 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////
container Templates
{
	template BouwdeelInformatie
	{
		// inputs
		parameter<uint32> Bouwdelen_vbw_dataset_rel;
		// end inputs
		
		attribute<Classifications/Bouwdeel> Bouwdeel_rel (Bouwdelen_vbw_dataset):= Bouwdelen_vbw_dataset/org_rel;
		
		parameter<string> bouwdeel_name := Bouwdelen_vbw_dataset/name[Bouwdelen_vbw_dataset_rel];
		parameter<string> label_vbw := /Invoer/voorbeeldwoningen/Bouwdelen_vbw_dataset/label_vbw[Bouwdelen_vbw_dataset_rel];
		attribute<uint32> bouwjaar (vbw):= /Invoer/voorbeeldwoningen/vbw_data/bouwjaar[vbw/org_rel][uint32];
		
		unit<uint32> vooroorlogs := select_with_org_rel(vbw/bouwjaar < 1946[uint16])
		{
			parameter<string> oppervlak_str := = 
			"or(strcount(bouwdeel_name, 'MS') > 0, strcount(bouwdeel_name, 'PL') > 0)
				? 'const(0[m2],.)'
			:strcount(bouwdeel_name, 'DR') > 0 
				? replace('vbw_data/@BD@_1_oppervlakte[vbw/org_rel][org_rel][m2] + vbw_data/@BD@_2_oppervlakte[vbw/org_rel][org_rel][m2]','@BD@',label_vbw)
			:strcount(bouwdeel_name, 'DS') > 0 
				? replace('vbw_data/@BD@_1_oppervlakte[vbw/org_rel][org_rel][m2] + vbw_data/@BD@_2_oppervlakte[vbw/org_rel][org_rel][m2]','@BD@',label_vbw)
			:strcount(bouwdeel_name, 'DP') > 0 
				? replace('vbw_data/@BD@_3_oppervlakte[vbw/org_rel][org_rel][m2] + vbw_data/@BD@_4_oppervlakte[vbw/org_rel][org_rel][m2]','@BD@',label_vbw)
			: strcount(bouwdeel_name, 'KR') > 0
				? 'Oppervlakte[org_rel]'
			: replace('vbw_data/@BD@_1_oppervlakte[vbw/org_rel][org_rel][m2] + vbw_data/@BD@_2_oppervlakte[vbw/org_rel][org_rel][m2] + vbw_data/@BD@_3_oppervlakte[vbw/org_rel][org_rel][m2] + vbw_data/@BD@_4_oppervlakte[vbw/org_rel][org_rel][m2]','@BD@',label_vbw)
			";
		
			attribute<m2> Oppervlak (.) := ='MakeDefined('+oppervlak_str+', 0[m2])';
		
		}
		
		unit<uint32> naoorlogs := select_with_org_rel(vbw/bouwjaar >= 1946[uint16])
		{
			parameter<string> oppervlak_str := = 
			"or(strcount(bouwdeel_name, 'MG') > 0, strcount(bouwdeel_name, 'PL') > 0)
				? 'const(0[m2],.)'
			:strcount(bouwdeel_name, 'DR') > 0 
				? replace('vbw_data/@BD@_1_oppervlakte[vbw/org_rel][org_rel][m2] + vbw_data/@BD@_2_oppervlakte[vbw/org_rel][org_rel][m2]','@BD@',label_vbw)
			:strcount(bouwdeel_name, 'DS') > 0 
				? replace('vbw_data/@BD@_1_oppervlakte[vbw/org_rel][org_rel][m2] + vbw_data/@BD@_2_oppervlakte[vbw/org_rel][org_rel][m2]','@BD@',label_vbw)
			:strcount(bouwdeel_name, 'DP') > 0 
				? replace('vbw_data/@BD@_3_oppervlakte[vbw/org_rel][org_rel][m2] + vbw_data/@BD@_4_oppervlakte[vbw/org_rel][org_rel][m2]','@BD@',label_vbw)
			: strcount(bouwdeel_name, 'KR') > 0
				? 'Oppervlakte[org_rel]'
			: replace('vbw_data/@BD@_1_oppervlakte[vbw/org_rel][org_rel][m2] + vbw_data/@BD@_2_oppervlakte[vbw/org_rel][org_rel][m2] + vbw_data/@BD@_3_oppervlakte[vbw/org_rel][org_rel][m2] + vbw_data/@BD@_4_oppervlakte[vbw/org_rel][org_rel][m2]','@BD@',label_vbw)
			";
		
			attribute<units/m2> Oppervlak (.) := ='MakeDefined('+oppervlak_str+', 0[m2])';
		
		}
		
		attribute<units/m2> oppervlak (vbw) := vbw/bouwjaar < 1946[uint16] ? vooroorlogs/oppervlak[invert(vooroorlogs/org_rel)] : naoorlogs/oppervlak[invert(naoorlogs/org_rel)];
		
		parameter<string> Isolatiewaarde_str := = 
		"strcount(bouwdeel_name, 'PL') > 0
			? 'const(0[float64],vbw)'
		: strcount(label_vbw, 'raam') > 0 
			? replace('(vbw_data/@BD@_1_oppervlakte[org_rel][float64] * vbw_data/@BD@_1_u_waarde[org_rel][float64] + vbw_data/@BD@_2_oppervlakte[org_rel][float64] * vbw_data/@BD@_2_u_waarde[org_rel][float64] + vbw_data/@BD@_3_oppervlakte[org_rel][float64] * vbw_data/@BD@_3_u_waarde[org_rel][float64] + vbw_data/@BD@_4_oppervlakte[org_rel][float64] * vbw_data/@BD@_4_u_waarde[org_rel][float64]) / Oppervlak','@BD@',label_vbw)
		: strcount(bouwdeel_name, 'DR') > 0 
			? replace('(vbw_data/@BD@_1_oppervlakte[org_rel][float64] * vbw_data/@BD@_1_u_waarde[org_rel][float64] + vbw_data/@BD@_2_oppervlakte[org_rel][float64] * vbw_data/@BD@_2_u_waarde[org_rel][float64]) / Oppervlak','@BD@',label_vbw)
		: strcount(bouwdeel_name, 'DS') > 0 
			? replace('(vbw_data/@BD@_1_oppervlakte[org_rel][float64] * vbw_data/@BD@_1_rc_waarde[org_rel][float64] + vbw_data/@BD@_2_oppervlakte[org_rel][float64] * vbw_data/@BD@_2_rc_waarde[org_rel][float64]) / Oppervlak','@BD@',label_vbw)
		: strcount(bouwdeel_name, 'DP') > 0 
			? replace('(vbw_data/@BD@_3_oppervlakte[org_rel][float64] * vbw_data/@BD@_3_rc_waarde[org_rel][float64] + vbw_data/@BD@_4_oppervlakte[org_rel][float64] * vbw_data/@BD@_4_rc_waarde[org_rel][float64]) / Oppervlak','@BD@',label_vbw)
		: strcount(bouwdeel_name, 'KR') > 0
			? 'qv10'
		: replace('(vbw_data/@BD@_1_oppervlakte[org_rel][float64] * vbw_data/@BD@_1_rc_waarde[org_rel][float64] + vbw_data/@BD@_2_oppervlakte[org_rel][float64] * vbw_data/@BD@_2_rc_waarde[org_rel][float64] + vbw_data/@BD@_3_oppervlakte[org_rel][float64] * vbw_data/@BD@_3_rc_waarde[org_rel][float64] + vbw_data/@BD@_4_oppervlakte[org_rel][float64] * vbw_data/@BD@_4_rc_waarde[org_rel][float64]) / Oppervlak','@BD@',label_vbw)
		";
		attribute<float64> Isolatiewaarde (vbw) := = Isolatiewaarde_str;
		attribute<Classifications/IsolatieNiveau> IsolatieNiveau_rel (vbw) := =replace('("@BD@" == "KR") || ("@BD@" == "RO") || ("@BD@" == "RB") || ("@BD@" == "DR")
		? MakeDefined(classify( 1[float64] / Isolatiewaarde, 1[float64] / Classifications/BouwdeelIsolatie/Individueel/@BD@/Rc_U_Qv10_grenswaarde)[Classifications/IsolatieNiveau], rlookup("N4",Classifications/IsolatieNiveau/name))
		: MakeDefined(classify(Isolatiewaarde, Classifications/BouwdeelIsolatie/Individueel/@BD@/Rc_U_Qv10_grenswaarde)[Classifications/IsolatieNiveau], rlookup("N0",Classifications/IsolatieNiveau/name))','@BD@',bouwdeel_name);
	}

	template HuishoudensGrootteSchatting
	{
		//begin parameters
		unit<uint32> Obs;
		//end parameters

		attribute<m2>    Oppervlakte     (Obs) := Obs/Oppervlakte, descr = "oppervlakte van verblijfsobject";
		attribute<nrAsl> Aansluitingen   (Obs) := Obs/Nr_asl, descr = "aantal eenheden dat het verblijfsobject voor meetelt";
		attribute<Classifications/Woningtype> BebouwingsType_rel (Obs) := Obs/Woningtype, descr = "type woning (vrijstaand, rij, appartement, etc.)";
		attribute<nrPers> nrPersonen     (Obs) :=
			  Oppervlakte   * Classifications/Woningtype/Huishoudgrootte/Personen_per_m2[BebouwingsType_rel]
			+ Aansluitingen * Classifications/Woningtype/Huishoudgrootte/Personen_per_aansluiting[BebouwingsType_rel], descr = "toepassing regressiecoefficienten huishoudensgrootte o.b.v. statistieken CBS, verwerkt in VIVET referentieverbruiken";
		attribute<nrPers> nrPersonen_rnd (Obs) := float64(round(nrPersonen)), descr = "aantal persongen in huishouden afgerond, voor toepassingen waar dat vereist is, anders onafgerond getal gebruken.";
	}
	
	template TWprofiel_selectie
	{
		//begin parameters
		unit<uint32> Obs;
		//end parameters

		//============ schatting aantal personen per huishouden 		
		container HuishoudensGrootte := HuishoudensGrootteSchatting(Obs);

		attribute<nrPers> Personen    (Obs) := HuishoudensGrootte/nrPersonen_rnd, descr = "inschatting aantal personen in huishouden";
		attribute<m2>     Oppervlakte (Obs) := Obs/Oppervlakte, descr = "oppervlakte van verblijfsobject";

		attribute<Invoer/Kengetallen/Bebouwing/Woning/TWprofiel> TWprofiel_rel (Obs) :=
				rlookup( 
						(Personen <= 1[nrPers] ?'A': Personen <= 2[nrPers] ?'B': Personen <= 3[nrPers] ?'C': Personen <= 4[nrPers] ?'D':'E')
					+   (Oppervlakte < 75[m2] ? 'A': Oppervlakte < 100[m2] ?'B': Oppervlakte < 125[m2] ?'C': Oppervlakte < 150[m2]?'D':'E')
				, Invoer/Kengetallen/Bebouwing/Woning/TWprofiel/code) ;
	}
	
	template BerekenWarmtewinst
	{
		//begin parameters
		unit<uint32> Obs;
		parameter<string> warmteverlies_path;
		//end parameters

		//============ warmtewinst door personen wordt bepaald als constante
		container HuishoudensGrootte := HuishoudensGrootteSchatting(Obs);

		attribute<GJ_yr> warmtewinst_personen         (Obs) := HuishoudensGrootte/nrPersonen * Invoer/Kengetallen/WarmteVraag/warmtewinst_personen;

		//============ warmtewinst door apparaten wordt gelijkgesteld aan de vraag naar elektriciteit voor elektrische apparatuur
		attribute<GJ_yr> warmtewinst_apparaten        (Obs) := Obs/Fvraag_Hestia_startsituatie/Functioneel/EA * Invoer/Kengetallen/Warmtevraag/EA_winst_nuttig;

		//============ warmtewist door zoninstralen door ramen boven (RB) en onder (RO) als functie van oppervlak bouwdeel en waarde horende bij isolatiegraad
		attribute<GJ_yr> warmtewinst_zoninstraling_RB (Obs) := ='Obs/bouwdelen/RB/oppervlak * merge(uint8(Obs/bouwdelen/RB/IsolatieNiveau_rel), GJ_yr_m2,'+ AsItemList('Invoer/Kengetallen/Warmtevraag/Zoninstraling[Classifications/IsolatieNiveau/V/'+Classifications/IsolatieNiveau/name+']')+')', descr = "warmtewinst ramen boven";
		attribute<GJ_yr> warmtewinst_zoninstraling_RO (Obs) := ='Obs/bouwdelen/RO/oppervlak * merge(uint8(Obs/bouwdelen/RO/IsolatieNiveau_rel), GJ_yr_m2,'+ AsItemList('Invoer/Kengetallen/Warmtevraag/Zoninstraling[Classifications/IsolatieNiveau/V/'+Classifications/IsolatieNiveau/name+']')+')', descr = "warmtewinst ramen onder";
		attribute<GJ_yr> warmtewinst_zoninstraling    (Obs) := warmtewinst_zoninstraling_RO + warmtewinst_zoninstraling_RB;	

		//============ totaal warmtewinsten
		attribute<GJ_yr> Totaal (Obs) := = 'min_elem(warmtewinst_personen + warmtewinst_apparaten + warmtewinst_zoninstraling, Invoer/Kengetallen/WarmteVraag/Max_warmtewinst * ' + warmteverlies_path + ')';
		attribute<GJ_yr> Totaal_zonder_max (Obs) := warmtewinst_personen + warmtewinst_apparaten + warmtewinst_zoninstraling;
	}
	
	Template BerekenFunctioneel
		{
			unit<uint32> BOdomain;
			unit<uint32> PrevState;
			attribute<PrevState> PrevState_rel (BOdomain);

			attribute<GJ_yr> VT (BOdomain) :=
				  Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes/V_E_asl[vbw/installaties/VT]
				* PrevState/Nr_asl[PrevState_rel]
				* PrevState/Gedragfactor/VT
				;
				
			attribute<GJ_yr> KK (BOdomain) := PrevState/Fvraag_Hestia_startsituatie/Functioneel/KK[PrevState_rel];
			attribute<GJ_yr> EA (BOdomain) := PrevState/Fvraag_Hestia_startsituatie/Functioneel/EA[PrevState_rel];
			attribute<GJ_yr> TW (BOdomain) := PrevState/Fvraag_Hestia_startsituatie/Functioneel/TW[PrevState_rel];
			attribute<GJ_yr> KD (BOdomain) := PrevState/Fvraag_Hestia_startsituatie/Functioneel/KD[PrevState_rel];
			attribute<GJ_yr> RV (BOdomain) := (RV_per_Bouwdeel_now/Totaal  + Vrv_VT) * Correction_RV - warmtewinst/totaal;
			
			attribute<GJ_yr> Vrv_VT (BOdomain) :=
				  Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes/V_RV_asl[vbw/installaties/VT]
				* PrevState/Nr_asl[PrevState_rel]
				* PrevState/Fvraag_Hestia_startsituatie/Functioneel/BaseValues/Klimaateffect[PrevState_rel]
				//* PrevState/Gedragfactor/VT
				* PrevState/Fvraag_Hestia_startsituatie/Functioneel/Fitfactor_VT[PrevState_rel];			

			attribute<Kwh_yr_m2>    Kwh_m2_RV      (BOdomain) := makedefined(((RV_per_Bouwdeel_now/Totaal + Vrv_VT) / 3.6[MJ / kWh] * 1000 [ MJ / GJ]) / PrevState/Oppervlakte[PrevState_rel],0.0[Kwh_yr_m2]);
			attribute<ratio>        Correction_RV  		(BOdomain) := 1.0[ratio] + Invoer/Kengetallen/Constanten/BinnenTemp_A * Invoer/Kengetallen/Constanten/BinnenTemp_B ^ Kwh_m2_RV;


			container IsolatieNiveau_rel := for_each_nedv(
				classifications/Bouwdeel/name,
				replace(
					'/Invoer/voorbeeldwoningen/vbw/Bouwdelen/@BN@/IsolatieNiveau_rel'
				,	'@BN@', classifications/Bouwdeel/name),
				BOdomain,
				Classifications/IsolatieNiveau);
				
			container BouwdeelIsolatie_rel := for_each_nedv(
				classifications/Bouwdeel/name,
				replace(
					'combine_data(Classifications/BouwdeelIsolatie, classifications/Bouwdeel/V/@BN@, IsolatieNiveau_rel/@BN@)'
				,	'@BN@', classifications/Bouwdeel/name),
				BOdomain,
				Classifications/BouwdeelIsolatie);

			attribute<ratio> R_RV (Classifications/BouwdeelIsolatie):= Classifications/BouwdeelIsolatie/R_RV / 100[percent];
			
			container RV_per_Bouwdeel_now := for_each_nedv(
				classifications/Bouwdeel/name,
				replace(
					'/Invoer/voorbeeldwoningen/vbw/Fvraag_Hestia_startsituatie/warmteverlies_theoretisch_startjaar/RV_N0_per_Bouwdeel/@BN@[PrevState_rel] * makedefined(1.0[ratio] - R_RV[BouwdeelIsolatie_rel/@BN@], 1.0[ratio])'
				,	'@BN@', classifications/Bouwdeel/name),
				BOdomain,
				GJ_yr)
			{
				attribute<GJ_yr> Totaal (BOdomain):= ='add('+AsItemList(Classifications/bouwdeel/name)+')';
			}

			container warmtewinst := BerekenWarmtewinst(BOdomain, '((RV_per_Bouwdeel_now/totaal + Vrv_VT) * Correction_RV)');
		}
	
	template functionele_vraag
	{
	
		// begin case parameters
		unit<uint32> BebouwingsObjectSrc;
		unit<uint32> ModelObject;
		parameter<Classifications/BebouwingsSector> BebouwingsSector_rel;
		// end case parameters
		

		
		attribute<ModelObject> ModelObject_rel (BebouwingsObjectSrc) := rlookup(BebouwingsObjectSrc/ModelObjectKey, ModelObject/ModelObjectKey);

				//====================== INITIELE BEREKENING RUIMTEVERWARMING ================

		//=====warmteverlies per bouwdeel als functie van oppervlak van bouwdeel en waarde horende bij isolatiegraad
		container HuishoudensGrootte := HuishoudensGrootteSchatting(BebouwingsObjectSrc);
		container warmteverlies_theoretisch_startjaar := for_each_nedv(
			Classifications/Bouwdeel/name
			,replace('BebouwingsObjectSrc/bouwdelen/@BD@/oppervlak * merge(uint8(BebouwingsObjectSrc/bouwdelen/@BD@/IsolatieNiveau_rel), GJ_yr_m2,' + AsItemList('Invoer/Kengetallen/WarmteVraag/Vrv_opp_'+Classifications/IsolatieNiveau/name+'[Classifications/Bouwdeel/V/@BD@]')+')','@BD@',Classifications/Bouwdeel/name)
			,BebouwingsObjectSrc
			,GJ_yr)
		{
		
			
			attribute<GJ_yr> Total (BebouwingsObjectSrc) := ='add('+AsItemList(Classifications/bouwdeel/name)+')';
			
			container warmtewinst := BerekenWarmtewinst(BebouwingsObjectSrc, '4d / Invoer/Kengetallen/WarmteVraag/Max_warmtewinst * Gemeten_RV_i');
			
			container gemeten_correctie
			{
				attribute<Geography/RegioIndelingen/Wijk>                                WK_rel         (BebouwingsObjectSrc) := Invoer/RuimtelijkeData/StudieGebied/Buurt/Wijk_rel[Buurt_rel];
				attribute<Invoer/Kengetallen/Bebouwing/Woning/Verschilfactordata/W_E>    W_E_rel        (BebouwingsObjectSrc) := combine_data(Invoer/Kengetallen/Bebouwing/Woning/Verschilfactordata/W_E, WoningType, Eigendom);
				attribute<Invoer/Kengetallen/Bebouwing/Woning/Verschilfactordata/WK_W_E> WK_W_E_rel     (BebouwingsObjectSrc) := combine_data(Invoer/Kengetallen/Bebouwing/Woning/Verschilfactordata/WK_W_E, WK_rel, W_E_rel);
				attribute<ratio>                                                         Verschilfactor (BebouwingsObjectSrc) := Invoer/Kengetallen/Bebouwing/Woning/Verschilfactordata/WK_W_E/Verschilfactor[WK_W_E_rel];
				//attribute<ratio>                                                         Verschilfactor (BebouwingsObjectSrc) := const(1[ratio], BebouwingsObjectSrc); // comment deze en bovenstaande regel in cq uit om de waardes van de lokale praktijkfactor te veranderen
			}

			//========= warmteverlies ventilatie
			attribute<GJ_yr> Vrv_VT_asl     (BebouwingsObjectSrc) := Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes/V_RV_asl[Installaties/VT] * Nr_asl, descr = "warmteverlies ventilatie vast per aansluiting";
			
			//========= theoretische verlies ruimteverwarming (excl warmtewinsten)
			attribute<GJ_yr>     Theoretisch_RV (BebouwingsObjectSrc) := VL + DP + DS + MG + MS + DR + PL + RO + RB + KR + Vrv_VT_asl;
			attribute<Kwh_yr_m2> Kwh_m2_RV      (BebouwingsObjectSrc) := makedefined((Theoretisch_RV / 3.6[MJ / kWh] * 1000 [ MJ / GJ]) / BebouwingsObjectSrc/Oppervlakte,0.0[Kwh_yr_m2]);
			attribute<ratio>     Correction_RV  (BebouwingsObjectSrc) := 1.0[ratio] + Invoer/Kengetallen/Constanten/BinnenTemp_A * Invoer/Kengetallen/Constanten/BinnenTemp_B ^ Kwh_m2_RV;

			//========= gemeten vraag ruimteverwarming gecorrigeerd voor warmtewinsten
			attribute<GJ_yr>     Gemeten_RV_i                  (BebouwingsObjectSrc) := gemeten_correctie/verschilfactor * Functioneel/BaseValues/RV;
			attribute<GJ_yr>     Gemeten_RV_incl_tempcorrectie (BebouwingsObjectSrc) := Gemeten_RV_i + warmtewinst/totaal;
			
			container TemperatuurCorrectie
			{
				attribute<Kwh_yr_m2> R_cor     (BebouwingsObjectSrc) := makedefined((Gemeten_RV_incl_tempcorrectie / 3.6[MJ / kWh] * 1000 [ MJ / GJ]) / BebouwingsObjectSrc/Oppervlakte,0.0[Kwh_yr_m2]);
				parameter<uint32>    NrIterations := 20[uint32];
				parameter<Kwh_yr_m2> Tolerance    := 1[Kwh_yr_m2];
				container StartingState
				{
				attribute<Kwh_yr_m2> R_guess_new (BebouwingsObjectSrc) := 
					  R_cor > 170[Kwh_yr_m2] ? R_cor
					: R_cor > 160[Kwh_yr_m2] ? 147[Kwh_yr_m2]
					: R_cor > 150[Kwh_yr_m2] ? 147[Kwh_yr_m2]
					: R_cor > 140[Kwh_yr_m2] ? 136[Kwh_yr_m2]
					: R_cor > 130[Kwh_yr_m2] ? 124[Kwh_yr_m2]
					: R_cor > 120[Kwh_yr_m2] ? 112[Kwh_yr_m2]
					: R_cor > 110[Kwh_yr_m2] ?  96[Kwh_yr_m2]
					: R_cor > 100[Kwh_yr_m2] ?  74[Kwh_yr_m2]
					: R_cor >  99[Kwh_yr_m2] ?  70[Kwh_yr_m2]
					: R_cor >  98[Kwh_yr_m2] ?  65[Kwh_yr_m2]
					: R_cor >  97[Kwh_yr_m2] ?  56[Kwh_yr_m2]
					: R_cor >  96[Kwh_yr_m2] ?  38[Kwh_yr_m2]
					: R_cor >  95[Kwh_yr_m2] ?  34[Kwh_yr_m2]
					: R_cor >  90[Kwh_yr_m2] ?  25[Kwh_yr_m2]
					: R_cor >  85[Kwh_yr_m2] ?  21[Kwh_yr_m2]
					: 10[Kwh_yr_m2];
				}
				unit<uint32> Iteration := Range(uint32, 0, NrIterations)
    		 	{
     				attribute<string> name          := 'I' + string(id(.));
    				attribute<string> PrevStateName := MakeDefined(Iteration/name[id(Iteration)-1], 'StartingState');
     			}
     
    			container Iterations := for_each_ne(Iteration/name, 'IterationTemplate('+Iteration/PrevStateName+')');

    			template IterationTemplate
    			{
    				container PrevStateName;

    				attribute<Kwh_yr_m2> R_guess     (BebouwingsObjectSrc) := PrevStateName/R_guess_new;
    				attribute<Kwh_yr_m2> Result      (BebouwingsObjectSrc) := R_guess * (1.0[ratio] + Invoer/Kengetallen/Constanten/BinnenTemp_A * Invoer/Kengetallen/Constanten/BinnenTemp_B ^ R_guess);
    				attribute<Kwh_yr_m2> R_guess_new (BebouwingsObjectSrc) := (Result - R_cor) > 0.5[Kwh_yr_m2] ? (R_guess - 1[Kwh_yr_m2]) : (Result - R_cor) < -0.5[Kwh_yr_m2] ? (R_guess + 1[Kwh_yr_m2]) : R_guess;
    			}

			//	R * (1 + 7.2 * 0.96 ^ R);

				attribute<Kwh_yr_m2> R      (BebouwingsObjectSrc) := ='Iterations/I' + string(NrIterations-1[uint32]) + '/R_guess_new';
				attribute<Kwh_yr_m2> Result      (BebouwingsObjectSrc) := ='Iterations/I' + string(NrIterations-1[uint32]) + '/result';
				attribute<ratio>     factor (BebouwingsObjectSrc) := R / R_cor;
				attribute<ratio>     factor2 (BebouwingsObjectSrc) := Result / R; // Kim heeft gelijk. Factor is geen binnen tempcorrectiefactor, maar het is de inverse.
			}
			attribute<GJ_yr> Gemeten_RV (BebouwingsObjectSrc) := Gemeten_RV_incl_tempcorrectie * TemperatuurCorrectie/factor; // Omdat factor de inverse van de binnentempcorrectiefactor is, hier vermenigvuldigen.

			//========= relatief verschil als fitfactor
			attribute<ratio>     Fitfactor  (BebouwingsObjectSrc) := Gemeten_RV / Theoretisch_RV;


			//========= gefit verlies bij isolatiegraad N0 als referentiepunt voor berekeningen per zichtjaar
			container RV_N0_per_Bouwdeel := for_each_nedv(
				  Classifications/Bouwdeel/name
				, 'bouwdelen/'+Classifications/Bouwdeel/name+'/oppervlak * Invoer/Kengetallen/WarmteVraag/Baselevel[Classifications/Bouwdeel/V/'+Classifications/Bouwdeel/name+'] * Fitfactor'
				, BebouwingsObjectSrc
				, GJ_yr
				)
			{
				//========= gefit verlies totaal
				attribute<GJ_yr> Total (BebouwingsObjectSrc) := ='add('+AsItemList(Classifications/bouwdeel/name)+')';
			}
		}

		container AansluitCapaciteit
		{
			container Vermogens := Invoer/Kengetallen/Vermogens ( /Tussenresultaten/Startjaar/Schuiven/EfficiencySchuif ) ;
			attribute<nrAsl> Nr_asl (BebouwingsObjectSrc) := BebouwingsObjectSrc/Nr_asl;
			parameter<Classifications/BebouwingsSector> BCsector := BebouwingsSector_rel;
			attribute<kW> RV (BebouwingsObjectSrc) := functioneel/RV * 0.25[kW_GJ_yr];
			attribute<kW> TW (BebouwingsObjectSrc) :=  = 
					'IsMeergezins ? Oppervlakte * Vermogens/ASW_TWmt_wl_opp + Nr_asl * Vermogens/ASW_TWmt_wl_asl : Oppervlakte * Vermogens/ASW_TWmt_wh_opp + Nr_asl * Vermogens/ASW_TWmt_wh_asl';
			attribute<kW> KD (BebouwingsObjectSrc) :=  = 
					'IsMeergezins ? Oppervlakte * Vermogens/ASW_K_wl_opp + Nr_asl * Vermogens/ASW_K_wl_asl : Oppervlakte * Vermogens/ASW_K_wh_opp + Nr_asl * Vermogens/ASW_K_wh_asl';
		}

		container Functioneel := for_each_nedv(
				Classifications/FunctioneleVraag/name,
				'BaseValues/'+ Classifications/FunctioneleVraag/name,
				BebouwingsObjectSrc,
				GJ_yr)
		{
			container RV_N0_per_Bouwdeel := warmteverlies_theoretisch_startjaar/RV_N0_per_Bouwdeel;
			attribute<ratio> Fitfactor_VT (BebouwingsObjectSrc) := warmteverlies_theoretisch_startjaar/Fitfactor;

			attribute<nrPers> Personen (BebouwingsObjectSrc) := HuishoudensGrootte/nrPersonen_rnd;

			container TWprofiel := TWprofiel_selectie(BebouwingsObjectSrc);
			
			container BaseValues := for_each_nedv(
				Classifications/FunctioneleVraag/name,

				Classifications/FunctioneleVraag/name == 'TW' ? 'Nr_asl * Invoer/Kengetallen/Bebouwing/Woning/TWprofiel/VTW_asl[ TWprofiel/TWprofiel_rel ]'
					:
				Classifications/FunctioneleVraag/name == 'KK' ?  
														   'Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes/Vkk_prs * HuishoudensGrootte/nrPersonen
																+ (  HuishoudensGrootte/nrPersonen_rnd < 2d ? Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes/Vkk_asl_1p
																   : HuishoudensGrootte/nrPersonen_rnd < 4d ? Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes/Vkk_asl_23p
																   :                                          Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes/Vkk_asl_45p) * Nr_asl 
																+ Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes/Vkk_zjr * (float64(2009) - float64( first(/rekenstap/jaar) ))*1[ _yr ] * Nr_asl'
					: 
				Classifications/FunctioneleVraag/name == 'RV' ? 
				'Nr_asl * merge(schillabel, GJ_yr_asl,'
					+ AsItemList('Invoer/Kengetallen/Bebouwing/Woning/Results/Asl/RV_'+Classifications/SchilLabel/name+'[ModelObject_rel]')+')'
					'+ Oppervlakte   * merge(schillabel, GJ_yr_m2,'
					+ AsItemList('Invoer/Kengetallen/Bebouwing/Woning/Results/Opp/RV_'+Classifications/SchilLabel/name+'[ModelObject_rel]')+')'
					:
				Classifications/FunctioneleVraag/name == 'VT' ?
					'Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes/V_E_asl[Installaties/VT] * Nr_asl'
					:
				'Invoer/Kengetallen/Bebouwing/'+Classifications/BebouwingsSector/name[BebouwingsSector_rel]+'/Results/Asl/'+Classifications/FunctioneleVraag/name+'[ModelObject_rel]* Nr_asl +
				 Invoer/Kengetallen/Bebouwing/'+Classifications/BebouwingsSector/name[BebouwingsSector_rel]+'/Results/Opp/'+Classifications/FunctioneleVraag/name+'[ModelObject_rel] * Oppervlakte',
				BebouwingsObjectSrc,
				GJ_yr)
				{
					attribute<ratio> Klimaateffect (BebouwingsObjectSrc) := KlimaatFactorMap[gridm100_rel];

				}
		}
	}
	
	Template FunctioneelToMetervraag
	{
		unit<uint32> VraagBO;
		parameter<bool> terAfweging;
		parameter<string> FunctioneelPad;

		container SPF := for_each_nedv(Classifications/Product/name
				, replace('Classifications/Performance/SPF_@S[PerformancePerProduct/@P]', '@P', Classifications/Product/name, '@S', Classifications/Product/ServiceName)
				, VraagBO
				, float64
			)
		{	
			attribute<Classifications/SchillabelEx> SchillabelEx_rel (VraagBO) := Classifications/Schillabel/SchillabelEx_rel[VraagBO/schillabel];

			 container Performance_key1 := for_each_nedv(Classifications/Product/name
				, 'combine_data(classifications/ISP, VraagBO/Installaties/'+Classifications/Product/name+
					', combine_data(classifications/SP, Classifications/Schillabel/SchillabelEx_rel[VraagBO/schillabel], Classifications/ProductType/ProductTypeEx_rel[Classifications/ProductType/V/'+Classifications/Product/TypeName+']))'
				, VraagBO
				, classifications/ISP
				)
			 , isHidden = "True";	

			 container Performance_key2 := for_each_nedv(Classifications/Product/name
				, 'combine_data(classifications/ISP, VraagBO/Installaties/'+Classifications/Product/name+
					', combine_data(classifications/SP, Classifications/SchilLabelEx/V/x, Classifications/ProductType/ProductTypeEx_rel[Classifications/ProductType/V/'+Classifications/Product/TypeName+']))'
				, VraagBO
				, classifications/ISP
				)
			 , isHidden = "True";
			 
			container PerformancePerProduct := for_each_nedv(Classifications/Product/name
				, replace(
					'MakeDefined('
						'Performance_key1/@P->Performance_rel, '
						'Performance_key2/@P->Performance_rel, '
						'Classifications/ISP/V/geen_x_@T->Performance_rel'
					')'
				  , '@P', Classifications/Product/name
				  , '@T', Classifications/Product/typename)
				, VraagBO
				, Classifications/Performance
				);
		}
		
		container ZonB
		{
			attribute<Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes> Installatietype_rel (VraagBO) := =not(terAfweging) ? 'VraagBO/Installaties/DK' : 'OverigeInstallaties/DK/Installatietype_def';
				
			attribute<GJ_yr> Oj_TW     (VraagBO) := ='
			   Installatietype_rel == Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes/V/zonb
			|| Installatietype_rel == Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes/V/optimaal_zonb ? 
			   0.5 * VraagBO/'+FunctioneelPad+'/TW : 0.0[GJ_yr]';

			attribute<m2>    area      (VraagBO) := makedefined(Oj_TW / Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes/Opbr_opp_tw[Installatietype_rel], 0.0[m2]);
		}
		
		container Functioneel_per_product
		{
			attribute<float64> RVb (VraagBO) := ='VraagBO/'+FunctioneelPad+'/RV *        Classifications/Performance/P_Vol[SPF/PerformancePerProduct/RVb] ';
			attribute<float64> RVp (VraagBO) := ='VraagBO/'+FunctioneelPad+'/RV * (1.0 - Classifications/Performance/P_Vol[SPF/PerformancePerProduct/RVb])';
			attribute<float64> TWb (VraagBO) := ='(VraagBO/'+FunctioneelPad+'/TW - ZonB/Oj_TW) *        Classifications/Performance/P_Vol[SPF/PerformancePerProduct/TWb] ';
			attribute<float64> TWp (VraagBO) := ='(VraagBO/'+FunctioneelPad+'/TW - ZonB/Oj_TW) * (1.0 - Classifications/Performance/P_Vol[SPF/PerformancePerProduct/TWb])';
			attribute<float64> KDb (VraagBO) := ='VraagBO/'+FunctioneelPad+'/KD *        Classifications/Performance/P_Vol[SPF/PerformancePerProduct/KDb] ';
			attribute<float64> KDp (VraagBO) := ='VraagBO/'+FunctioneelPad+'/KD * (1.0 - Classifications/Performance/P_Vol[SPF/PerformancePerProduct/KDb])';
		}
		
		container metervraag_per_product := for_each_nedv(Classifications/Product/name
			, replace('Functioneel_per_product/@P / SPF/@P', '@P', Classifications/Product/name)
			, VraagBO
			, float64
		);

		container BemeterdeGebouwInput_rel := for_each_nedv(Classifications/Product/name
			, 'rlookup(Classifications/Performance/Input_rel, Classifications/BemeterdeGebouwInput/nr_OrgEntity)[SPF/PerformancePerProduct/'+Classifications/Product/name+']'
			, VraagBO
			, Classifications/BemeterdeGebouwInput
		);
		
		container Expr_impl : ishidden = "True" 
		{
			attribute<string> MeterVraagExpr_asVector(Classifications/Product) := 'metervraag_base/' + Classifications/Product/name;

			attribute<string> aggr_OudLabel(Classifications/BemeterdeGebouwInput) := 
				replace('add('++AsItemList(replace('BemeterdeGebouwInput_rel/@P == Classifications/BemeterdeGebouwInput/V/@I ? metervraag_per_product/@P: 0[GJ_yr]', '@P', Classifications/Product/name))+')'
				, '@I', Classifications/BemeterdeGebouwInput/name
				);
		}

		container metervraag_per_input := for_each_nedv(Classifications/BemeterdeGebouwInput/name
			, Expr_impl/aggr_OudLabel
			, VraagBO
			, GJ_yr);
		
		container Koken
		{
			attribute<Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes> Installatietype_rel (VraagBO) := VraagBO/Installaties/KK;
				
			attribute<Classifications/BemeterdeGebouwInput> BemeterdeGebouwInput_rel (VraagBO) := Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes/BemeterdeGebouwInput_rel [Installatietype_rel];
			attribute<ratio> SPF     (VraagBO) := Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes/SPF[Installatietype_rel];
			attribute<GJ_yr> Vj_elek (VraagBO) := ='float64(BemeterdeGebouwInput_rel == Classifications/BemeterdeGebouwInput/V/e)  * (VraagBO/'+FunctioneelPad+'/KK / SPF)';
			attribute<GJ_yr> Vj_gas  (VraagBO) := ='float64(BemeterdeGebouwInput_rel ==Classifications/BemeterdeGebouwInput/V/Gas) * (VraagBO/'+FunctioneelPad+'/KK / SPF)';
		}

		container Omgeving := for_each_nedv(
			  Classifications/Product/name
			, replace('max_elem( 0.0[GJ_yr], Functioneel_per_product/@P - metervraag_per_product/@P)','@P',Classifications/Product/name)
			, VraagBO
			, GJ_yr		 )
		{
			attribute<GJ_yr> Totaal (VraagBO) := ='add('+AsItemList(Classifications/Product/name)+')';
		}

		container eEffect
		{
			container volume := for_each_nedv(Classifications/Product/name
				, replace(
					'Classifications/Performance/eEffect_vol[SPF/PerformancePerProduct/@P] * metervraag_per_product/@P'
					, '@P'
					, Classifications/Product/name
				  )
				, VraagBO
				, GJ_yr
			)
			{
				attribute<GJ_yr> Vj_elek (VraagBO) := ='add('+AsItemList(Classifications/Product/name)+')';
			}
			container CapaciteitPerProduct 
			{				
				attribute<kW> RVb (VraagBO) :=VraagBO/Fvraag_hestia_startsituatie/AansluitCapaciteit/RV * Classifications/Performance/P_cap[SPF/PerformancePerProduct/RVb];
				attribute<kW> TWb (VraagBO) :=VraagBO/Fvraag_hestia_startsituatie/AansluitCapaciteit/TW * Classifications/Performance/P_cap[SPF/PerformancePerProduct/TWb];
				attribute<kW> KDb (VraagBO) :=VraagBO/Fvraag_hestia_startsituatie/AansluitCapaciteit/KD * Classifications/Performance/P_cap[SPF/PerformancePerProduct/KDb];
				attribute<kW> RVp (VraagBO) :=VraagBO/Fvraag_hestia_startsituatie/AansluitCapaciteit/RV - RVb;
				attribute<kW> TWp (VraagBO) :=VraagBO/Fvraag_hestia_startsituatie/AansluitCapaciteit/TW - TWb;
				attribute<kW> KDp (VraagBO) :=VraagBO/Fvraag_hestia_startsituatie/AansluitCapaciteit/KD - KDb;
			}
			container CapaciteitPerInstallatie := for_each_nedv(Classifications/Installatie/name
			, replace('max_elem('
					'add(CapaciteitPerProduct/RVb * float64(VraagBO/Installaties/RVb == @VI), CapaciteitPerProduct/RVp * float64(VraagBO/Installaties/RVp == @VI)), '
					'add(CapaciteitPerProduct/TWb * float64(VraagBO/Installaties/TWb == @VI), CapaciteitPerProduct/TWp * float64(VraagBO/Installaties/TWp == @VI)), '
					'add(CapaciteitPerProduct/KDb * float64(VraagBO/Installaties/KDb == @VI), CapaciteitPerProduct/Kdp * float64(VraagBO/Installaties/Kdp == @VI)) '
				')[kW]'
				, '@VI', 'Classifications/Installatie/V/' + Classifications/Installatie/name)
			, VraagBO
			, kW
			);
			container capaciteit := for_each_nedv(Classifications/Installatie/name
			, replace(
				'add('+
					AsItemList(
						replace('Classifications/Performance/eEffect_cap[SPF/PerformancePerProduct/@P] * float64(VraagBO/Installaties/@P == Classifications/Installatie/V/@I)'
						,	'@P', Classifications/Product/name
						)
					)+
				') * CapaciteitPerInstallatie/@I'
				, '@I', Classifications/Installatie/name)
				, VraagBO
				, GJ_yr
			)
			{
				attribute<GJ_yr> Vj_elek(VraagBO) := ='add('+AsItemList(Classifications/Installatie/name)+')';
			}
			
			container ventilatie
			{
				attribute<GJ_yr> Vj_elek (VraagBO) := ='VraagBO/'+FunctioneelPad+'/VT';
			}
			
			container ZonPV
			{
				attribute<Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes> Installatietype_rel (VraagBO) := VraagBO/Installaties/DK;
				
				attribute<m2> Area_DP (VraagBO) := 0.69 * VraagBO/Bouwdelen/DP/oppervlak * Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes/DakaandeelZonPV[Installatietype_rel];
				attribute<m2> Area_DS (VraagBO) := 0.69 * VraagBO/Bouwdelen/DS/oppervlak * Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes/DakaandeelZonPV[Installatietype_rel];
				attribute<m2> Area    (VraagBO) := Area_DP + Area_DS;
				attribute<kW> P_DP    (VraagBO) := Area_DP * Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes/Pdak_opp  [Installatietype_rel];
				attribute<kW> P_DS    (VraagBO) := Area_DS * Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes/Pdak_opp  [Installatietype_rel];

				attribute<GJ_yr> Oj_e_DP (VraagBO) := P_DP * Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes/Opbr_cap_e_DP[Installatietype_rel];
				attribute<GJ_yr> Oj_e_DS (VraagBO) := P_DS * Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes/Opbr_cap_e_DP[Installatietype_rel];
				attribute<GJ_yr> Oj_elek (VraagBO) := Oj_e_DP + Oj_e_DS;
			}
				
			attribute<GJ_yr> Vj_elek (VraagBO) := volume/Vj_elek + capaciteit/Vj_elek + ventilatie/Vj_elek - ZonPV/Oj_elek;
			attribute<GJ_yr> Vj_elek_zonder_ventilatie (VraagBO) := volume/Vj_elek + capaciteit/Vj_elek - ZonPV/Oj_elek;
		}
		
		container result := metervraag_per_input
		{
			attribute<GJ_yr> e     (VraagBO) := ='metervraag_per_input/e + VraagBO/'+FunctioneelPad+'/EA + eEffect/Vj_elek + koken/Vj_elek';
			attribute<GJ_yr> E_zonder_ventilatie_EA     (VraagBO) := ='metervraag_per_input/e + eEffect/Vj_elek_zonder_ventilatie + koken/Vj_elek';
			attribute<GJ_yr> gas   (VraagBO) := metervraag_per_input/gas + Koken/Vj_gas    ;
			attribute<GJ_yr> Total (VraagBO) := ='add('+AsItemList(Classifications/BemeterdeGebouwInput/name)+')';
			attribute<GJ_yr> total_zonder_ventilatie_EA (VraagBO) := E_zonder_ventilatie_EA + gas;
		}
	}
	
	Template functionelevraag_VIVET
	{
		//begin case parameters
		unit<uint32> Obs;
		// end case parameters
		
		attribute<nrAsl> 						Nr_asl		(obs) := obs/Nr_asl;
		attribute<Classifications/WoningType> 	WoningType	(Obs) := obs/WoningType;
		attribute<uint16> 						Bouwjaar 	(Obs) := obs/Bouwjaar;
		attribute<Classifications/schillabel>	schillabel 	(Obs) := obs/schillabel;
		attribute<Classifications/Eigendom> 	Eigendom 	(Obs) := obs/Eigendom;
		attribute<Float64> 						Oppervlakte (Obs) := obs/Oppervlakte;
		
		attribute<Classifications/OppervlakteKlasseTNO>	OppervlakteKlasseTNO	(obs)	:= classify(Oppervlakte[uint16], Classifications/OppervlakteKlasseTNO/Classbreak);
		attribute<Classifications/BouwjaarWoningTNO>	BouwjaarWoningTNO		(obs)	:= classify(Bouwjaar, Classifications/BouwjaarWoningTNO/Classbreak);
		attribute<Classifications/BouwjaarWoning> 		BouwjaarKlasse 			(obs)	:= obs/BouwjaarKlasse;
		attribute<uint16> 								huishoudGrootte 		(obs)	:= Invoer/voorbeeldwoningen/vbw/Fvraag_Hestia_startsituatie/HuishoudensGrootte/nrPersonen_rnd[uint16];
		attribute<Classifications/huishoudgrootte> 		huishoudGrootte_klasse 	(obs)	:= classify(huishoudGrootte, Classifications/huishoudgrootte/classbreak);
		
		attribute<Classifications/combines/BE> 	BE 	  (obs) := combine_data(Classifications/combines/BE, BouwjaarKlasse, Eigendom);
		attribute<Classifications/combines/WBE> WBE   (obs) := combine_data(Classifications/combines/WBE, WoningType, BE);
		attribute<Classifications/combines/WBES> WBES (obs) := combine_data(Classifications/combines/WBES, WBE, schillabel);

		attribute<Classifications/combines/TNO_OH>	OH	(obs) := combine_data(Classifications/combines/TNO_OH, OppervlakteKlasseTNO, huishoudGrootte_klasse);
		attribute<Classifications/combines/TNO_OHB>	OHB	(obs) := combine_data(Classifications/combines/TNO_OHB, OH, BouwjaarWoningTNO);

		attribute<string> Vivet_populatie	(obs)	:= schillabel == Classifications/schillabel/V/n 		 ? '2'
													:  WoningType == Classifications/WoningType/V/vrijstaand ? '1a':
													'1b';
													
		container AansluitCapaciteit
		{
			container Vermogens := Invoer/Kengetallen/Vermogens ( /Tussenresultaten/Startjaar/Schuiven/EfficiencySchuif ) ;
			attribute<nrAsl> Nr_asl (obs) := obs/Nr_asl;
			attribute<kW> RV (obs) := Fvraag_Vivet/RV  * 0.25[kW_GJ_yr];
			attribute<kW> TW (obs) :=  = 
					'IsMeergezins ? Oppervlakte * Vermogens/ASW_TWmt_wl_opp + Nr_asl * Vermogens/ASW_TWmt_wl_asl : Oppervlakte * Vermogens/ASW_TWmt_wh_opp + Nr_asl * Vermogens/ASW_TWmt_wh_asl';
			attribute<kW> KD (obs) :=  = 
					'IsMeergezins ? Oppervlakte * Vermogens/ASW_K_wl_opp + Nr_asl * Vermogens/ASW_K_wl_asl : Oppervlakte * Vermogens/ASW_K_wh_opp + Nr_asl * Vermogens/ASW_K_wh_asl';
		}
	
		attribute<GJ_yr> RV 	(obs) := = replace('rjoin(WBES, Classifications/Vivet_RV_@pop@/WBES, Classifications/Vivet_RV_@pop@/vraag_m2) * Oppervlakte + rjoin(WBES, Classifications/Vivet_RV_@pop@/WBES, Classifications/Vivet_RV_@pop@/vraag_asl) * Nr_asl','@pop@',Vivet_populatie);
		attribute<GJ_yr> KK		(obs) := rjoin(OHB, Classifications/Vivet_KK/OHB, Classifications/Vivet_KK/vraag);
		attribute<GJ_yr> TW		(obs) := rjoin(OH, Classifications/Vivet_TW/OH, Classifications/Vivet_TW/vraag);
		attribute<GJ_yr> KD		(obs) := const(0[GJ_yr], obs);
		attribute<GJ_yr> VT		(obs) := const(0[GJ_yr], obs);
		attribute<GJ_yr> EA		(obs) := const(0[GJ_yr], obs);
		
	}

	Template NTA8800
	{
		//begin parameters
		unit<uint32> ObjectDomain;
		//end parameters

		parameter<Celsius> DT_SetPointTemp_def := 18[Celsius] - 6[Celsius], Source = "Energiebesparingsmethode TNO v3 binnentemperatuur";
		parameter<Celsius> DT_SetPointTemp_NTA := 20[Celsius] - 6[Celsius], Source = "NTA8800 Tabel 7.11 woonfuncties";

		parameter<ratio>   SetPointTemp_correctie := DT_SetPointTemp_NTA / DT_SetPointTemp_def;

		attribute<ratio> Emissiefactor (Classifications/BemeterdeGebouwInput) : [
			  1.450	//elek
			, 1.000	//gas
			, 0.000	//H2
			, 0.000	//biomass
			, 1.000	//olie
			, 0.000	//pellets
			], Source = "NTA8800 2020+A1 5.5.5 Tabel 5.2";
		parameter<ratio> Emissiefactor_warmte : [0.9];

		//========= warmteverlies per bouwdeel als functie van oppervlak van bouwdeel en waarde horende bij isolatiegraad
		container warmteverlies := for_each_nedv(
			Classifications/Bouwdeel/name
			,replace('ObjectDomain/bouwdelen/@BD@/oppervlak * merge(uint8(ObjectDomain/bouwdelen/@BD@/IsolatieNiveau_rel), GJ_yr_m2,' + AsItemList('Invoer/Kengetallen/WarmteVraag/Vrv_opp_'+Classifications/IsolatieNiveau/name+'[Classifications/Bouwdeel/V/@BD@]')+')','@BD@',Classifications/Bouwdeel/name)
			,ObjectDomain
			,GJ_yr)
	
				
		{

			attribute<GJ_yr> Vrv_VT (ObjectDomain) := Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes/V_RV_asl[Installaties/VT] * Nr_asl, descr = "warmteverlies ventilatie vast per aansluiting";
			attribute<GJ_yr> Totaal (ObjectDomain) := ='SetPointTemp_correctie * (add('+AsItemList(Classifications/Bouwdeel/name)+') + Vrv_VT)';
		}

		container warmtewinst        := BerekenWarmtewinst(ObjectDomain, 'warmteverlies/totaal');
		container HuishoudensGrootte :=	HuishoudensGrootteSchatting(ObjectDomain);
		container TWprofiel          := TWprofiel_selectie(ObjectDomain);
		container Func2meter_NTA     := FunctioneelToMetervraag(Obs, false,'Elabels/Obs/Functioneel');

		unit<uint32> Obs := ObjectDomain
		{
			container Functioneel := ObjectDomain/Fvraag_Hestia
			{
				attribute<gj_yr> RV (ObjectDomain) := warmteverlies/Totaal - warmtewinst/Totaal;
				attribute<gj_yr> TW (ObjectDomain) := ((Mvraag_Hestia/metervraag_per_product/TWb + Mvraag_Hestia/metervraag_per_product/TWp) / SpecifiekeInstellingen/RuimtelijkeVraag/Gedrag/TW) * Invoer/Kengetallen/Bebouwing/Woning/TWprofiel/NTA_correctiefactor[TWprofiel/TWprofiel_rel];
				attribute<gj_yr> KD (ObjectDomain) := (Mvraag_Hestia/metervraag_per_product/KDb + Mvraag_Hestia/metervraag_per_product/KDp) / SpecifiekeInstellingen/RuimtelijkeVraag/Gedrag/KD / ( 1.0 + 3.66 );
				attribute<gj_yr> EA (ObjectDomain) := Mvraag_Hestia/eEffect/Vj_elek + ObjectDomain/Fvraag_Hestia/EA / Invoer/Kengetallen/Constanten/Efficiency_EA / SpecifiekeInstellingen/RuimtelijkeVraag/Gedrag/EA;
			}
		}
		container Primair_kWh := for_each_nedv(
			Classifications/BemeterdeGebouwInput/name
			, 'Func2meter_NTA/result/'+Classifications/BemeterdeGebouwInput/name+' * 277.78 [kWh / GJ] * Emissiefactor[Classifications/BemeterdeGebouwInput/V/'+Classifications/BemeterdeGebouwInput/name+']'
			, ObjectDomain
			, kWh_yr
			)
		{
			attribute<kWh_yr>    Warmte (ObjectDomain) := const(0[kWh_yr], obs); 			// op 0 gezet want aanname is gasketels
			attribute<kWh_yr>    Total  (ObjectDomain) := ='add('+AsItemList(Classifications/BemeterdeGebouwInput/name)+', Warmte )';
			attribute<kwh_yr_m2> Kwh_m2 (ObjectDomain) := vbw/oppervlakte[ObjectDomain/vbw_rel] == 0[m2] ? 0.0[kwh_yr_m2] : Total / vbw/oppervlakte[ObjectDomain/vbw_rel];
		}
		attribute<Classifications/Schillabel> Energielabel_rel (ObjectDomain) := Primair_kWh/Kwh_m2 <= 0.0[kwh_yr_m2] ? Classifications/Schillabel/V/A : classify(Primair_kWh/Kwh_m2, classifications/Schillabel/classbreak);
		}
}