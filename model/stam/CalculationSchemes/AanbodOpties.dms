//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2020 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container AanbodOpties
{
	#include <RestWarmte.dms>
	#include <RestWarmteIteratie.dms>
	#include <GeoThermie.dms>
	#include <WKO.dms>
	#include <WKOWoningData.dms>
	#include <WKOUtilData.dms>
	#include <WKOData.dms>
	#include <WKOIter.dms>
	#include <WKOResults.dms>
	#include <WijkTempl.dms>
	#include <LtWarmtenet.dms>
	#include <LtData.dms>
	#include <TEOData.dms>
	#include <LtBronIter.dms>
	#include <ltResults.dms>
	#include <TEO.dms>
	#include <Waterstof.dms>
	#include <WaterstofData.dms>
	#include <BuurtWKO.dms>

	template BuurtWKO
	{
		// begin case parameters
		container BeginStatus;
		container AanbodKentallen;
		container EnergiePrijzen;
		parameter<yr_uint16> Jaar;
		// end case parameters

		container impl := BuurtWKOimpl(BeginStatus, EnergiePrijzen, Classifications/GebiedsOptie/V/BuurtWKO);
		unit<uint32> PlanRegio := .../PlanRegio;
		attribute<kg_yr> CO2 (PlanRegio) := impl/CO2;

		container Results := impl/Results
		{
			container BuurtWKO := impl/Results/BuurtWKO;
		}
	}
	template WaterstofHR
	{
		// begin case parameters
		container BeginStatus;
		container AanbodKentallen;
		container EnergiePrijzen;
		parameter<yr_uint16> Jaar;
		// end case parameters

		container impl := Waterstof(BeginStatus, EnergiePrijzen, Jaar, Classifications/GebiedsOptie/V/WaterstofHR);
		unit<uint32> PlanRegio := .../PlanRegio;
		attribute<kg_yr> CO2 (PlanRegio) := impl/CO2;

		container Results := impl/Results
		{
			container WaterstofHR := impl/Results/Waterstof;
		}
	}
	template WaterstofWP
	{
		// begin case parameters
		container BeginStatus;
		container AanbodKentallen;
		container EnergiePrijzen;
		parameter<yr_uint16> Jaar;
		// end case parameters
		
		container impl := Waterstof(BeginStatus, EnergiePrijzen, Jaar, Classifications/GebiedsOptie/V/WaterstofWP);
		unit<uint32> PlanRegio := .../PlanRegio;
		attribute<kg_yr> CO2 (PlanRegio) := impl/CO2;

		container Results := impl/Results
		{
			container WaterstofWP := impl/Results/Waterstof;
		}
	}
	template WijkWKK
	{
		// begin case parameters
		container BeginStatus;
		container AanbodKentallen;
		container EnergiePrijzen;
		parameter<yr_uint16> Jaar;
		// end case parameters

		//parameter<kg_GJ> CO2_GJ :=  impl/kosten/CO2_GJ + 0[GJ];

		// emissies per GJ gas voor WijkWKK
		parameter<kg_GJ> CO2_GJb := Prijzen/AardGas/CO2_GJ;
		parameter<g_GJ>  NOx_GJb :=  28[g_GJ];
		parameter<g_GJ>  SO2_GJb :=   0[g_GJ];
		parameter<g_GJ>  VOS_GJb := 420[g_GJ];
		parameter<g_GJ>  TS_GJb  :=   0[g_GJ];

		container impl := WijkTempl(BeginStatus, AanbodKentallen, EnergiePrijzen, Jaar, Kengetallen/WarmteBronnen/WijkWKK/TypeInfo, Classifications/GebiedsOptie/V/WijkWKK, '', 400[PJ_yr]), isHidden = "True";
		unit<uint32> PlanRegio := .../PlanRegio;
		attribute<kg_yr> CO2 (PlanRegio) := impl/CO2;

		container Results := impl/Results
		{
			container WijkWKK := impl/Results/WijkResults;
		}
	}
	
	template BioWKK
	{
		// begin case parameters
		container BeginStatus;
		container AanbodKentallen;
		container EnergiePrijzen;
		parameter<yr_uint16> Jaar;
		// end case parameters

		// emissies per GJ bio-brandstof voor BioWKK.
	//	parameter<kg_GJ> CO2_GJb :=  0[kg_GJ]; // obv definitie hernieuwbare bron.
		parameter<kg_GJ> CO2_GJb := Prijzen/AardGas/CO2_GJ; //TIJDELIJK
		parameter<g_GJ>  NOx_GJb := 49[g_GJ];
		parameter<g_GJ>  SO2_GJb := 10[g_GJ];
		parameter<g_GJ>  VOS_GJb :=  0[g_GJ];
		parameter<g_GJ>  TS_GJb  :=  2[g_GJ];

		container impl := WijkTempl(BeginStatus, AanbodKentallen, EnergiePrijzen, Jaar, Kengetallen/WarmteBronnen/BioWKK/TypeInfo, Classifications/GebiedsOptie/V/BioWKK, 'BioWKK_Start', 100[PJ_yr]), isHidden = "True";

		container Results := impl/Results
		{
			container BioWKK := impl/Results/WijkResults;
		}

		unit<uint32> PlanRegio := .../PlanRegio;
		attribute<kg_yr> CO2 (PlanRegio) := impl/CO2;
	}

	template Lt15_15
	{
		// begin case parameters
		container BeginStatus;
		container AanbodKentallen;
		container EnergiePrijzen;
		parameter<yr_uint16> Jaar;
		// end case parameters

		parameter<Classifications/gebiedsOptie> GebiedsOptie_rel := Classifications/gebiedsOptie/V/Lt15_15;
		container impl := LtWarmtenetimpl(BeginStatus, BeginStatus/Lt15_15, AanbodKentallen, EnergiePrijzen, Jaar, 15[Celsius], 30[Celsius]);
		container ObjectResults := impl/ObjectResults;
		container Results := impl/Results
		{
			container Lt15_15 := LtWarmtenet;
		}
	}
	template Lt15_30
	{
		// begin case parameters
		container BeginStatus;
		container AanbodKentallen;
		container EnergiePrijzen;
		parameter<yr_uint16> Jaar;
		// end case parameters

		parameter<Classifications/gebiedsOptie> GebiedsOptie_rel := Classifications/gebiedsOptie/V/Lt15_30;
		container impl := LtWarmtenetimpl(BeginStatus, BeginStatus/Lt15_30, AanbodKentallen, EnergiePrijzen, Jaar, 15[Celsius], 30[Celsius]);
		container ObjectResults := impl/ObjectResults;
		container Results := impl/Results
		{
			container Lt15_30 := LtWarmtenet;
		}
	}
	template Lt15_50
	{
		// begin case parameters
		container BeginStatus;
		container AanbodKentallen;
		container EnergiePrijzen;
		parameter<yr_uint16> Jaar;
		// end case parameters

		parameter<Classifications/gebiedsOptie> GebiedsOptie_rel := Classifications/gebiedsOptie/V/Lt15_50;
		container impl := LtWarmtenetimpl(BeginStatus, BeginStatus/Lt15_50, AanbodKentallen, EnergiePrijzen, Jaar, 15[Celsius], 50[Celsius]);
		container ObjectResults := impl/ObjectResults;
		container Results := impl/Results
		{
			container Lt15_50 := LtWarmtenet;
		}
	}
	template Lt15_70
	{
		// begin case parameters
		container BeginStatus;
		container AanbodKentallen;
		container EnergiePrijzen;
		parameter<yr_uint16> Jaar;
		// end case parameters

		parameter<Classifications/gebiedsOptie> GebiedsOptie_rel := Classifications/gebiedsOptie/V/Lt15_70;
		container impl := LtWarmtenetimpl(BeginStatus, BeginStatus/Lt15_70, AanbodKentallen, EnergiePrijzen, Jaar, 15[Celsius], 70[Celsius]);
		container ObjectResults := impl/ObjectResults;
		container Results := impl/Results
		{
			container Lt15_70 := LtWarmtenet;
		}
	}
	template Lt30_30
	{
		// begin case parameters
		container BeginStatus;
		container AanbodKentallen;
		container EnergiePrijzen;
		parameter<yr_uint16> Jaar;
		// end case parameters
		
		parameter<Classifications/gebiedsOptie> GebiedsOptie_rel := Classifications/gebiedsOptie/V/Lt30_30;
		container impl := LtWarmtenetimpl(BeginStatus, BeginStatus/Lt30_30, AanbodKentallen, EnergiePrijzen, Jaar, 30[Celsius], 30[Celsius]);
		container ObjectResults := impl/ObjectResults;
		container Results := impl/Results
		{
			container Lt30_30 := LtWarmtenet;
		}
	}
	template Lt30_50
	{
		// begin case parameters
		container BeginStatus;
		container AanbodKentallen;
		container EnergiePrijzen;
		parameter<yr_uint16> Jaar;
		// end case parameters
		
		parameter<Classifications/gebiedsOptie> GebiedsOptie_rel := Classifications/gebiedsOptie/V/Lt30_50;
		container impl := LtWarmtenetimpl(BeginStatus, BeginStatus/Lt30_50, AanbodKentallen, EnergiePrijzen, Jaar, 30[Celsius], 50[Celsius]);
		container ObjectResults := impl/ObjectResults;
		container Results := impl/Results
		{
			container Lt30_50 := LtWarmtenet;
		}
	}
	template Lt30_70
	{
		// begin case parameters
		container BeginStatus;
		container AanbodKentallen;
		container EnergiePrijzen;
		parameter<yr_uint16> Jaar;
		// end case parameters
		
		parameter<Classifications/gebiedsOptie> GebiedsOptie_rel := Classifications/gebiedsOptie/V/Lt30_70;
		container impl := LtWarmtenetimpl(BeginStatus, BeginStatus/Lt30_70, AanbodKentallen, EnergiePrijzen, Jaar, 30[Celsius], 70[Celsius]);
		container ObjectResults := impl/ObjectResults;
		container Results := impl/Results
		{
			container Lt30_70 := LtWarmtenet;
		}
	}

	template PlanregioOptieResultaat
	{
		unit<uint32> BebouwingsObject;
		parameter<Classifications/GebiedsOptie> Optie;
		attribute<bool> GebruikOptie(PlanRegio);
		unit<uint32> AfnameGebied;

		unit<uint32> PlanRegio := Invoer/SpecifiekeInstellingen/PlanRegio
		{
			attribute<uint32> Cluster_rel := (cumulate(uint32(GebruikOptie)) * uint32(GebruikOptie))-1;
		}

		unit<uint8> BcGebouwOptie := BebouwingsObject/BcGebouwOptie;
		parameter<BcGebouwOptie> Gebieds_BcGebouwOptie_rel_w := invert(BcGebouwOptie/nr_OrgEntity)[Classifications/GebiedsOptie/GebouwOptie_rel[Optie]];

		parameter<BcGebouwOptie> Gebieds_BcGebouwOptie_rel_u := invert(BcGebouwOptie/nr_OrgEntity)[Classifications/GebiedsOptie/GebouwOptie_rel_u[Optie]];
		
		parameter<BcGebouwOptie> Gebieds_BcGebouwOptie_rel := MakeDefined(Gebieds_BcGebouwOptie_rel_w, Gebieds_BcGebouwOptie_rel_u), IntegrityCheck = "IsDefined(this)";
		
		unit<uint32> results := BebouwingsObject
		{
			attribute<bool> Toewijzing := Classifications/WarmteOptie/kanGebiedsOptie[BebouwingsObject/WarmteOptie_rel] && GebruikOptie[PlanRegio_rel];
			
			attribute<BcGebouwOptie> GebouwOptie_rel := Toewijzing
				? Gebieds_BcGebouwOptie_rel
				: BebouwingsObject/GebouwOptie_rel;

			attribute<Classifications/WarmteOptie> WarmteOptie_rel := Toewijzing
				? Classifications/GebiedsOptie/WarmteOptie_rel[../Optie]
				: BebouwingsObject/WarmteOptie_rel;

			attribute<uint32> Cluster_rel := PlanRegio/Cluster_rel[PlanRegio_rel];

			attribute<AfnameGebied> AfnameGebied_rel := Toewijzing
				? value(#BeginStatus/AfnameGebied  + cumulate(uint32(GebruikOptie))[PlanRegio_rel], Afnamegebied)
				: value(BebouwingsObject/AfnameGebied_rel, Afnamegebied);
		}
	}

	template GebiedsAllocatieResultaat_cumuleren 
	{
		container Cumulator;
		container Increment;

		container jaarlijks:= for_each_nedv(classifications/gebiedsoptie_jaarlijks/full_name, replace('                         Increment/jaarlijks/@X@', '@X@', classifications/gebiedsoptie_jaarlijks/full_name), PlanRegio, Eur_yr);
		container eenmalig := for_each_nedv(classifications/gebiedsoptie_eenmalig/name,       replace('Cumulator/eenmalig/@X@ + Increment/eenmalig/@X@' , '@X@', classifications/gebiedsoptie_eenmalig/name      ), PlanRegio, Eur   );
		container Verbruik := for_each_nedv(classifications/gebiedsoptie_verbruik/name,       replace('Cumulator/Verbruik/@X@ + Increment/Verbruik/@X@' , '@X@', classifications/gebiedsoptie_verbruik/name      ), PlanRegio, GJ_yr );
		container Uitstoot := for_each_nedv(classifications/gebiedsoptie_uitstoot/name,       replace('Cumulator/Uitstoot/@X@ + Increment/Uitstoot/@X@' , '@X@', classifications/gebiedsoptie_uitstoot/name      ), PlanRegio, kg_yr );
	}
	
	template GebiedsAllocatieResultaat_verzamelen 
	{
		container Cumulaties;
		unit<uint8> GebiedsOptieSet;

		container jaarlijks:= for_each_nedv(classifications/gebiedsoptie_jaarlijks/full_name, replace('add('+AsItemList('Cumulaties/'+GebiedsOptieSet/name+'/jaarlijks/@X@')+')', '@X@', classifications/gebiedsoptie_jaarlijks/full_name), PlanRegio, Eur_yr);
		container eenmalig := for_each_nedv(classifications/gebiedsoptie_eenmalig/name,       replace('add('+AsItemList('Cumulaties/'+GebiedsOptieSet/name+'/eenmalig/@X@' )+')', '@X@', classifications/gebiedsoptie_eenmalig/name      ), PlanRegio, Eur);
		container Verbruik := for_each_nedv(classifications/gebiedsoptie_verbruik/name,       replace('add('+AsItemList('Cumulaties/'+GebiedsOptieSet/name+'/Verbruik/@X@' )+')', '@X@', classifications/gebiedsoptie_verbruik/name      ), PlanRegio, GJ_yr);
		container Uitstoot := for_each_nedv(classifications/gebiedsoptie_uitstoot/name,       replace('add('+AsItemList('Cumulaties/'+GebiedsOptieSet/name+'/Uitstoot/@X@' )+')', '@X@', classifications/gebiedsoptie_uitstoot/name      ), PlanRegio, kg_yr);
	}
	
}
