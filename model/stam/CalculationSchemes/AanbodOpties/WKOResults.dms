//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2020 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template WKOResults
{
	// begin case parameters
	unit<uint32> UnitedCandidates;
	unit<uint32> Cluster;
	unit<uint32> AfnameGebied;
	container WkoData;
	parameter<Classifications/WarmteOptie> WarmteOptie_rel;
	parameter<uint32> NrPrevAllowedObjects;
	parameter<uint32> NrPrevAllObjects;
	// end case parameters

	container WkoDataComponent      := WkoData/DataComponent;
	parameter<string> ComponentNaam := WkoData/ComponentNaam;

	container BeginStatusComponent  := ='BeginStatus/bebouwing/'+ComponentNaam;

	unit<uint32> BO        := WkoData/BO;
	unit<uint32> PlanRegio := Invoer/SpecifiekeInstellingen/PlanRegio;

	attribute<PlanRegio> Planregio_rel(BO) := BO/Planregio_rel;

	unit<uint32> AllowedObjects := WkoData/AllowedObjects
	{
		attribute<UnitedCandidates> UnitedCandidates_rel := value(id(.) + NrPrevAllowedObjects, UnitedCandidates);
		attribute<Cluster>          Cluster_Rel          := Cluster/Partitioning[UnitedCandidates_rel];
	}

	attribute<Cluster>      Cluster_rel      (BO) := AllowedObjects/Cluster_rel[invert(AllowedObjects/org_rel)];
	attribute<AfnameGebied> AfnameGebied_Rel (BO) := MakeDefined(Cluster_rel + #BeginStatus/AfnameGebied, BO/AfnameGebied_rel);
	attribute<bool>         HadWarmte        (BO) := not(Classifications/WarmteOptie/kanGebiedsOptie[BO/WarmteOptie_rel]);
	attribute<bool>         StartThis        (BO) := IsDefined(Cluster_rel), IntegrityCheck = "not(and(HadWarmte, IsDefined(Cluster_rel)))";
	attribute<bool>         WasThis          (BO) := (BO/WarmteOptie_rel == WarmteOptie_rel);
	attribute<bool>         HasThis          (BO) := StartThis || WasThis;

	//volumevraag voor nieuwe allocatie
	attribute<GJ_yr>        V_Warmte         (BO) := WkoData/DataComponent/V_Warmte    * float64(StartThis); // @@@ is Thermische Vraag
	attribute<GJ_yr>        V_Koude          (BO) := WkoData/DataComponent/V_Koude     * float64(StartThis), Source = "FO v7a F 54"; // @@@ is Thermische Vraag
	attribute<GJ_yr>        V_ElekW          (BO) := WkoData/DataComponent/V_id_W_Elek * float64(StartThis), Source = "FO v7a F 54"; // @@@ is Thermische Vraag
	attribute<GJ_yr>        V_ElekK          (BO) := WkoData/DataComponent/V_id_K_Elek * float64(StartThis), Source = "FO v7a F 54"; // @@@ is Thermische Vraag
	attribute<GJ_yr>        V_Elek           (BO) := V_ElekW + V_ElekK;

	//volumevraag na nieuwe allocatie
	attribute<GJ_yr>        V_WarmteC        (BO) := WkoData/DataComponent/V_Warmte		* float64(StartThis); // @@@ is Thermische Vraag
	attribute<GJ_yr>        V_KoudeC         (BO) := WkoData/DataComponent/V_Koude		* float64(StartThis), Source = "FO v7a F 54"; // @@@ is Thermische Vraag
	attribute<GJ_yr>        V_ElekWC         (BO) := WkoData/DataComponent/V_id_W_Elek	* float64(StartThis), Source = "FO v7a F 54"; // @@@ is Thermische Vraag
	attribute<GJ_yr>        V_ElekKC         (BO) := WkoData/DataComponent/V_id_K_Elek	* float64(StartThis), Source = "FO v7a F 54"; // @@@ is Thermische Vraag
	attribute<GJ_yr>        V_ElekC          (BO) := V_ElekWC + V_ElekKC;

	attribute<kW>           P_Warmte         (BO) := WkoData/DataComponent/WarmteVraagComponent/AansluitCapaciteit * float64(StartThis);

	container BC
	{
		attribute<Eur>    Ki_ow_gebied      (BO) := AllObjects/Ki_ow_gebied     [value(id(BO) + NrPrevAllObjects, AllObjects)] * float64(StartThis);
		attribute<Eur>    Ki_wd_gebied      (BO) := AllObjects/Ki_wd_gebied     [value(id(BO) + NrPrevAllObjects, AllObjects)] * float64(StartThis);
		attribute<Eur_yr> Kji_ow_gebied     (BO) := AllObjects/Kji_ow_gebied    [value(id(BO) + NrPrevAllObjects, AllObjects)] * float64(StartThis);
		attribute<Eur_yr> Kji_wd_gebied     (BO) := AllObjects/Kji_wd_gebied    [value(id(BO) + NrPrevAllObjects, AllObjects)] * float64(StartThis);

		attribute<Eur>    Oi_wd_EIA_gebied  (BO) := AllObjects/Oi_wd_EIA_gebied [value(id(BO) + NrPrevAllObjects, AllObjects)] * float64(StartThis);
		attribute<Eur>    Oi_ow_EIA_gebied  (BO) := AllObjects/Oi_ow_EIA_gebied [value(id(BO) + NrPrevAllObjects, AllObjects)] * float64(StartThis);
		attribute<Eur_yr> Oji_wd_EIA_gebied (BO) := AllObjects/Oji_wd_EIA_gebied[value(id(BO) + NrPrevAllObjects, AllObjects)] * float64(StartThis);
		attribute<Eur_yr> Oji_ow_EIA_gebied (BO) := AllObjects/Oji_ow_EIA_gebied[value(id(BO) + NrPrevAllObjects, AllObjects)] * float64(StartThis);

		attribute<Eur_yr> Kj_wd_oh_gebied   (BO) := AllObjects/Kj_wd_oh_gebied  [value(id(BO) + NrPrevAllObjects, AllObjects)] * float64(StartThis);
		attribute<Eur_yr> Kj_ow_oh_gebied   (BO) := AllObjects/Kj_ow_oh_gebied  [value(id(BO) + NrPrevAllObjects, AllObjects)] * float64(StartThis);
		attribute<Eur_yr> Kj_wd_adm_gebied  (BO) := AllObjects/Kj_wd_adm_gebied [value(id(BO) + NrPrevAllObjects, AllObjects)] * float64(StartThis);
		attribute<Eur_yr> Kj_ow_adm_gebied  (BO) := AllObjects/Kj_ow_adm_gebied [value(id(BO) + NrPrevAllObjects, AllObjects)] * float64(StartThis);
	}

	container PR
	{
		attribute<Eur>    Ki_ow_gebied      (PlanRegio) := sum(BC/Ki_ow_gebied     , Planregio_rel);
		attribute<Eur>    Ki_wd_gebied      (PlanRegio) := sum(BC/Ki_wd_gebied     , Planregio_rel);
		attribute<Eur_yr> Kji_ow_gebied     (PlanRegio) := sum(BC/Kji_ow_gebied    , Planregio_rel);
		attribute<Eur_yr> Kji_wd_gebied     (PlanRegio) := sum(BC/Kji_wd_gebied    , Planregio_rel);

		attribute<Eur>    Oi_wd_EIA_gebied  (PlanRegio) := sum(BC/Oi_wd_EIA_gebied , Planregio_rel);
		attribute<Eur>    Oi_ow_EIA_gebied  (PlanRegio) := sum(BC/Oi_ow_EIA_gebied , Planregio_rel);
		attribute<Eur_yr> Oji_wd_EIA_gebied (PlanRegio) := sum(BC/Oji_wd_EIA_gebied, Planregio_rel);
		attribute<Eur_yr> Oji_ow_EIA_gebied (PlanRegio) := sum(BC/Oji_ow_EIA_gebied, Planregio_rel);

		attribute<Eur_yr> Kj_wd_oh_gebied   (PlanRegio) := sum(BC/Kj_wd_oh_gebied  , Planregio_rel);
		attribute<Eur_yr> Kj_ow_oh_gebied   (PlanRegio) := sum(BC/Kj_ow_oh_gebied  , Planregio_rel);
		attribute<Eur_yr> Kj_wd_adm_gebied  (PlanRegio) := sum(BC/Kj_wd_adm_gebied , Planregio_rel);
		attribute<Eur_yr> Kj_ow_adm_gebied  (PlanRegio) := sum(BC/Kj_ow_adm_gebied , Planregio_rel);

		attribute<Eur>    Ki_ow             (PlanRegio) := Ki_ow_gebied + sum(WkoData/Ki_ow * float64(StartThis), Planregio_rel);
		attribute<Eur>    Ki_wd             (PlanRegio) := Ki_wd_gebied + sum(WkoData/Ki_wd * float64(StartThis), Planregio_rel);
		attribute<Eur>    Ki_id             (PlanRegio) := sum(WkoData/Ki_id    * float64(StartThis), Planregio_rel);
		attribute<Eur>    Ki_ge             (PlanRegio) := sum(WkoData/Ki_ge    * float64(StartThis), Planregio_rel);
		attribute<Eur>    Ki_ge_ov          (PlanRegio) := sum(WkoData/Ki_ge_ov * float64(StartThis), Planregio_rel);
		attribute<Eur>    Ki_ge_pm          (PlanRegio) := sum(WkoData/Ki_ge_pm * float64(StartThis), Planregio_rel);
		attribute<Eur_yr> Kji_ge            (PlanRegio) := sum(WkoData/Kji_ge   * float64(StartThis), Planregio_rel);
		attribute<Eur_yr> Kji_id            (PlanRegio) := sum(WkoData/Kji_id   * float64(StartThis), Planregio_rel);

		attribute<Eur>    Oi_ge_EIA         (PlanRegio) := sum(WkoData/Oi_ge_EIA * float64(StartThis), Planregio_rel);
		attribute<Eur>    Oi_id_EIA         (PlanRegio) := sum(WkoData/Oi_id_EIA * float64(StartThis), Planregio_rel);
		attribute<Eur>    Oi_wd_EIA         (PlanRegio) := Oi_wd_EIA_gebied + sum(WkoData/Oi_wd_EIA * float64(StartThis), Planregio_rel);
		attribute<Eur>    Oi_ow_EIA         (PlanRegio) := Oi_ow_EIA_gebied + sum(WkoData/Oi_ow_EIA * float64(StartThis), Planregio_rel);

		attribute<Eur_yr> Oj_SDE            (PlanRegio) := sum(WkoData/Oj_SDE * float64(hasThis) , Planregio_rel);

		container OenM
		{
			attribute<Eur_yr> Kj_wd_oh  (PlanRegio) := Kj_wd_oh_gebied  + sum(WkoData/Kj_wd_oh * float64(StartThis), Planregio_rel);
			attribute<Eur_yr> Kj_id_oh  (PlanRegio) :=                    sum(WkoData/Kj_id_oh * float64(StartThis), Planregio_rel);
			attribute<Eur_yr> Kj_ow_oh  (PlanRegio) := Kj_ow_oh_gebied  + sum(WkoData/Kj_ow_oh * float64(StartThis), Planregio_rel);

			attribute<Eur_yr> Kj_wd_adm (PlanRegio) := Kj_wd_adm_gebied + sum(WkoData/Kj_wd_adm * float64(StartThis), Planregio_rel);
			attribute<Eur_yr> Kj_id_adm (PlanRegio) :=                    sum(WkoData/Kj_id_adm * float64(StartThis), Planregio_rel);
			attribute<Eur_yr> Kj_ow_adm (PlanRegio) := Kj_wd_adm_gebied + sum(WkoData/Kj_ow_adm * float64(StartThis), Planregio_rel);
		}
		container Nieuw
		{
			attribute<Eur>   Oi_Aansl    (PlanRegio) := sum(WkoData/Oi_Aansl     * float64(StartThis), Planregio_rel);
			attribute<KG_yr> CO2         (PlanRegio) := sum(WkoData/CO2          * float64(StartThis), Planregio_rel);
			attribute<GJ_yr> GJe         (PlanRegio) := sum(WkoData/GJe          * float64(StartThis), Planregio_rel);
			attribute<GJ_yr> GJw         (PlanRegio) := sum(WkoData/GJw          * float64(StartThis), Planregio_rel);
			attribute<GJ_yr> V_wd_verlies(PlanRegio) := sum(WkoData/V_wd_verlies * float64(StartThis), Planregio_rel);
			attribute<GJ_yr> V_id_elek   (PlanRegio) := sum(WkoData/V_id_elek    * float64(StartThis), Planregio_rel);
			attribute<GJ_yr> V_wd_elek   (PlanRegio) := sum(WkoData/V_wd_elek    * float64(StartThis), Planregio_rel);
			attribute<GJ_yr> V_warmte    (PlanRegio) := sum(WkoData/V_warmte     * float64(StartThis), Planregio_rel);
			attribute<GJ_yr> V_koude     (PlanRegio) := sum(WkoData/V_koude      * float64(StartThis), Planregio_rel);
		}

		container Totaal
		{
			attribute<KG_yr> CO2          (PlanRegio) := sum(WkoData/CO2              * float64(hasThis), Planregio_rel);
			attribute<GJ_yr> GJe          (PlanRegio) := sum(WkoData/GJe              * float64(hasThis), Planregio_rel);
			attribute<GJ_yr> GJw          (PlanRegio) := sum(WkoData/GJw              * float64(hasThis), Planregio_rel);
			attribute<GJ_yr> V_wd_verlies (PlanRegio) := sum(WkoData/V_wd_verlies     * float64(hasThis), Planregio_rel);
			attribute<GJ_yr> V_id_elek    (PlanRegio) := sum(WkoData/V_id_elek        * float64(hasThis), Planregio_rel);
			attribute<GJ_yr> V_wd_elek    (PlanRegio) := sum(WkoData/V_wd_elek        * float64(hasThis), Planregio_rel);
			attribute<GJ_yr> V_ow_elek    (PlanRegio) := sum(WkoData/V_ow_elek        * float64(hasThis), Planregio_rel);
			attribute<GJ_yr> V_warmte     (PlanRegio) := sum(WkoData/V_warmte         * float64(hasThis), Planregio_rel);
			attribute<GJ_yr> V_koude      (PlanRegio) := sum(WkoData/V_koude          * float64(hasThis), Planregio_rel);

			//opbrengsten
			attribute<Eur_yr> Oj_verbruik  (PlanRegio) := sum(WkoData/Oj_verbruik     * float64(HasThis), Planregio_rel);
			attribute<Eur_yr> Oj_vastrecht (PlanRegio) := sum(WkoData/Oj_Vastrecht    * float64(HasThis), Planregio_rel);
			attribute<Eur_yr> Om_comfort   (PlanRegio) := sum(WkoData/Om_comfort      * float64(HasThis), Planregio_rel);

			attribute<Eur_yr>Kj_wd_elek     (PlanRegio) := sum(WkoData/Kj_wd_elek     * float64(hasThis), Planregio_rel);
			attribute<Eur_yr>Kj_wd_elek_EH  (PlanRegio) := sum(WkoData/Kj_wd_elek_EH  * float64(hasThis), Planregio_rel);
			attribute<Eur_yr>Kj_wd_elek_CO2 (PlanRegio) := sum(WkoData/Kj_wd_elek_CO2 * float64(hasThis), Planregio_rel);
			attribute<Eur_yr>Km_wd_elek     (PlanRegio) := sum(WkoData/Km_wd_elek     * float64(hasThis), Planregio_rel);

			attribute<Eur_yr>Kj_id_elek     (PlanRegio) := sum(WkoData/Kj_id_elek     * float64(hasThis), Planregio_rel);
			attribute<Eur_yr>Kj_id_elek_EH  (PlanRegio) := sum(WkoData/Kj_id_elek_EH  * float64(hasThis), Planregio_rel);
			attribute<Eur_yr>Kj_id_elek_CO2 (PlanRegio) := sum(WkoData/Kj_id_elek_CO2 * float64(hasThis), Planregio_rel);
			attribute<Eur_yr>Km_id_elek     (PlanRegio) := sum(WkoData/Km_id_elek     * float64(hasThis), Planregio_rel);

			attribute<Eur_yr>Kj_ow_elek     (PlanRegio) := sum(WkoData/Kj_ow_elek     * float64(hasThis), Planregio_rel);
			attribute<Eur_yr>Kj_ow_elek_EH  (PlanRegio) := sum(WkoData/Kj_ow_elek_EH  * float64(hasThis), Planregio_rel);
			attribute<Eur_yr>Kj_ow_elek_CO2 (PlanRegio) := sum(WkoData/Kj_ow_elek_CO2 * float64(hasThis), Planregio_rel);
			attribute<Eur_yr>Km_ow_elek     (PlanRegio) := sum(WkoData/Km_ow_elek     * float64(hasThis), Planregio_rel);
		}
	}

	unit<uint32> Result := BO
	{
		parameter<Classifications/Warmteoptie> Optie := ../WarmteOptie_rel;
		attribute<bool> Toewijzing := Classifications/WarmteOptie/kanGebiedsOptie[BO/WarmteOptie_rel] && StartThis;

		parameter<string> BCname := Componentnaam;

		attribute<float64> s1_name := Invoer/RuimtelijkeData/leidraad_oktober_2019/buurt/S1_variant_keuze_code[BO/Planregio_rel];

		parameter<bool> LTvsEWP := (Componentnaam == 'BestaandeUtil' ||  Componentnaam == 'BestaandeWoning') && Voorkeuren/Afweging/LTversusWP;

		attribute<bool> S1isS1a     := s1_name == 0d;
		attribute<bool> S1isS1b     := not(S1isS1a);
		attribute<bool> isWoning    := const(Componentnaam == 'BestaandeWoning' , .);

		attribute<bool> Util_G_bWP := (Componentnaam == 'BestaandeUtil'  ) && BO/AansluitCapaciteit/RV >= 100 kW && S1isS1b;
		attribute<bool> Util_K_bWP := (Componentnaam == 'BestaandeUtil'  ) && not(Util_G_bWP) && S1isS1b;
		attribute<bool> Util_l_WP  := not(isWoning) && S1isS1a;

		attribute<bool> Woon_LeWP := isWoning && S1isS1a;
		attribute<bool> Woon_BeWP := isWoning && S1isS1b;
		unit<uint8> BcGebouwOptie := BO/BcGebouwOptie;
		
		attribute<Classifications/GebouwOptie> GebouwOptie_Alternatief_rel :=
			Util_G_bWP ? Classifications/GebouwOptie/V/BeWPuG :
			Util_K_bWP ? Classifications/GebouwOptie/V/BeWPuK :
			Util_l_WP  ? Classifications/GebouwOptie/V/LeWPu  :
			Woon_LeWP  ? Classifications/GebouwOptie/V/LeWPw  :
			Woon_BeWP  ? Classifications/GebouwOptie/V/BeWPw 
			           : BcGebouwOptie/nr_OrgEntity[ BO/GebouwOptie_rel ];
					   
		attribute<BcGebouwOptie> BcGebouwOptie_Alternatief := invert(BcGebouwOptie/nr_OrgEntity)[GebouwOptie_Alternatief_rel];
		
		parameter<BcGebouwOptie> Gebieds_BcGebouwOptie_rel := invert(BcGebouwOptie/nr_OrgEntity)[Classifications/GebiedsOptie/GebouwOptie_rel[GebiedsOptie_rel]], IntegrityCheck = "IsDefined(this)";
		
		attribute<BcGebouwOptie> GebouwOptie_rel := StartThis ? Gebieds_BcGebouwOptie_rel : LTvsEWP ? BcGebouwOptie_Alternatief : BO/GebouwOptie_rel;
		attribute<Classifications/WarmteOptie> WarmteOptie_rel (BO) := 
			Toewijzing
			?	Optie
			:	BeginStatusComponent/WarmteOptie_rel;
		
//		attribute<Classifications/WarmteOptie> WarmteOptie_rel (BO) := StartThis ? BO/WarmteOptie_rel : BeginStatusComponent/WarmteOptie_rel;
//		attribute<Eur_yr>  KoudeAllocatie (BO) := StartThis ? WKODataComponent/Opbrengsten/Oj_Koude   : BeginStatusComponent/KoudeAllocatie;
//		attribute<Eur_yr>  Om_comfort     (BO) := StartThis ? WKODataComponent/Opbrengsten/Om_comfort : BeginStatusComponent/Om_comfort;
		attribute<Cluster> WkoCluster_rel (BO) := Cluster_rel;
	}
}