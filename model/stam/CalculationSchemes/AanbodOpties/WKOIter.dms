//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2020 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template WKOIter
{
	// begin case parameters
	unit <uint32> Candidates;
	unit <uint32> UnitedCandidates;
	// end case parameters

	// Van elke bestaande cluster (of individueel ongeclusterd gebouw) wordt bepaald wat de huidige contributie marge is, inclusief verrekening van huidig WD netwerk (netto contributiemarge)
	unit <uint32> ClusterSet := Unique(Candidates/point) // dit moet omdat connect_points anders weigert.
	,	DialogType = "Map"
	,	DialogData = "point"
	{
		// clusters of gebouwen van laatste iteratie
		attribute<.> RelPartitioning (Candidates)       := rlookup(Candidates/point, Values);
		attribute<.> Partitioning    (UnitedCandidates) := RelPartitioning[Candidates/Partitioning];

		attribute<rdc_meter> point             := Values;
		attribute<string>    label             := AsItemList(Candidates/label, RelPartitioning), DialogType = "labelText";
		attribute<Eur_yr>    Contributiemarge  := sum(Candidates/Contributiemarge, RelPartitioning);
		attribute<kW>        P_sec             := sum(Candidates/P_sec, RelPartitioning);

		// huidige WD netwerkkosten worden bepaald
		attribute<float64> n                   :=  sum(Candidates/n,                     RelPartitioning);
		attribute<float64> MEAN_x              :=  sum(Candidates/n * Candidates/MEAN_x, RelPartitioning) / n;
		attribute<float64> MEAN_y              :=  sum(Candidates/n * Candidates/MEAN_y, RelPartitioning) / n;
		attribute<float64> SSD_xx              :=  sum(Candidates/SSD_xx,                RelPartitioning);
		attribute<float64> SSD_xy              :=  sum(Candidates/SSD_xy,                RelPartitioning);
		attribute<float64> SSD_yy              :=  sum(Candidates/SSD_yy,                RelPartitioning);
		attribute<float64> SqrtDetSSD          :=  MakeDefined(Sqrt(SSD_xx*SSD_yy-SSD_xy*SSD_xy), 0.0);
		attribute<m2>      AreaProxy           :=  (PI() * SqrtDetSSD / n)[m2];
		attribute<m>       LengthProxy         := =(GebiedsOptie_rel == Classifications/gebiedsOptie/V/TEO) 
			? 'min(UnitedCandidates/LengthProxy, Partitioning)' 
			: 'const(0[m], .)';

		container secundairnet
		{
			attribute<kW>    P_sec_kW       (ClusterSet) := P_sec;
			attribute<MW>    P_sec_MW       (ClusterSet) := P_sec_kW / 1000[kW / MW];
			attribute<Eur_m> K_min_sec      (ClusterSet) := P_sec_MW > 0[MW] ? 400[Eur_m] + 210[Eur / m] * (P_sec_MW * 1.0[1 / MW])^ 0.5 : 0[Eur_m], Source = "Functioneel Ontwerp 4.0 bijlage A.11";
			attribute<Eur_m> K_max_sec      (ClusterSet) := P_sec_MW > 0[MW] ? 800[Eur_m] + 200[Eur / m] * (P_sec_MW * 1.0[1 / MW])^ 0.6 : 0[Eur_m], Source = "Functioneel Ontwerp 4.0 bijlage A.11";
			attribute<Eur_m> K_m_sec        (ClusterSet) := (K_min_sec * Schuiven/KostenMin + K_max_sec * Schuiven/KostenMax) * Leercurves/MTnet/Curve;
			attribute<nrOS>  Onderstations  (ClusterSet) := P_sec_kW / Invoer/Kengetallen/Constanten/Vermogen_OS;
			attribute<m>     L_hoofdleiding (ClusterSet) := Invoer/Kengetallen/Constanten/Omwegfactor * sqrt(2.0)* sqrt(AreaProxy);
			attribute<Eur>   K_hoofdleiding (ClusterSet) := L_hoofdleiding * K_m_sec;
			attribute<m_OS>  meter_OS       (ClusterSet) := Invoer/Kengetallen/Constanten/Omwegfactor * 0.25 * 0.5 * sqrt(2.0) * sqrt(AreaProxy) / 1.0[nrOS];
			attribute<m>     L_zijleiding   (ClusterSet) := Onderstations * meter_OS;
			attribute<Eur>   K_zijleiding   (ClusterSet) := L_zijleiding * K_m_sec;
			attribute<Eur>   Ki_wd          (ClusterSet) := K_hoofdleiding + K_zijleiding;
		}

		attribute<MW> P_bronnet := secundairnet/P_sec_MW * Efficiency/AandeelPrimairVermogen;
		container LeidingKosten := BuisKostenBC(., P_bronnet);

		attribute<Eur> Ki_ow_WKO := =(GebiedsOptie_rel == Classifications/gebiedsOptie/V/TEO)
			? 'const(KostenKentallen/Ki_WKO_vast, .)' 
			: 'const(KostenKentallen/Ki_WKO_vast * KostenKentallen/R_Regeneratie, .)';

		attribute<Eur_yr> Kji_ow_WKO := Ki_ow_WKO * 
			((  NCW/ow28/AnnualisationFactor * (1.0 - SpecifiekeInstellingen/Beleid/EIA/WKO)
			  + Leercurves/OenM/Curve * (Kengetallen/Onderhoud/R_ow_onderhoud + Kengetallen/Onderhoud/R_ow_admin)
			));

		attribute<Eur> Ki_ow_bronleiding := =not(GebiedsOptie_rel == Classifications/gebiedsOptie/V/TEO) 
			? 'const(0[Eur],.)' 
			: 'Leidingkosten/A * LengthProxy * leercurves/LTnet/Curve * (LeidingKosten/K_min * Schuiven/KostenMin + LeidingKosten/K_max * Schuiven/KostenMax) + KostenKentallen/Ki_TEO_vast';

		attribute<Eur_yr> Kji_ow_bronleiding := Ki_ow_bronleiding *
			((  NCW/ow28/AnnualisationFactor * (1.0 - SpecifiekeInstellingen/Beleid/EIA/WKO)
			  + Leercurves/OenM/Curve * (Kengetallen/Onderhoud/R_ow_onderhoud + Kengetallen/Onderhoud/R_ow_admin)
			));

		attribute<Eur>    Ki_wd  := =KoudeBeschikbaar ? '1.2d * secundairnet/Ki_wd' : 'secundairnet/Ki_wd';
		attribute<Eur_yr> Kji_wd := Ki_wd * 
			((  NCW/wd28/AnnualisationFactor * (1.0 - SpecifiekeInstellingen/Beleid/EIA/wd ) 
			  + Leercurves/OenM/Curve * (Kengetallen/Onderhoud/R_wd_onderhoud + Kengetallen/Onderhoud/R_wd_admin)
			));

		// huidige netto contributiemarge
		attribute<Eur_yr> Oji_netto := Contributiemarge - Kji_wd - Kji_ow_bronleiding - Kji_ow_WKO;

		// van elk gebouw of cluster wordt de dichtstbijzijnde buur bepaald, met wie nog niet is geclusterd en met wie de nabijheidrelatie wederkerig is
		attribute<.>    Neighbour    := connect_neighbour(point);
		attribute<bool> InCluster    := Neighbour[Neighbour] == id(.); //neighbour is wederzijds indien true
		attribute<bool> CanCluster   := Neighbour > id(.) && InCluster;
		attribute<bool> NotInCluster := Not(InCluster);

		// aan de hand van de bepalingen in Joinedcluster worden deze cluster gekoppeld aan de buur of niet, zo niet dan is de cluster af
		attribute<bool> DontCluster    := InCluster && (CanCluster ? !JoinedClusters/src1_OK[invert(JoinedClusters/src1)] : !JoinedClusters/src2_OK[invert(JoinedClusters/src2)]);
		attribute<bool> SelectAfweging := DontCluster;
	}

	// afweging om te clusteren met buur
	unit <uint32> JoinedClusters := Subset(ClusterSet/CanCluster), DialogType = "Map", DialogData = "point"
	{
		unit<uint32> Candidates := ClusterSet;

		attribute<Candidates> src1 := nr_OrgEntity;
		attribute<Candidates> src2 := ClusterSet/Neighbour[nr_OrgEntity];

		attribute<.> Partitioning (UnitedCandidates) := MakeDefined(invert(src1)[Candidates/Partitioning], invert(src2)[Candidates/Partitioning]);

		// huidige contributiemarge en netto contributiemarge
		attribute<string> label            := '['+Candidates/label  [src1] + ';' + Candidates/label[src2]+']', DialogType = "labelText";
		attribute<Eur_yr> Contributiemarge := Candidates/Contributiemarge [src1] + Candidates/Contributiemarge [src2];
		attribute<kW>     P_sec            := Candidates/P_sec            [src1] + Candidates/P_sec            [src2];
		attribute<Eur_yr> Oji_netto        := Candidates/Oji_netto        [src1] + Candidates/Oji_netto        [src2];

		// berekening extra kosten om met buur te clusteren
		attribute<float64> n1              := Candidates/n[src1];
		attribute<float64> n2              := Candidates/n[src2];
		attribute<float64> n               := n1 + n2;
		attribute<float64> MEAN_x          := (n1*Candidates/MEAN_x[src1] + n2*Candidates/MEAN_x[src2]) / n;
		attribute<float64> MEAN_y          := (n1*Candidates/MEAN_y[src1] + n2*Candidates/MEAN_y[src2]) / n;
		attribute<float64> DIFF_x          := Candidates/MEAN_x[src1] - Candidates/MEAN_x[src2];
		attribute<float64> DIFF_y          := Candidates/MEAN_y[src1] - Candidates/MEAN_y[src2];
		attribute<float64> SSD_xx          := Candidates/SSD_xx[src1] + Candidates/SSD_xx[src2] + (n1*n2 / n) * DIFF_x * DIFF_x;
		attribute<float64> SSD_xy          := Candidates/SSD_xy[src1] + Candidates/SSD_xy[src2] + (n1*n2 / n) * DIFF_x * DIFF_y;
		attribute<float64> SSD_yy          := Candidates/SSD_yy[src1] + Candidates/SSD_yy[src2] + (n1*n2 / n) * DIFF_y * DIFF_y;

		attribute<float64> SqrtDetSSD      := MakeDefined(Sqrt(SSD_xx*SSD_yy-SSD_xy*SSD_xy), 0.0);
		attribute<m2>      AreaProxy       := (PI() * SqrtDetSSD / n)[m2];
		attribute<m>       LengthProxy     := =(GebiedsOptie_rel == Classifications/gebiedsOptie/V/TEO) ? 'min(UnitedCandidates/LengthProxy, Partitioning)' : 'const(0[m],.)';

		container secundairnet
		{
			attribute<kW>    P_sec_kW       (JoinedClusters) := P_sec;
			attribute<MW>    P_sec_MW       (JoinedClusters) := P_sec_kW / 1000[kW / MW];
			attribute<Eur_m> K_min_sec      (JoinedClusters) := P_sec_MW > 0[MW] ? 400[Eur_m] + 210[Eur / m] * (P_sec_MW * 1.0[1 / MW])^ 0.5 : 0[Eur_m], Source = "Functioneel Ontwerp 4.0 bijlage A.11";
			attribute<Eur_m> K_max_sec      (JoinedClusters) := P_sec_MW > 0[MW] ? 800[Eur_m] + 200[Eur / m] * (P_sec_MW * 1.0[1 / MW])^ 0.6 : 0[Eur_m], Source = "Functioneel Ontwerp 4.0 bijlage A.11";
			attribute<Eur_m> K_m_sec        (JoinedClusters) := (K_min_sec * Schuiven/KostenMin + K_max_sec * Schuiven/KostenMax) * Leercurves/MTnet/Curve;
			attribute<nrOS>  Onderstations  (JoinedClusters) := P_sec_kW / Invoer/Kengetallen/Constanten/Vermogen_OS;
			attribute<m>     L_hoofdleiding (JoinedClusters) := Invoer/Kengetallen/Constanten/Omwegfactor * sqrt(2.0)* sqrt(AreaProxy);
			attribute<Eur>   K_hoofdleiding (JoinedClusters) := L_hoofdleiding * K_m_sec;
			attribute<m_OS>  meter_OS       (JoinedClusters) := Invoer/Kengetallen/Constanten/Omwegfactor * 0.25 * 0.5 * sqrt(2.0) * sqrt(AreaProxy) / 1[nrOS];
			attribute<m>     L_zijleiding   (JoinedClusters) := Onderstations * meter_OS;
			attribute<Eur>   K_zijleiding   (JoinedClusters) := L_zijleiding * K_m_sec;
			attribute<Eur>   Ki_wd          (JoinedClusters) := K_hoofdleiding + K_zijleiding;
		}

		attribute<Eur> Ki_ow_WKO := =(GebiedsOptie_rel == Classifications/gebiedsOptie/V/TEO) 
			? 'const(KostenKentallen/Ki_WKO_vast, .)' 
			: 'const(KostenKentallen/Ki_WKO_vast * KostenKentallen/R_Regeneratie, .)';

		attribute<Eur_yr> Kji_ow_WKO := Ki_ow_WKO * 
			((NCW/ow28/AnnualisationFactor * (1.0 - SpecifiekeInstellingen/Beleid/EIA/WKO ) + Leercurves/OenM/Curve * (Kengetallen/Onderhoud/R_ow_onderhoud + Kengetallen/Onderhoud/R_ow_admin)));

		attribute<MW> P_bronnet := secundairnet/P_sec_MW * Efficiency/AandeelPrimairVermogen;
		container LeidingKosten := BuisKostenBC(., P_bronnet);

		attribute<Eur> Ki_ow_bronleiding := = not(GebiedsOptie_rel == Classifications/gebiedsOptie/V/TEO) 
			? 'const(0[Eur],.)' 
			: 'Leidingkosten/A * LengthProxy * leercurves/LTnet/Curve * (LeidingKosten/K_min * Schuiven/KostenMin + LeidingKosten/K_max * Schuiven/KostenMax) + KostenKentallen/Ki_TEO_vast';

		attribute<Eur_yr> Kji_ow_bronleiding := Ki_ow_bronleiding *
			((NCW/ow28/AnnualisationFactor * (1.0 - SpecifiekeInstellingen/Beleid/EIA/WKO)
			+ Leercurves/OenM/Curve * (Kengetallen/Onderhoud/R_ow_onderhoud + Kengetallen/Onderhoud/R_ow_admin)));

		attribute<Eur>    Ki_wd  := = KoudeBeschikbaar ? '1.2 * secundairnet/Ki_wd' : 'secundairnet/Ki_wd';
		attribute<Eur_yr> Kji_wd := Ki_wd * 
			 ((NCW/wd28/AnnualisationFactor * (1.0 - SpecifiekeInstellingen/Beleid/EIA/wd)
			 + Leercurves/OenM/Curve * (Kengetallen/Onderhoud/R_wd_onderhoud + Kengetallen/Onderhoud/R_wd_admin)));

		attribute<Eur>    Ki_ow_bronleiding_extra  := Ki_ow_bronleiding - Candidates/Ki_ow_bronleiding[src1] - Candidates/Ki_ow_bronleiding[src2];
		attribute<Eur_yr> Kji_ow_bronleiding_extra := Ki_ow_bronleiding_extra *
			((NCW/ow28/AnnualisationFactor * (1.0 - SpecifiekeInstellingen/Beleid/EIA/WKO)
			+ Leercurves/OenM/Curve * (Kengetallen/Onderhoud/R_ow_onderhoud + Kengetallen/Onderhoud/R_ow_admin)));

		attribute<Eur>    Ki_wd_extra  := Ki_wd - Candidates/Ki_wd[src1] - Candidates/Ki_wd[src2];
		attribute<Eur_yr> Kji_wd_extra := Ki_wd_extra *
			((NCW/wd28/AnnualisationFactor * (1.0 - SpecifiekeInstellingen/Beleid/EIA/wd )
			+ Leercurves/OenM/Curve * (Kengetallen/Onderhoud/R_wd_onderhoud + Kengetallen/Onderhoud/R_wd_admin)));

		attribute<Eur>    Ki_ow_WKO_extra  := Ki_ow_WKO - Candidates/Ki_ow_WKO[src1] - Candidates/Ki_ow_WKO[src2];
		attribute<Eur_yr> Kji_ow_WKO_extra := Ki_ow_WKO_extra *
			((NCW/ow28/AnnualisationFactor * (1.0 - SpecifiekeInstellingen/Beleid/EIA/WKO )
			+ Leercurves/OenM/Curve * (Kengetallen/Onderhoud/R_ow_onderhoud + Kengetallen/Onderhoud/R_ow_admin)));

		// check of clustering leidt tot hogere gezamenlijke netto contributiemarge
		attribute<ratio> src1_Paandeel := Candidates/P_sec[src1] / secundairnet/P_sec_kW;
		attribute<ratio> src2_Paandeel := Candidates/P_sec[src2] / secundairnet/P_sec_kW;

		attribute<Eur_yr> Oji_netto_combine := Oji_netto - Kji_wd_extra - Kji_ow_bronleiding_extra - Kji_ow_WKO_extra;

		attribute<bool> src1_OK := Candidates/Oji_netto[src1] <= src1_Paandeel * Oji_netto_combine;
		attribute<bool> src2_OK := Candidates/Oji_netto[src2] <= src2_Paandeel * Oji_netto_combine;

		attribute<bool> Reciprocal := src2_OK && src1_OK;

		// nieuw punt voor gezamenlijke cluster wordt bepaald
		attribute<rdc_meter> point := point_yx(MEAN_y, MEAN_x, rdc_meter);
	}

	// clusters die zinvol zijn om samen te voegen omdat dit leidt tot hogerte gezamenlijke netto contributiemarge
	unit <uint32> UsefulClusters := subset(JoinedClusters/src1_OK && JoinedClusters/src2_OK)
	{
		attribute<.> Partitioning (UnitedCandidates) := invert(nr_OrgEntity)[JoinedClusters/Partitioning];

		attribute<string>    label              := JoinedClusters/label             [nr_OrgEntity], DialogType = "labelText";
		attribute<Eur_yr>    Contributiemarge   := JoinedClusters/Contributiemarge  [nr_OrgEntity];
		attribute<kW>        P_sec              := JoinedClusters/P_sec             [nr_OrgEntity];
		attribute<float64>   n                  := JoinedClusters/n                 [nr_OrgEntity];
		attribute<float64>   MEAN_x             := JoinedClusters/MEAN_x            [nr_OrgEntity];
		attribute<float64>   MEAN_y             := JoinedClusters/MEAN_y            [nr_OrgEntity];
		attribute<float64>   SSD_xx             := JoinedClusters/SSD_xx            [nr_OrgEntity];
		attribute<float64>   SSD_xy             := JoinedClusters/SSD_xy            [nr_OrgEntity];
		attribute<float64>   SSD_yy             := JoinedClusters/SSD_yy            [nr_OrgEntity];
		attribute<rdc_meter> point              := JoinedClusters/point             [nr_OrgEntity];
		attribute<Eur>       Ki_wd              := JoinedClusters/Ki_wd             [nr_OrgEntity];
		attribute<Eur_yr>    Kji_wd             := JoinedClusters/Kji_wd            [nr_OrgEntity];
		attribute<Eur>       Ki_ow_bronleiding  := JoinedClusters/Ki_ow_bronleiding [nr_OrgEntity];
		attribute<Eur_yr>    Kji_ow_bronleiding := JoinedClusters/Kji_ow_bronleiding[nr_OrgEntity];
		attribute<Eur>       Ki_ow_WKO          := JoinedClusters/Ki_ow_WKO         [nr_OrgEntity];
		attribute<Eur_yr>    Kji_ow_WKO         := JoinedClusters/Kji_ow_WKO        [nr_OrgEntity];
		attribute<Eur_yr>    Oji_netto          := Contributiemarge - Kji_wd - Kji_ow_bronleiding - Kji_ow_WKO;
	}

	// subselectie van te clusteren gebouwen die nu meer verder in aanmerking komen voor uitbreiding van de cluster
	unit<uint32> Selected := Subset(ClusterSet/SelectAfweging), DialogType = "Map", DialogData = "point"
	{
		attribute<rdc_meter> point                           := ClusterSet/point[nr_OrgEntity];
		attribute<string>    label                           := ClusterSet/label[nr_OrgEntity], DialogType = "labelText";
		attribute<.>         Partitioning (UnitedCandidates) := invert(nr_OrgEntity)[ClusterSet/Partitioning];
		attribute<Eur>       Ki_wd                           := ClusterSet/Ki_wd[nr_OrgEntity];
		attribute<Eur>       Ki_ow_bronleiding               := ClusterSet/Ki_ow_bronleiding[nr_OrgEntity];
		attribute<Eur>       Ki_ow_WKO                       := ClusterSet/Ki_ow_WKO[nr_OrgEntity];
		attribute<Eur_yr>    Contributiemarge                := ClusterSet/Contributiemarge[nr_OrgEntity];
	}

	// eenheden die in deze ronde geen poging konden doen tot clusteren door ontbreken wederkerigheid
	unit <uint32> InheritedClusters := Subset(ClusterSet/NotInCluster), DialogType = "Map", DialogData = "point"
	{
		unit<uint32>          Candidates         := ClusterSet;
		attribute<Candidates> src1               := nr_OrgEntity;
		attribute<string>     label              := Candidates/label             [src1], DialogType = "labelText";
		attribute<Eur_yr>     Contributiemarge   := Candidates/Contributiemarge  [src1];
		attribute<kW>         P_sec              := Candidates/P_sec             [src1];
		attribute<float64>    n                  := Candidates/n                 [src1];
		attribute<float64>    MEAN_x             := Candidates/MEAN_x            [src1];
		attribute<float64>    MEAN_y             := Candidates/MEAN_y            [src1];
		attribute<float64>    SSD_xx             := Candidates/SSD_xx            [src1];
		attribute<float64>    SSD_xy             := Candidates/SSD_xy            [src1];
		attribute<float64>    SSD_yy             := Candidates/SSD_yy            [src1];
		attribute<rdc_meter>  point              := Candidates/point             [src1];
		attribute<Eur>        Ki_wd              := Candidates/Ki_wd             [src1];
		attribute<Eur_yr>     Kji_wd             := Candidates/Kji_wd            [src1];
		attribute<Eur>        Ki_ow_WKO          := Candidates/Ki_ow_WKO         [src1];
		attribute<Eur_yr>     Kji_ow_WKO         := Candidates/Kji_ow_WKO        [src1];
		attribute<Eur>        Ki_ow_bronleiding  := Candidates/Ki_ow_bronleiding [src1];
		attribute<Eur_yr>     Kji_ow_bronleiding := Candidates/Kji_ow_bronleiding[src1];

		attribute<.>          Partitioning (UnitedCandidates) := invert(src1)[Candidates/Partitioning];	
	}

	unit <uint32> SelectedClusters := union_unit(InheritedClusters, UsefulClusters), DialogType = "Map", DialogData = "point"
	{
		attribute<string>    label             := union_data(., InheritedClusters/label           , UsefulClusters/label), DialogType = "labelText";
		attribute<Eur_yr>    Contributiemarge  := union_data(., InheritedClusters/Contributiemarge, UsefulClusters/Contributiemarge);
		attribute<kW>        P_sec             := union_data(., InheritedClusters/P_sec           , UsefulClusters/P_sec);
		attribute<float64>   n                 := union_data(., InheritedClusters/n               , UsefulClusters/n);
		attribute<float64>   MEAN_x            := union_data(., InheritedClusters/MEAN_x          , UsefulClusters/MEAN_x);
		attribute<float64>   MEAN_y            := union_data(., InheritedClusters/MEAN_y          , UsefulClusters/MEAN_y);
		attribute<float64>   SSD_xx            := union_data(., InheritedClusters/SSD_xx          , UsefulClusters/SSD_xx);
		attribute<float64>   SSD_xy            := union_data(., InheritedClusters/SSD_xy          , UsefulClusters/SSD_xy);
		attribute<float64>   SSD_yy            := union_data(., InheritedClusters/SSD_yy          , UsefulClusters/SSD_yy);

		attribute<rdc_meter> point             := union_data(., InheritedClusters/point             , UsefulClusters/point);
		attribute<Eur>       Ki_wd             := union_data(., InheritedClusters/Ki_wd             , UsefulClusters/Ki_wd);
		attribute<Eur>       Ki_ow_bronleiding := union_data(., InheritedClusters/Ki_ow_bronleiding , UsefulClusters/Ki_ow_bronleiding);
		attribute<Eur>       Ki_ow_WKO         := union_data(., InheritedClusters/Ki_ow_WKO         , UsefulClusters/Ki_ow_WKO);

		attribute<.> Partitioning (UnitedCandidates) := MakeDefined(value(InheritedClusters/Partitioning, SelectedClusters), value(UsefulClusters/Partitioning + #InheritedClusters,SelectedClusters));
	}
}