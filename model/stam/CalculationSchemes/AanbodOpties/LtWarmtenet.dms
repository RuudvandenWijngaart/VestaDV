//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                                  (C) VESTA 2020                                      //
//                         Planbureau voor de Leefomgeving                              //
//                                    April 2020                                         //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template LtWarmtenetImpl
{
	// begin case parameters
	container BeginStatus;
	container PrevLtWarmtenet;
	container AanbodKentallen;
	container EnergiePrijzen;
	parameter<units/yr_uint16> ZichtJaar;
	parameter<units/Celsius> T_ow;  //Temperatuur bij de primaire warmtebron
	parameter<units/Celsius> T_sec; //Temperatuur bij aflevering aan de gebruiker
	// end case parameters

	parameter<bool>                        KoudeBeschikbaar  := false         , Descr = "Wordt binnen dit type gebiedsoptie ook centraal koude aangeboden, ja/nee";
	parameter<bool>                        CollectieveWP     := (T_ow < T_sec), Descr = "Indien aflevertemperatuur hoger moet zijn dan de brontemperatuur is een collectieve warmtepomp nodig";
	parameter<string>                      GebiedsOptie_name := 'LT' + string(T_ow) + '_' + string(T_sec);
	parameter<Classifications/WarmteOptie> WarmteOptie_rel   := ='Classifications/WarmteOptie/V/'+GebiedsOptie_name;

	container    bebouwing    := BeginStatus/Bebouwing;
	unit<uint8>  WkoComponent := Classifications/WoonUtilComponent;
	unit<uint32> PlanRegio    := Invoer/SpecifiekeInstellingen/PlanRegio;
	unit<uint8>  Prijzen_elec := Prijzen/Elektriciteit/Staffel;

	// =========  Enkele zaken op gebouwniveau worden op gelijke wijze bepaalt als MT opties
	container KostenBaten
	{
		attribute<string> BCname(Classifications/WoonUtilComponent) := Classifications/WoonUtilComponent/name;
		container KanGebiedsOptie := for_each_nednv( BCname
			, replace('float64(Classifications/WarmteOptie/KanGebiedsOptie[bebouwing/@BC/WarmteOptie_rel])', '@BC', BCname)
			, bebouwing
			, BCname
			, float64
			);

		container WarmteVraag     := for_each_ne(BCname, replace('CalculationSchemes/WarmteVraagT(bebouwing/@BC, T_sec, false, KanGebiedsOptie/@BC)', '@BC', BCname));
		container Kostenkentallen := Kengetallen/MTkentallen/Kosten_MT(LeerCurves/MTnet/curve, LeerCurves/OenM/curve, LeerCurves/Inpand/curve);

		container KostenD
		{
			// TODO: volgende 2 containers Unificeren naar per BebouwingsComponent
			container Wonen := for_each_ne(Classifications/WoningComponent/NcwRefBase
			,	'CalculationSchemes/KostenWoningen(WarmteVraag/'+Classifications/WoningComponent/name+'/BO, PlanRegio)'
			);
			container Utiliteit := for_each_ne(Classifications/UtilComponent/NcwRefBase
			,	'CalculationSchemes/KostenUtiliteit(WarmteVraag/'+Classifications/UtilComponent/name+'/BO, PlanRegio)'
			);
		}
	}

	// =========  Invoerkentallen over kosten en performance worden opgehaald en verwerkt met leercurves
	container Efficiency      := Kengetallen/Efficiency/Efficiency_LT(T_ow, T_sec);
	container Kostenkentallen := Kengetallen/LTkentallen/Kosten_LT(Leercurves/Inpand/Curve, Leercurves/eWPww/Curve, Leercurves/LTnet/Curve, Leercurves/MTnet/Curve);

	// =========  Ophalen informatie over warmtebronnen
	unit<uint32> BronSrc      := BeginStatus/LtWarmte/bron;
	unit<uint32> BronSelectie := subset(BronSrc/P_ow_max > 0.0 && BronSrc/T_bron >= T_ow && not(BronSrc/Toegewezen) && pointrow(BronSrc/point) > 0d && pointcol(BronSrc/point) > 0d)
		,	DialogType = "Map", DialogData = "point"
	{
		attribute<BronSrc>   BronSrc_rel        := nr_OrgEntity;
		attribute<rdc_meter> point              := BronSrc/point[BronSrc_rel];
		attribute<string>    label              := BronSrc/label[BronSrc_rel];

		attribute<kW>        P_Warmte_primair   := BronSrc/P_ow_max[BronSrc_rel]; // warmte op T_bron voor eWP
		attribute<kW>        P_Warmte_secundair := P_Warmte_primair / BronSrc/bron_cap[BronSrc_rel]; // warmte op temperatuur T_bron na eWP
		attribute<Celsius>   T_bron             := BronSrc/T_bron[BronSrc_rel];
		attribute<uint32>    Categorie          := BronSrc/categorie_rel[BronSrc_rel];
		attribute<ratio>     Weight             := P_Warmte_secundair / 1[kW];
		attribute<ratio>     Bron_vol_Weighted  := BronSrc/Bron_vol[BronSrc_rel] * Weight; // bron_vol maal gewicht tbv gewogen middeling.
		attribute<Eur_kW>    Ki_kW_min_weighted := BronSrc/Ki_kW_min[BronSrc_rel]* Weight;
		attribute<Eur_kW>    Ki_kW_max_weighted := BronSrc/Ki_kW_max[BronSrc_rel]* Weight;
		attribute<Eur_GJ>    K_GJ_weighted      := BronSrc/K_GJ[BronSrc_rel]     * Weight;
	}

	unit <uint32> bron := Unique(BronSelectie/point) // dit moet omdat connect_points anders niet uitgevoerd kan worden.
	,	DialogType = "Map", DialogData = "point"
	{
		attribute<rdc_meter> point              := Values;
		attribute<.>         BronSelectie_rel (BronSelectie) := rlookup(BronSelectie/point, Values);

		attribute<string>    label              := AsItemList(BronSelectie/label, BronSelectie_rel), DialogType = "labelText";
		attribute<.>         per_bron           := id(.);
		attribute<kW>        P_Warmte_primair   := sum(BronSelectie/P_Warmte_primair, BronSelectie_rel);
		attribute<kW>        P_Warmte_secundair := sum(BronSelectie/P_Warmte_secundair, BronSelectie_rel);
		attribute<ratio>     Weight             := sum(BronSelectie/Weight, BronSelectie_rel);
		attribute<ratio>     Bron_vol_Weighted  := sum(BronSelectie/Bron_vol_Weighted, BronSelectie_rel);
		attribute<Eur_kW>    Ki_kW_min_weighted := sum(BronSelectie/Ki_kW_min_weighted, BronSelectie_rel);
		attribute<Eur_kW>    Ki_kW_max_weighted := sum(BronSelectie/Ki_kW_max_weighted, BronSelectie_rel);		
		attribute<Eur_GJ>    K_GJ_weighted      := sum(BronSelectie/K_GJ_weighted, BronSelectie_rel);
		attribute<float64>   n                  := float64(pcount(BronSelectie_rel));
		unit<uint32>         Feature            := bron // nu nog hetzelfde, maar in clustering kunnen T splitsingen worden opgenomen.
		{
			attribute<rdc_meter> Geometry(arc)  := points2sequence(point, id(.));
			attribute<bron>      MST_rel        := id(bron);
		}
	}

	//samenvoegen invoerbronnen tot geclusterde modelbronnen
	parameter<uint32> NrBronIterations: [3];
	unit<uint32> BronIteration := Range(uint32, 0, NrBronIterations) 
	{
		attribute<string> name                  := 'I'+string(id(.));
		attribute<string> PrevBron              := MakeDefined(name[sub_or_null(id(.),1)] + '/SelectedClusters', 'bron');
		attribute<.> NrSelectedObjects          := ='union_data(BronIteration, '+AsItemList('#BronIterations/'+BronIteration/name+'/Selected')+')';
		attribute<.> CumulNrPrevSelectedObjects := cumulate(NrSelectedObjects) - NrSelectedObjects;
	}

	container BronIterations := for_each_ne(BronIteration/name, 'LtBronIter(' + BronIteration/PrevBron + ', bron)');
	container LastBronIter   :=  ='BronIterations/'+last(BronIteration/name);
	container LastClusters   := LastBronIter/SelectedClusters;

	//modelbronnen als resultaat van samenvoegen kleine bron
	unit<uint32> BronCluster := ='union_unit('+asItemList('BronIterations/'+BronIteration/name+'/Selected')+', LastClusters)', DialogType = "Map", DialogData = "point"
	{
		// features samenvoegen
		unit<uint32> Feature := ='union_unit('+asItemList('BronIterations/'+BronIteration/name+'/Selected/Feature')+', LastClusters/Feature)'
			, DialogType = "Map", DialogData = "Geometry"
		{
			attribute<rdc_meter>  Geometry(arc) := ='union_data(., '+asItemList('BronIterations/'+BronIteration/name+'/Selected/Feature/Geometry')+', LastClusters/Feature/Geometry)';
			attribute<..>         MST_rel       := ='value(union_data(., '+asItemList('BronIterations/'+BronIteration/name+'/Selected/Feature/MST_rel+BronIteration/CumulNrPrevSelectedObjects['+ string(id(BronIteration))+']')+', LastClusters/Feature/MST_rel+ sum(BronIteration/NrSelectedObjects)), ..)';
			attribute<m>          LengthProxy   := arc_length(Geometry, m);
		}

		attribute<string>    label          := ='union_data(., '+asItemList('BronIterations/'+BronIteration/name+'/Selected/label')+', LastClusters/label)';
		attribute<rdc_meter> point          := ='union_data(., '+asItemList('BronIterations/'+BronIteration/name+'/Selected/point')+', LastClusters/point)';
		attribute<.>         per_bron(bron) := ='value(MakeDefined('
			+ asItemList('BronIterations/' + BronIteration/name + '/Selected/per_bron + BronIteration/CumulNrPrevSelectedObjects['+ string(id(BronIteration))+']')+', LastClusters/per_bron + sum(BronIteration/NrSelectedObjects)), .)';

		//resultaten bronclustering, eigenschappen per broncluster
		attribute<kW>     P_Warmte_primair   := ='union_data(., ' +AsItemList('BronIterations/' + BronIteration/name + '/Selected/P_Warmte_primair')+'  , LastClusters/P_warmte_primair)';
		attribute<kW>     P_Warmte_secundair := ='union_data(., ' +AsItemList('BronIterations/' + BronIteration/name + '/Selected/P_Warmte_secundair')+', LastClusters/P_Warmte_secundair)';
		attribute<ratio>  Weight             := ='union_data(., ' +AsItemList('BronIterations/' + BronIteration/name + '/Selected/Weight')+'            , LastClusters/Weight)';
		attribute<ratio>  Bron_vol_Weighted  := ='union_data(., ' +AsItemList('BronIterations/' + BronIteration/name + '/Selected/Bron_vol_Weighted') +', LastClusters/Bron_vol_Weighted)';
		attribute<Eur_kW> Ki_kW_min_weighted := ='union_data(., ' +AsItemList('BronIterations/' + BronIteration/name + '/Selected/Ki_kW_min_weighted')+', LastClusters/Ki_kW_min_weighted)';
		attribute<Eur_kW> Ki_kW_max_weighted := ='union_data(., ' +AsItemList('BronIterations/' + BronIteration/name + '/Selected/Ki_kW_max_weighted')+', LastClusters/Ki_kW_max_weighted)';
		attribute<Eur_GJ> K_GJ_weighted      := ='union_data(., ' +AsItemList('BronIterations/' + BronIteration/name + '/Selected/K_GJ_weighted')     +', LastClusters/K_GJ_weighted)';

		// bronspecifieke eigenschappen tbv rentabiliteitsafweging (nog niet volledig geimplementeerd)
		attribute<ratio>  Bron_vol   := Bron_vol_Weighted  / Weight            , Descr = "aandeel op volume bronspecifiek";
		attribute<Eur_kW> Ki_kW_min  := Ki_kW_min_weighted / Weight            , Descr = "minimale kosten uitkoppeling bronspecifiek";
		attribute<Eur_kW> Ki_kW_max  := Ki_kW_max_weighted / Weight            , Descr = "maximale kosten uitkoppeling bronspecifiek";
		attribute<Eur_GJ> K_GJ       := K_GJ_weighted      / Weight            , Descr = "meerkosten warmteproductie bronspecifiek";
		attribute<ratio>  Bron_cap   := P_warmte_primair   / P_Warmte_secundair, Descr = "aandeel op capaciteit bronspecifiek";

		//gebiedsbeschrijving broncluster
		attribute<m> LengthProxy                             := sum(Feature/LengthProxy, Feature/MST_rel);
		attribute<.> per_UnitedCandidates (UnitedCandidates) := Selected/BronCluster_rel[invert(Selected/nr_OrgEntity)];
	}
	
	// =========  Voor alle woon en utiliteit bebouwingscomponenten worden op gebouwniveau attributen voor kosten en energie bepaald
	
	// TODO: Woning en Utiliteit containers Unificeren en parameterisen per BebouwingsComponent
	container Woning := for_each_ne(Classifications/WoningComponent/name
	,	replace('WKOWoningData(bebouwing/@C, KostenBaten/WarmteVraag/@C, '+string(Classifications/WoningComponent/IsNieuwbouw)+', KoudeBeschikbaar, KostenBaten/KostenD/Wonen/'+Classifications/WoningComponent/NcwRefBase+')'
		,	'@C', Classifications/WoningComponent/name
		)
	);
	container Util := for_each_ne(Classifications/UtilComponent/name
	,	replace('WKOUtilData(bebouwing/@C, KostenBaten/WarmteVraag/@C, '+string(Classifications/UtilComponent/IsNieuwbouw)+', KoudeBeschikbaar, KostenBaten/KostenD/Utiliteit/'+Classifications/UtilComponent/NcwRefBase+')'
		,	'@C', Classifications/UtilComponent/name
		)
	);
	container BcData := for_each_ne(Classifications/WoningUtilComponent/name
		,	union_data(Classifications/WoningUtilComponent
			,	const('Woning', Classifications/WoningComponent)
			,	const('Util'  , Classifications/UtilComponent)
			)
		+ '/'	
		+	Classifications/WoningUtilComponent/name
	);

	parameter<string> geschiktExpr := 'BO/Schillabel_ref <= Classifications/energielabel/V/labelE';
	container CandidateSets := for_each_ne(WkoComponent/name, replace('LtData(bebouwing/@WC, bcData/@WC, ''@WC'', T_sec, false, '+Quote(geschiktExpr)+')', '@WC', WkoComponent/name));
	
	//samenvoeging bestaande woningen, nieuwbouwwoningen, bestaande utiliteit, nieuwbouwutiliteit
	unit <uint32> UnitedCandidates := ='union_unit('+AsItemList('CandidateSets/'+WkoComponent/name+'/AllowedObjects')+')'
	, DialogType = "Map", DialogData = "point"
	{
		attribute<string>    label := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/name + '/AllowedObjects/label') + ')', DialogType = "labelText";
		attribute<rdc_meter> point := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/name + '/AllowedObjects/point') + ')';

		//bepaling per kandidaat verbouwingsobject wat de dichtstbijzijnde bron is
		container connect_info := connect_info(BronCluster/Feature/Geometry, point) 
		{
			attribute<float64>              dist  (UnitedCandidates); // afstand
			attribute<BronCluster/Feature>  ArcID (UnitedCandidates); // aan welk broncluster feature wordt er gekoppeld?
		}

		attribute<BronCluster> BronCluster_rel := BronCluster/Feature/MST_rel[connect_info/ArcID];

		//over te nemen attributen uit LtData.dms
		attribute<Eur_yr> Contributiemarge := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/name + '/Contributiemarge[CandidateSets/' + WkoComponent/name + '/AllowedObjects/org_rel]') + ')', Descr = "Netto contributiemarge per object";
		attribute<GJ_yr > V_Warmte_primair := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/name + '/V_Warmte_primair[CandidateSets/' + WkoComponent/name + '/AllowedObjects/org_rel]') + ')', Descr = "jaalijkse volumevraag warmte";
		attribute<GJ_yr > V_Koude_primair  := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/name + '/V_Koude_primair [CandidateSets/' + WkoComponent/name + '/AllowedObjects/org_rel]') + ')', Descr = "jaalijkse volumevraag koude";
		attribute<kW>     P_sec_primair    := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/name + '/P_sec_primair	  [CandidateSets/' + WkoComponent/name + '/AllowedObjects/org_rel]') + ')', Descr = "vermogen dat voor rekening van de primaire bron wordt gerekend";
		attribute<kW>     P_sec_hulp       := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/name + '/P_sec_hulp      [CandidateSets/' + WkoComponent/name + '/AllowedObjects/org_rel]') + ')', Descr = "vermogen dat voor rekening van de hulpvoorziening wordt gerekend";
		attribute<Eur>    Ki_buffer_gebouw := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/name + '/Ki_ow_buffer    [CandidateSets/' + WkoComponent/name + '/AllowedObjects/org_rel]') + ')', Descr = "voorlopige investeringskosten per gebouw voor warmtebuffer";
		}

	//selectie van vraaggebied rondom bron-cluster op basis van afstand tot capaciteit bron volledig gevuld is
	attribute<m> distance_threshold(BronCluster) :=
		makedefined(
			nth_element_weighted(
				value(UnitedCandidates/connect_info/dist, m), 
				BronCluster/P_Warmte_primair  , 
				UnitedCandidates/P_sec_primair,
				UnitedCandidates/BronCluster_rel),
		999999[m]),
	Descr = "selectie van vraaggebied rondom bron-cluster op basis van afstand tot capaciteit bron volledig gevuld is";

	// afnemers nabij centrum van een geselecteerd bron-cluster
	unit<uint32> Selected := Subset(UnitedCandidates/connect_info/dist <= distance_threshold[UnitedCandidates/BronCluster_rel])
	, DialogType = "Map", DialogData = "point" 
	{
		attribute<rdc_meter> point              := UnitedCandidates/point            [nr_OrgEntity];

		//attributen benodigd voor bepalen brongerelateerde kosten
		attribute<BronCluster> BronCluster_rel  := UnitedCandidates/BronCluster_rel  [nr_OrgEntity];
		attribute<Eur_yr>      Contributiemarge := UnitedCandidates/Contributiemarge [nr_OrgEntity];
		attribute<GJ_yr>       V_Warmte_primair := UnitedCandidates/V_Warmte_primair [nr_OrgEntity];
		attribute<GJ_yr>       V_Koude_primair  := UnitedCandidates/V_Koude_primair  [nr_OrgEntity];
		attribute<kW>          P_sec_primair    := UnitedCandidates/P_sec_primair    [nr_OrgEntity];
		attribute<kW>          P_sec_hulp       := UnitedCandidates/P_sec_hulp       [nr_OrgEntity];
		attribute<Eur>         Ki_buffer_gebouw := UnitedCandidates/Ki_buffer_gebouw [nr_OrgEntity];
		attribute<float64>     dist             := UnitedCandidates/connect_info/dist[nr_OrgEntity];
	}

	//bepaling brongerelateerde kosten
	container Gebied 
	{
		//Omvang gebied vraag-cluster
		attribute<m>  Radius_aflevergebied (BronCluster) := max(Selected/dist, Selected/BronCluster_rel)[m];
		attribute<m2> AreaProxy            (BronCluster) := max_elem((BronCluster/LengthProxy * Radius_aflevergebied), (PI() * Radius_aflevergebied * Radius_aflevergebied)) , Descr = "indicatie van oppervlakte afnamegebied";

		//Omvang gebied bron-cluster en vraag-cluster gecombineerd

		//Optelling van attributen van gebouwen in vraaggebied
		attribute<Eur_yr> Contributiemarge (BronCluster) := sum(Selected/Contributiemarge, Selected/BronCluster_rel), Descr = "totale contributiemarge van gebouwen in vraaggebied";
		attribute<GJ_yr>  V_Warmte_primair (BronCluster) := sum(Selected/V_Warmte_primair, Selected/BronCluster_rel), Descr = "totale warmtevraag aan de primaire bron van gebouwen in vraaggebied";
		attribute<GJ_yr>  V_Koude_primair  (BronCluster) := sum(Selected/V_Koude_primair , Selected/BronCluster_rel), Descr = "totale koudevraag aan de primaire bron van gebouwen in vraaggebied";
		attribute<kW>     P_sec_primair    (BronCluster) := sum(Selected/P_sec_primair   , Selected/BronCluster_rel), Descr = "totale capaciteitsvraag aan de primaire bron van gebouwen in vraaggebied";
		attribute<kW>     P_sec_hulp       (BronCluster) := sum(Selected/P_sec_hulp      , Selected/BronCluster_rel), Descr = "totale capaciteitsvraag aan de hulpvoorziening van gebouwen in vraaggebied";
		attribute<Eur>    Ki_Buffer_gebouw (BronCluster) := sum(Selected/Ki_Buffer_gebouw, Selected/BronCluster_rel), Descr = "voorlopige kosten voor de warmtebuffer per gebouw";

		container secundairnet
		{
			// formule buiskosten conform functioneel ontwerp LT netten tabel 8
			attribute<kW>    P_sec_kW       (BronCluster) := max_elem(P_sec_hulp, P_sec_primair);
			attribute<MW>    P_sec          (BronCluster) := P_sec_kW / 1000[kW / MW];
			attribute<MW>    P_bronnet      (BronCluster) := P_sec_primair/ 1000[kW / MW];
			attribute<Eur_m> K_min_sec      (BronCluster) := P_sec > 0[MW] ? 400[Eur_m] + 210[Eur / m] * (P_sec * 1.0[1 / MW])^ 0.5 : 0[Eur_m], Source = "Functioneel Ontwerp 4.0 bijlage A.11";
			attribute<Eur_m> K_max_sec      (BronCluster) := P_sec > 0[MW] ? 800[Eur_m] + 200[Eur / m] * (P_sec * 1.0[1 / MW])^ 0.6 : 0[Eur_m], Source = "Functioneel Ontwerp 4.0 bijlage A.11";
			attribute<Eur_m> K_m_sec        (BronCluster) := (K_min_sec * Schuiven/KostenMin + K_max_sec * Schuiven/KostenMax) * Leercurves/MTnet/Curve;
			attribute<nrOS>  Onderstations  (BronCluster) := P_sec_kW / Invoer/Kengetallen/Constanten/Vermogen_OS;
			attribute<m>     L_hoofdleiding (BronCluster) := Invoer/Kengetallen/Constanten/Omwegfactor * sqrt(2.0)* sqrt(AreaProxy); //CLUSTERZONDEROS
			attribute<Eur>   K_hoofdleiding (BronCluster) := L_hoofdleiding * K_m_sec;
			attribute<m_OS>  meter_OS       (BronCluster) := Invoer/Kengetallen/Constanten/Omwegfactor * 0.25 * 0.5 * sqrt(2.0) * sqrt(AreaProxy) / 1.0[nrOS];
			attribute<m>     L_zijleiding   (BronCluster) := Onderstations * meter_OS; //CLUSTERZONDEROS
			attribute<Eur>   K_zijleiding   (BronCluster) := L_zijleiding * K_m_sec;
			attribute<Eur_m> K_min_brondist (BronCluster) := P_bronnet > 0[MW] ? 400[Eur_m] + 210[Eur / m] * (P_bronnet * 1.0[1 / MW])^ 0.5 : 0[Eur_m], Source = "Functioneel Ontwerp 4.0 bijlage A.11";
			attribute<Eur_m> K_max_brondist (BronCluster) := P_bronnet > 0[MW] ? 800[Eur_m] + 200[Eur / m] * (P_bronnet * 1.0[1 / MW])^ 0.6 : 0[Eur_m], Source = "Functioneel Ontwerp 4.0 bijlage A.11";
			attribute<Eur_m> K_m_brondist   (BronCluster) := (K_min_brondist * Schuiven/KostenMin + K_max_brondist * Schuiven/KostenMax) * Leercurves/LTnet/Curve;
		}

		//Aanvullende kosten brongerelateerd
		attribute<Eur>    Ki_ow_brondist  (BronCluster) := BronCluster/LengthProxy * secundairnet/K_m_brondist                  , Descr ="investeringskosten distributieleidingen om bronnen met elkaar te verbinden";
		attribute<Eur>	  Ki_ow_uitkoppel (BronCluster) := leerCurves/LTnet/Curve * (Schuiven/KostenMin * BronCluster/Ki_kW_min + Schuiven/KostenMax * BronCluster/Ki_kW_max) * P_sec_primair;		
		attribute<Eur>    Ki_ow_buffer    (BronCluster) := max_elem((Kostenkentallen/Ki_buffer_min - Ki_buffer_gebouw) , 0[Eur]), Descr ="ondergrenscontrole investeringskosten buffervat bij primaire bron";
		attribute<Eur>    Ki_ow           (BronCluster) := Ki_ow_brondist + Ki_ow_buffer + Ki_ow_uitkoppel                      , Descr ="investeringskosten opwekking";
		attribute<Eur>    Oi_ow_EIA       (BronCluster) := Ki_ow * SpecifiekeInstellingen/Beleid/EIA/LT                         , Descr ="investeringssubsidie opwekking";
		attribute<Eur_yr> Kji_ow          (BronCluster) := Ki_ow * NCW/ow28/AnnualisationFactor                                 , Descr ="jaarlijkse kapitaallasten opwekking";
		attribute<Eur_yr> Oji_ow_EIA      (BronCluster) := Oi_ow_EIA * NCW/ow28/AnnualisationFactor                             , Descr ="jaarlijkse kapitaallasten opwekking";
		attribute<Eur>    Ki_wd           (BronCluster) := secundairnet/K_hoofdleiding + secundairnet/K_zijleiding              , Descr ="investeringskosten distributieleidingen wijkdistributie";
		attribute<Eur>    Oi_wd_EIA       (BronCluster) := Ki_wd * SpecifiekeInstellingen/Beleid/EIA/wd                         , Descr ="investeringssubsidie distributieleidingen wijkdistributie";
		attribute<Eur_yr> Kji_wd          (BronCluster) := Ki_wd * NCW/wd28/AnnualisationFactor                                 , Descr ="jaarlijkse kapitaallasten distributieleidingen wijkdistributie";
		attribute<Eur_yr> Oji_wd_EIA      (BronCluster) := Oi_wd_EIA * NCW/wd28/AnnualisationFactor                             , Descr ="jaarlijkse kapitaallasten distributieleidingen wijkdistributie";
		attribute<Eur_yr> Kj_ow_productie (BronCluster) := V_Warmte_primair * BronCluster/K_GJ                                  , Descr ="bronspecifieke productiekosten per jaar";
		attribute<Eur_yr> Kj_ow_adm       (BronCluster) := Leercurves/OenM/Curve * Kengetallen/Onderhoud/R_ow_admin * Ki_ow     , Descr ="administratiekosten opwekking";
		attribute<Eur_yr> Kj_ow_oh        (BronCluster) := Leercurves/OenM/Curve * Kengetallen/Onderhoud/R_ow_onderhoud  * Ki_ow, Descr ="onderhoudskosten opwekking";
		attribute<Eur_yr> Kj_wd_adm       (BronCluster) := Leercurves/OenM/Curve * Kengetallen/Onderhoud/R_wd_admin * Ki_wd     , Descr ="administratiekosten distributieleidingen wijkdistributie";
		attribute<Eur_yr> Kj_wd_oh        (BronCluster) := Leercurves/OenM/Curve * Kengetallen/Onderhoud/R_wd_onderhoud * Ki_wd , Descr ="onderhoudskosten distributieleidingen wijkdistributie";
		attribute<Eur_yr> Kj_onderhoud    (BronCluster) := Kj_ow_oh + Kj_wd_oh                                                  , Descr ="onderhoudskosten brongerelateerd";
		attribute<Eur_yr> Kj_admin        (BronCluster) := Kj_ow_adm + Kj_wd_adm                                                , Descr ="administratiekosten brongerelateerd";

		attribute<Eur_yr> Kj_brongerelateerd (BronCluster) := (Kji_ow - Oji_ow_EIA) + (Kji_wd - Oji_ow_EIA) + Kj_onderhoud + Kj_admin + Kj_ow_productie, Descr ="totale jaarlijkse kosten brongerelateerd";
		attribute<Eur_yr> Rentabiliteit      (BronCluster) := Contributiemarge - Kj_brongerelateerd                                                    , Descr ="rentabiliteit van aanleg gebiedsoptie";

		attribute<bool>   Afweging           (BronCluster) := VoorkEuren/Afweging/LTversusWP ? const(true, BronCluster) : Rentabiliteit > 0 [Eur_yr]   , Descr ="besluit tot allocatie op basis van rentabiliteit";
	}

	unit<uint32> RendabelCluster := subset(gebied/Afweging)
	{
		attribute<BronCluster>     BronCluster_rel                               := nr_OrgEntity;
		attribute<string>          label                                         := BronCluster/label[BronCluster_rel];
		attribute<RendabelCluster> RendabelCluster_per_BronCluster (BronCluster) := invert(BronCluster_rel);

		attribute<.> per_bronSrc         (bronSrc)          := RendabelCluster_per_BronCluster[BronCluster/per_bron[rlookup(bronSrc/point, bron/point)]];
		attribute<.> per_UnitedCandidates(UnitedCandidates) := RendabelCluster_per_BronCluster[BronCluster/per_UnitedCandidates]; // relatie van BebouwingsObjecten naar geselecteerde bron-clusters

		attribute<Eur_yr> Rentabiliteit := Gebied/Rentabiliteit[BronCluster_rel];

		// feature selectie
		unit<uint32> BronClusterFeature := BronCluster/Feature;
		unit<uint32> Feature := subset(IsDefined(invert(BronCluster_rel)[BronClusterFeature/MST_rel]))
		, DialogType = "Map", DialogData = "Geometry"
		{
			attribute<BronClusterFeature> BronClusterFeature_rel := nr_OrgEntity;
			attribute<rdc_meter>          Geometry         (arc) := BronClusterFeature/Geometry[BronClusterFeature_rel];
			attribute<..>                 MST_rel                := invert(BronCluster_rel)[BronClusterFeature/MST_rel[BronClusterFeature_rel]];
		}

		unit<uint32> Network := connect_eq(Feature/Geometry, BronCluster_rel[Feature/MST_rel], Selected/point, selected/BronCluster_rel) 
		{
			attribute<rdc_meter> UnionData(arc);
			attribute<Feature>   nr_OrgEntity;
			attribute<..>        MST_rel := Feature/MST_rel[nr_OrgEntity];
		}
	}

	unit<uint32> NewAfnameGebied := union_unit(BeginStatus/AfnameGebied, RendabelCluster)
	{
		attribute<Classifications/GebiedsOptie> GebiedsOptie_rel := union_data(
			.
			, BeginStatus/AfnameGebied/GebiedsOptie_rel
			, const(rlookup(WarmteOptie_rel, Classifications/GebiedsOptie/WarmteOptie_rel), RendabelCluster)
		);
		attribute<string> label := union_data(
			.
			, BeginStatus/AfnameGebied/label
			, RendabelCluster/label
		);
		attribute<RendabelCluster> RendabelCluster_rel := rlookup(label, RendabelCluster/label);
		attribute<BeginStatus/AfnameGebied> BeginStatusAfnameGebied_rel := rlookup(label, BeginStatus/AfnameGebied/label);
		
	}

	attribute<uint32> NrAllowedObjects          (WkoComponent) := ='union_data(WkoComponent, '+AsItemList('#CandidateSets/'+WkoComponent/name+'/AllowedObjects')+')';
	attribute<uint32> NrAllObjects              (WkoComponent) := ='union_data(WkoComponent, '+AsItemList('#CandidateSets/'+WkoComponent/name+'/BO')+')';
	attribute<uint32> CumulNrPrevAllowedObjects (WkoComponent) := cumulate(NrAllowedObjects)-NrAllowedObjects;
	attribute<uint32> CumulNrPrevAllObjects     (WkoComponent) := cumulate(NrAllObjects)-NrAllObjects;

	unit<uint32> AllObjects := ='union_unit('+AsItemList('ObjectResults/'+WkoComponent/name+'/BebouwingsObject')+')'
	{
		attribute<string>          label               := ='union_data(., ' + asItemList('bebouwing/' + WkoComponent/name + '/label') + ')', DialogType = "labelText";
		attribute<RendabelCluster> RendabelCluster_rel := ='union_data(., ' + AsItemList('ObjectResults/'+WkoComponent/name+'/Cluster_rel')+')';
		attribute<BronCluster>     BronCluster_rel     := RendabelCluster/nr_OrgEntity[RendabelCluster_rel];
		attribute<Eur_yr>          Kj_totaal           := ='union_data(., ' + AsItemList('ObjectResults/'+WkoComponent/name+'/WkoData/Kj_totaal')+')';

		attribute<Eur>    Ki_ow_gebied     := scalesum(max_elem(Kj_totaal, 1[Eur_yr]), BronCluster_rel, Gebied/Ki_ow);
		attribute<Eur>    Ki_wd_gebied     := scalesum(max_elem(Kj_totaal, 1[Eur_yr]), BronCluster_rel, Gebied/Ki_wd);
		attribute<Eur_yr> Kji_ow_gebied    := scalesum(max_elem(Kj_totaal, 1[Eur_yr]), BronCluster_rel, Gebied/Kji_ow);
		attribute<Eur_yr> Kji_wd_gebied    := scalesum(max_elem(Kj_totaal, 1[Eur_yr]), BronCluster_rel, Gebied/Kji_wd);
		attribute<Eur_yr> Kj_wd_oh_gebied  := scalesum(max_elem(Kj_totaal, 1[Eur_yr]), BronCluster_rel, Gebied/Kj_wd_oh);
		attribute<Eur_yr> Kj_wd_adm_gebied := scalesum(max_elem(Kj_totaal, 1[Eur_yr]), BronCluster_rel, Gebied/Kj_wd_adm);
		attribute<Eur_yr> Kj_ow_oh_gebied  := scalesum(max_elem(Kj_totaal, 1[Eur_yr]), BronCluster_rel, Gebied/Kj_ow_oh);
		attribute<Eur_yr> Kj_ow_adm_gebied := scalesum(max_elem(Kj_totaal, 1[Eur_yr]), BronCluster_rel, Gebied/Kj_ow_adm);
		attribute<Eur_yr> Kj_ow_productie  := scalesum(max_elem(Kj_totaal, 1[Eur_yr]), BronCluster_rel, Gebied/Kj_ow_productie);
		attribute<Eur>    Oi_wd_EIA_gebied := scalesum(max_elem(Kj_totaal, 1[Eur_yr]), BronCluster_rel, Gebied/Oi_wd_EIA);
		attribute<Eur>    Oi_ow_EIA_gebied := scalesum(max_elem(Kj_totaal, 1[Eur_yr]), BronCluster_rel, Gebied/Oi_ow_EIA);
	}

	container ObjectResults :=
		for_each_ne(WkoComponent/name, 
			'LtResults('
				'UnitedCandidates, RendabelCluster, CandidateSets/'+WkoComponent/name+',Classifications/WarmteOptie/V/'+GebiedsOptie_name+',' 
				'CumulNrPrevAllowedObjects['+string(id(WkoComponent))+'[WkoComponent]],'
				'CumulNrPrevAllObjects['+string(id(WkoComponent))+'[WkoComponent]]'
			')'
		);

	container Results := BeginStatus
	{
		container Bebouwing :=
			for_each_nex(Classifications/BebouwingsComponent/name
				, Classifications/BebouwingsComponent/KanWKO 
					? 'ObjectResults/'+Classifications/BebouwingsComponent/name+'/Result' 
					: 'BeginStatus/Bebouwing/'+Classifications/BebouwingsComponent/name
				,	uint32
			);
		unit<uint32> AfnameGebied := NewAfnameGebied;
		
		container LtWarmte := BeginStatus/LtWarmte
		{
			unit<uint32> bron := BeginStatus/LtWarmte/bron 
			{
				attribute<bool> NuToegewezen := IsDefined(RendabelCluster/per_bronSrc);
				attribute<bool> Toegewezen   := BeginStatus/LtWarmte/bron/Toegewezen || NuToegewezen;

				unit<uint32>    PrevClusterSet := BeginStatus/LtWarmte/bron/CumulativeClusterSet;

				unit<uint32> CumulativeClusterSet := union_unit(PrevClusterSet, RendabelCluster)
				, DialogType = "Map", DialogData = "point"
				{
					attribute<.> per_bron(..) := MakeDefined(RendabelCluster/per_bronSrc, PrevClusterSet/per_bron);

					attribute<rdc_meter> point := mean(center_bound(Feature/Geometry), Feature/Cluster_rel);

					attribute<Classifications/WarmteOptie> WarmteOptie_rel := union_data(., PrevClusterSet/WarmteOptie_rel, const(impl/WarmteOptie_rel, RendabelCluster));
					attribute<Classifications/Rekenstap  > Rekenstap_rel   := union_data(., PrevClusterSet/Rekenstap_rel,   const(......../ZichtJaar_rel, RendabelCluster));
					attribute<Classifications/ZichtJaar  > ZichtJaar_rel   := union_data(., PrevClusterSet/ZichtJaar_rel,   const(rlookup(RekenstapName, classifications/Rekenstap/name), RendabelCluster));

					unit<uint32> Feature := union_unit(PrevClusterSet/Feature, RendabelCluster/Feature)
					, DialogType = "Map", DialogData = "Geometry"
					{
						attribute<rdc_meter> Geometry(arc) := union_data(., PrevClusterSet/Feature/Geometry, RendabelCluster/Feature/Geometry);
						attribute<..>        Cluster_rel   := value(union_data(., PrevClusterSet/Feature/Cluster_rel, RendabelCluster/Feature/MST_rel + #PrevClusterSet/Feature), ..);

						attribute<Classifications/WarmteOptie> WarmteOptie_rel := CumulativeClusterSet/WarmteOptie_rel[Cluster_rel];
						attribute<Classifications/Rekenstap  > Rekenstap_rel   := CumulativeClusterSet/Rekenstap_rel  [Cluster_rel];
						attribute<Classifications/ZichtJaar  > ZichtJaar_rel   := CumulativeClusterSet/ZichtJaar_rel  [Cluster_rel];
					}
				}

				unit<uint32> PrevNetwork := BeginStatus/LtWarmte/bron/CumulativeNetwork;

				unit<uint32> CumulativeNetwork := union_unit(PrevNetwork, RendabelCluster/Network)
				, DialogType = "Map", DialogData = "Geometry"
				{
					attribute<rdc_meter>                   Geometry(arc)   := union_data(., PrevNetwork/Geometry, RendabelCluster/Network/UnionData);

					attribute<Classifications/WarmteOptie> WarmteOptie_rel := union_data(., PrevNetwork/WarmteOptie_rel, const(impl/WarmteOptie_rel, RendabelCluster/Network));
					attribute<Classifications/Rekenstap  > Rekenstap_rel   := union_data(., PrevNetwork/Rekenstap_rel,   const(......../ZichtJaar_rel, RendabelCluster/Network));
					attribute<Classifications/ZichtJaar  > ZichtJaar_rel   := union_data(., PrevNetwork/ZichtJaar_rel,   const(rlookup(RekenstapName, classifications/Rekenstap/name), RendabelCluster/Network));
				}
			}
		}

		container LtWarmtenet
		{
			unit<uint8> LT_Component := Classifications/WoonUtilComponent;
			//opbrengsten per groep bebouwingscomponenten

			container VorigePeriode := ='BeginStatus/'+gebiedsoptie_name;

			container Oi_Aansl     := for_each_nedv(LT_Component/name, replace('VorigePeriode/Oi_Aansl/@W@ + ObjectResults/@W@/PR/nieuw/Oi_Aansl', '@W@', LT_Component/name), PlanRegio, Eur);
			container Oj_Vastrecht := for_each_nedv(LT_Component/name, replace('ObjectResults/@W@/PR/Totaal/Oj_Vastrecht', '@W@', LT_Component/name), PlanRegio, Eur_yr);
			container Oj_Verbruik  := for_each_nedv(LT_Component/name, replace('ObjectResults/@W@/PR/Totaal/Oj_Verbruik' , '@W@', LT_Component/name), PlanRegio, Eur_yr);
			container Om_comfort   := for_each_nedv(LT_Component/name, replace('ObjectResults/@W@/PR/Totaal/Om_comfort'  , '@W@', LT_Component/name), PlanRegio, Eur_yr);

			attribute<float64> P_vol(PlanRegio) := VorigePeriode/P_Vol;

			// stock
			container eenmalig
			{
				attribute<Eur> Ki_ge_pm    (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/Ki_ge_pm')+ ')';
				attribute<Eur> Ki_ge_ov    (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/Ki_ge_ov')+ ')';
				attribute<Eur> Ki_ow       (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/Ki_ow')   + ')', Descr = "investering opwekker, gebouwzijde en brongerelateerd";
				attribute<Eur> Ki_wd       (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/Ki_wd')   + ')', Descr = "investering wijkdistributEur, gebouwzijde en brongerelateerd";
				attribute<Eur> Ki_id       (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/Ki_id')   + ')';
				attribute<Eur> Ki_pt       (PlanRegio) := const(0[Eur], PlanRegio); // geen primair transport bij LT netten
				attribute<Eur> Oi_lv_aansl (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/nieuw/Oi_Aansl')+')';

				attribute<Eur> Oi_ow_EIA  (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/Oi_ow_EIA') + ')';
				attribute<Eur> Oi_wd_EIA  (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/Oi_wd_EIA') + ')';
				attribute<Eur> Oi_id_EIA  (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/Oi_id_EIA') + ')';
				attribute<Eur> Oi_ge_EIA  (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/Oi_ge_EIA') + ')';
				attribute<Eur> Oi_pt_EIA  (PlanRegio) := const(0[Eur], PlanRegio); // geen primair transport bij LT netten
				attribute<Eur> Ki_wd_Gnet (PlanRegio) := const(0[Eur], PlanRegio);
				attribute<Eur> Ki_id_lo   (PlanRegio) := const(0[Eur], PlanRegio);
			}

			container jaarlijks
			{
				container ge
				{
					attribute<Eur_yr> Kj_ge_hv     (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen huurverlaging bij LT netten
					attribute<Eur_yr> Kji_ge_ov    (PlanRegio) := eenmalig/ki_ge_ov    * (NCW/bw28/StartDiscountFactor * NCW/bw28/AnnualisationFactor) + VorigePeriode/jaarlijks/ge/Kji_ge_ov;
					attribute<Eur_yr> Kji_ge_pm    (PlanRegio) := eenmalig/ki_ge_pm    * (NCW/bw28/StartDiscountFactor * NCW/bw28/AnnualisationFactor) + VorigePeriode/jaarlijks/ge/Kji_ge_pm;
					attribute<Eur_yr> Kmi_ge_ov    (PlanRegio) := eenmalig/ki_ge_ov    * (NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor) + VorigePeriode/jaarlijks/ge/Kmi_ge_ov;
					attribute<Eur_yr> Kmi_ge_pm    (PlanRegio) := eenmalig/ki_ge_pm    * (NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor) + VorigePeriode/jaarlijks/ge/Kmi_ge_pm;
					attribute<Eur_yr> Om_ge_comfort(PlanRegio) := ='add('+AsItemList('.../Om_Comfort/'+LT_Component/name)+')';
					attribute<Eur_yr> Bji_ge_Aansl (PlanRegio) := eenmalig/Oi_lv_Aansl * (NCW/bw28/StartDiscountFactor * NCW/bw28/AnnualisationFactor) + VorigePeriode/jaarlijks/ge/Bji_ge_Aansl;
					attribute<Eur_yr> Oji_ge_EIA   (PlanRegio) := eenmalig/Oi_ge_EIA   * (NCW/bw28/StartDiscountFactor * NCW/bw28/AnnualisationFactor) + VorigePeriode/jaarlijks/ge/Oji_ge_EIA;
					attribute<Eur_yr> Omi_ge_EIA   (PlanRegio) := eenmalig/Oi_ge_EIA   * (NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor) + VorigePeriode/jaarlijks/ge/Omi_ge_EIA;	
					attribute<Eur> Ki_wd_Gnet      (PlanRegio) := const(0[Eur], PlanRegio);
				}

				container id
				{
					attribute<Eur_yr> Kj_id_elek     (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/totaal/Kj_id_elek')    + ')';
					attribute<Eur_yr> Km_id_elek     (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/totaal/Km_id_elek')    + ')';
					attribute<Eur_yr> Kj_id_elek_EH  (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/totaal/Kj_id_elek_EH') + ')';
					attribute<Eur_yr> Kj_id_elek_CO2 (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/totaal/Kj_id_elek_CO2')+ ')';

					attribute<Eur_yr> Kj_id_gas      (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen gasverbruik bij LT netten
					attribute<Eur_yr> Km_id_gas      (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen gasverbruik bij LT netten
					attribute<Eur_yr> Kj_id_gas_CO2  (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen gasverbruik bij LT netten
					attribute<Eur_yr> Kj_id_gas_EH   (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen gasverbruik bij LT netten

					attribute<Eur_yr> Kji_id         (PlanRegio) := eenmalig/ki_id * (NCW/id28/StartDiscountFactor * NCW/id28/AnnualisationFactor) + VorigePeriode/jaarlijks/id/Kji_id + VorigePeriode/jaarlijks/id/Kji_id;
					attribute<Eur_yr> Kmi_id         (PlanRegio) := eenmalig/ki_id * (NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor) + VorigePeriode/jaarlijks/id/Kmi_id + VorigePeriode/jaarlijks/id/Kmi_id;
					attribute<Eur_yr> Kj_id_oh       (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/OenM/Kj_id_oh ')+') + VorigePeriode/jaarlijks/id/Kj_id_oh';
					attribute<Eur_yr> Kj_id_adm      (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/OenM/Kj_id_adm')+') + VorigePeriode/jaarlijks/id/Kj_id_adm';

					attribute<Eur_yr> Oji_id_EIA     (PlanRegio) := eenmalig/Oi_id_EIA * (NCW/id28/StartDiscountFactor * NCW/id28/AnnualisationFactor) + VorigePeriode/jaarlijks/id/Oji_id_EIA + VorigePeriode/jaarlijks/id/Oji_id_EIA;
					attribute<Eur_yr> Omi_id_EIA     (PlanRegio) := eenmalig/Oi_id_EIA * (NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor) + VorigePeriode/jaarlijks/id/Omi_id_EIA + VorigePeriode/jaarlijks/id/Omi_id_EIA;
					attribute<Eur_yr> Oj_id_SDE      (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen aparte SDE voor inpandig distributEur
					attribute<Eur_yr> Kji_id_LO      (PlanRegio) := const(0[Eur_yr], PlanRegio);
					attribute<Eur_yr> Kmi_id_LO      (PlanRegio) := const(0[Eur_yr], PlanRegio);
					attribute<Eur_yr> Kj_id_LO_oh    (PlanRegio) := const(0[Eur_yr], PlanRegio);
				}

				container wd
				{
					attribute<Eur_yr> Kji_wd         (PlanRegio) := eenmalig/ki_wd * (NCW/wd28/StartDiscountFactor * NCW/wd28/AnnualisationFactor) + VorigePeriode/jaarlijks/wd/Kji_wd;
					attribute<Eur_yr> Kmi_wd         (PlanRegio) := eenmalig/ki_wd * (NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor) + VorigePeriode/jaarlijks/wd/Kmi_wd;
					attribute<Eur_yr> Kj_wd_elek     (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/Totaal/Kj_wd_elek') + ')';
					attribute<Eur_yr> Kj_wd_gas      (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen gasverbruik bij LT netten
					attribute<Eur_yr> Kj_wd_oh       (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/OenM/Kj_wd_oh ')+')+VorigePeriode/jaarlijks/wd/Kj_wd_oh';
					attribute<Eur_yr> Kj_wd_adm      (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/OenM/Kj_wd_adm')+')+VorigePeriode/jaarlijks/wd/Kj_wd_adm';
					attribute<Eur_yr> Km_wd_gas      (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen gasverbruik bij LT netten
					attribute<Eur_yr> Kj_wd_elek_CO2 (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/Totaal/Kj_wd_elek_CO2') + ')';
					attribute<Eur_yr> Kj_wd_gas_EH   (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen gasverbruik bij LT netten
					attribute<Eur_yr> Kj_wd_gas_CO2  (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen gasverbruik bij LT netten
					attribute<Eur_yr> Km_wd_elek     (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/Totaal/Km_wd_elek') + ')';
					attribute<Eur_yr> Kj_wd_elek_EH  (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/Totaal/Kj_wd_elek_EH') + ')';
					attribute<Eur_yr> Oj_wd_SDE      (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen aparte SDE voor wijkdistributEur
					attribute<Eur_yr> Oji_wd_EIA     (PlanRegio) := eenmalig/Oi_wd_EIA * (NCW/wd28/StartDiscountFactor * NCW/wd28/AnnualisationFactor);
					attribute<Eur_yr> Omi_wd_EIA     (PlanRegio) := eenmalig/Oi_wd_EIA * (NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor);

					attribute<Eur_yr> Kji_wd_Gnet    (PlanRegio) := const(0[Eur_yr], PlanRegio);
					attribute<Eur_yr> Kmi_wd_Gnet    (PlanRegio) := const(0[Eur_yr], PlanRegio);
					attribute<Eur_yr> Kj_wd_Gnet_oh  (PlanRegio) := const(0[Eur_yr], PlanRegio);
				}

				container pt
				{
					attribute<Eur_yr> Kj_pt_oh   (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen primair transport bij LT netten
					attribute<Eur_yr> Kj_pt_adm  (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen primair transport bij LT netten
					attribute<Eur_yr> Kji_pt     (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen primair transport bij LT netten
					attribute<Eur_yr> Kmi_pt     (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen primair transport bij LT netten
					attribute<Eur_yr> Omi_pt_EIA (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen primair transport bij LT netten
					attribute<Eur_yr> Oji_pt_EIA (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen primair transport bij LT netten
				}

				container ow
				{
					attribute<Eur_yr> Kj_ow_elek      (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen elektriciteitsverbruik bij opwekker
					attribute<Eur_yr> Kj_ow_gas	      (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen gasverbruik bij LT netten
					attribute<Eur_yr> Kj_ow_productie (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/OenM/Kj_ow_productie') + ') + VorigePeriode/jaarlijks/ow/Kj_ow_productie';
					attribute<Eur_yr> Kj_ow_oh        (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/OenM/Kj_ow_oh') + ') + VorigePeriode/jaarlijks/ow/Kj_ow_oh';
					attribute<Eur_yr> Kj_ow_adm       (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/OenM/Kj_ow_adm') + ') + VorigePeriode/jaarlijks/ow/Kj_ow_adm';
					attribute<Eur_yr> Kji_ow          (PlanRegio) := eenmalig/ki_ow * (NCW/ow28/StartDiscountFactor * NCW/ow28/AnnualisationFactor) + VorigePeriode/jaarlijks/ow/Kji_ow;
					attribute<Eur_yr> Kmi_ow          (PlanRegio) := eenmalig/ki_ow * (NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor) + VorigePeriode/jaarlijks/ow/Kmi_ow;
					attribute<Eur_yr> Km_ow_gas       (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen gasverbruik bij LT netten
					attribute<Eur_yr> Kj_ow_elek_EH   (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen elektriciteitsverbruik bij opwekker
					attribute<Eur_yr> Kj_ow_elek_CO2  (PlanRegio) := const(0[Eur_yr], PlanRegio);  // geen elektriciteitsverbruik bij opwekker
					attribute<Eur_yr> Km_ow_elek      (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen elektriciteitsverbruik bij opwekker
					attribute<Eur_yr> Kj_ow_gas_EH    (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen gasverbruik bij LT netten
					attribute<Eur_yr> Kj_ow_gas_CO2   (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen gasverbruik bij LT netten
					attribute<Eur_yr> Omi_ow_EIA      (PlanRegio) := eenmalig/Oi_ow_EIA * (NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor) + VorigePeriode/jaarlijks/ow/Omi_ow_EIA;
					attribute<Eur_yr> Oj_ow_SDE       (PlanRegio) := const(0[Eur_yr], PlanRegio); // geen aparte SDE voor opwekker
					attribute<Eur_yr> Oji_ow_EIA      (PlanRegio) := eenmalig/Oi_ow_EIA * (NCW/ow28/StartDiscountFactor * NCW/ow28/AnnualisationFactor) + VorigePeriode/jaarlijks/ow/Oji_ow_EIA;
				}

				container lv
				{
					attribute<Eur_yr> Oj_lv_SDE       (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/Oj_SDE') + ') + VorigePeriode/jaarlijks/lv/Oj_lv_SDE';
					attribute<Eur_yr> Oji_lv_aansl    (PlanRegio) := eenmalig/Oi_lv_aansl * (NCW/id28/StartDiscountFactor * NCW/id28/AnnualisationFactor) + VorigePeriode/jaarlijks/lv/Oji_lv_aansl;
					attribute<Eur_yr> Omi_lv_aansl    (PlanRegio) := eenmalig/Oi_lv_aansl * (NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor) + VorigePeriode/jaarlijks/lv/Omi_lv_aansl;	
					attribute<Eur_yr> Oj_lv_vastrecht (PlanRegio) := ='add('+AsItemList('Oj_Vastrecht/'+LT_Component/name)+')';
					attribute<Eur_yr> Oj_lv_verbruik  (PlanRegio) := ='add('+AsItemList('Oj_Verbruik/'+LT_Component/name)+')';
				}
			}

			container Verbruik
			{
				attribute<Gj_yr> V_id_gas     (PlanRegio) := const(0[Gj_yr], PlanRegio); // geen gasverbruik bij LT netten
				attribute<Gj_yr> V_wd_gas     (PlanRegio) := const(0[Gj_yr], PlanRegio); // geen gasverbruik bij LT netten
				attribute<Gj_yr> V_ow_gas     (PlanRegio) := const(0[Gj_yr], PlanRegio); // geen gasverbruik bij LT netten

				attribute<Gj_yr> V_id_elek    (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/Totaal/V_id_elek') + ')';
				attribute<Gj_yr> V_wd_elek    (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/Totaal/V_wd_elek') + ')';
				attribute<Gj_yr> V_ow_elek    (PlanRegio) := const(0[Gj_yr], PlanRegio);

				attribute<Gj_yr> V_id_verlies (PlanRegio) := const(0[Gj_yr], PlanRegio);
				attribute<Gj_yr> V_wd_verlies (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/Totaal/V_wd_verlies') + ')';
				attribute<Gj_yr> V_pt_verlies (PlanRegio) := const(0[Gj_yr], PlanRegio); // geen primair transport bij LT netten

				attribute<Gj_yr> V_warmte     (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/Totaal/V_warmte')+ ')';
				attribute<Gj_yr> V_koude      (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/name + '/PR/Totaal/V_koude') + ')';
//				attribute<Gj_yr> V_WKO        (PlanRegio) := V_warmte - V_koude;

				// generieke netto warmte onttrekking:
				attribute<Gj_yr> V_id_warmte (PlanRegio) := V_warmte    - (V_id_gas + V_id_elek - V_id_verlies);
				attribute<Gj_yr> V_wd_warmte (PlanRegio) := V_id_warmte - (V_wd_gas + V_wd_elek - V_wd_verlies);
				attribute<Gj_yr> V_ow_warmte (PlanRegio) := V_wd_warmte - (V_ow_gas + V_ow_elek - V_pt_verlies);
				attribute<Gj_yr> V_ow_koude  (PlanRegio) := V_Koude;
				attribute<Gj_yr> V_H2        (PlanRegio) := const(0[Gj_yr], PlanRegio);
			}

			container Uitstoot
			{
				attribute<KG_yr> CO2_id_gas  (PlanRegio) := const(0[KG_yr], PlanRegio); // geen gasverbruik bij LT netten
				attribute<KG_yr> CO2_wd_gas  (PlanRegio) := const(0[KG_yr], PlanRegio); // geen gasverbruik bij LT netten
				attribute<KG_yr> CO2_ow_gas  (PlanRegio) := const(0[KG_yr], PlanRegio); // geen gasverbruik bij LT netten

				attribute<KG_yr> CO2_id_elek (PlanRegio) := verbruik/V_id_elek * prijzen/Elektriciteit/CO2_GJ;
				attribute<KG_yr> CO2_wd_elek (PlanRegio) := verbruik/V_wd_elek * prijzen/Elektriciteit/CO2_GJ;
				attribute<KG_yr> CO2_ow_elek (PlanRegio) := verbruik/V_ow_elek * prijzen/Elektriciteit/CO2_GJ;
			}
		}
	}
}
