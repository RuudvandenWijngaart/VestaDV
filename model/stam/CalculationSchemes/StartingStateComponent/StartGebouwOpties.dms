//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2023 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container StartGebouwOpties
{
	//toekenning gebouwopties in startjaar

	//parameters
	container par
	{
		//parameters voor toekenning o.b.v. liggingsgegevens
		parameter<Classifications/SchilLabel>   label_cutoff_ewp := Classifications/SchilLabel/V/B          , descr = "energielabel vanaf welk niveau warmtepomp wordt toegekent bij onbekend verwarmingssysteem";
		parameter<Classifications/GebouwOptie>  optie_bioketel   := Classifications/GebouwOptie/V/Bioketel_zKD, descr = "GebouwOptie voor gebouwen op biomassa";
		parameter<Classifications/GebouwOptie>  optie_hwp        := Classifications/GebouwOptie/V/HWP_zKD_TWg , descr = "GebouwOptie voor gebouwen op warmtepomp (hybride)";
		parameter<Classifications/GebouwOptie>  optie_warmtenet  := Classifications/GebouwOptie/V/Gebied_zK   , descr = "GebouwOptie voor gebouwen op warmtenet";
		parameter<Classifications/GebouwOptie>  optie_lwp        := Classifications/GebouwOptie/V/LweWP_zKD   , descr = "GebouwOptie voor gebouwen op warmtepomp (lucht)";
		parameter<Classifications/GebouwOptie>  optie_bwp        := Classifications/GebouwOptie/V/BweWP_zKD   , descr = "GebouwOptie voor gebouwen op warmtepomp (bodem)";
		parameter<Classifications/GebouwOptie>  optie_olieketel  := Classifications/GebouwOptie/V/Olie_zKD    , descr = "GebouwOptie voor gebouwen op olie";
		parameter<Classifications/GebouwOptie>  optie_HRketel    := Classifications/GebouwOptie/V/HR_zKD;
		
		//parameters voor kansberekening
		parameter<ratio> aandeelHR := Invoer/StartgegevensAan ? 0.75[ratio] : 0.00[ratio], descr = "aandeel gebouwen met moderne HR ketel i.t.t. verouderde VR ketel";
		
		//parameters oliekachels: aantallen per categorie woningen
		parameter<ratio> vrst_koop_1930               := MakeDefined((6166[float64] + 1191[float64]) / sum(float64(
			   Woningtype_rel == Classifications/WoningType/V/vrijstaand
			&& Eigendom_rel == Classifications/Eigendom/V/koop
			&& BouwjaarOf9999 < 1930[yr_uint16]
			)), 0.0);
		parameter<ratio> vrst_koop_1931_1959          := MakeDefined((5054[float64] + 1117[float64]) / sum(float64(
			   Woningtype_rel == Classifications/WoningType/V/vrijstaand
			&& Eigendom_rel == Classifications/Eigendom/V/koop
			&& (BouwjaarOf9999 >= 1930[yr_uint16] && BouwjaarOf9999 < 1960[yr_uint16])
			)), 0.0);
		parameter<ratio> vrst_koop_1960_1980          := MakeDefined((1941[float64] + 0137[float64]) / sum(float64(
			   Woningtype_rel == Classifications/WoningType/V/vrijstaand
			&& Eigendom_rel == Classifications/Eigendom/V/koop
			&& (BouwjaarOf9999 >= 1960[yr_uint16] && BouwjaarOf9999 < 1980[yr_uint16])
			)), 0.0);

		parameter<ratio> vrst_parthuur_1930           := MakeDefined((0737[float64] + 0234[float64]) / sum(float64(
			   Woningtype_rel == Classifications/WoningType/V/vrijstaand
			&& Eigendom_rel == Classifications/Eigendom/V/parthuur
			&& BouwjaarOf9999 < 1930[yr_uint16]
			)), 0.0);
		parameter<ratio> vrst_parthuur_1931_1959      := MakeDefined((0469[float64] + 0020[float64]) / sum(float64(
			   Woningtype_rel == Classifications/WoningType/V/vrijstaand
			&& Eigendom_rel == Classifications/Eigendom/V/parthuur
			&& (BouwjaarOf9999 >= 1930[yr_uint16] && BouwjaarOf9999 < 1960[yr_uint16])
			)), 0.0);
		parameter<ratio> vrst_parthuur_1960_1980      := MakeDefined((0112[float64] + 0024[float64]) / sum(float64(
			   Woningtype_rel == Classifications/WoningType/V/vrijstaand
			&& Eigendom_rel == Classifications/Eigendom/V/parthuur
			&& (BouwjaarOf9999 >= 1960[yr_uint16] && BouwjaarOf9999 < 1980[yr_uint16])
			)), 0.0);

		parameter<ratio> hoek_21kp_koop_1930          := MakeDefined((2437[float64] + 0457[float64]) / sum(float64(
			   (Woningtype_rel == Classifications/WoningType/V/twee_onder_1_kap || Woningtype_rel == Classifications/WoningType/V/hoekwoning)
			&& Eigendom_rel == Classifications/Eigendom/V/koop
			&& BouwjaarOf9999 < 1930[yr_uint16]
			)), 0.0);
		parameter<ratio> hoek_21kp_koop_1931_1959     := MakeDefined((1421[float64] + 0492[float64]) / sum(float64(
			   (Woningtype_rel == Classifications/WoningType/V/twee_onder_1_kap || Woningtype_rel == Classifications/WoningType/V/hoekwoning)
			&& Eigendom_rel == Classifications/Eigendom/V/koop
			&& (BouwjaarOf9999 >= 1930[yr_uint16] && BouwjaarOf9999 < 1960[yr_uint16])
			)), 0.0);
		parameter<ratio> hoek_21kp_koop_1960_1980     := MakeDefined((3635[float64] + 0000[float64]) / sum(float64(
			   (Woningtype_rel == Classifications/WoningType/V/twee_onder_1_kap || Woningtype_rel == Classifications/WoningType/V/hoekwoning)
			&& Eigendom_rel == Classifications/Eigendom/V/koop
			&& (BouwjaarOf9999 >= 1960[yr_uint16] && BouwjaarOf9999 < 1980[yr_uint16])
			)), 0.0);

		parameter<ratio> hoek_21kp_parthuur_1930      := MakeDefined((0250[float64] + 0267[float64]) / sum(float64(
			   (Woningtype_rel == Classifications/WoningType/V/twee_onder_1_kap || Woningtype_rel == Classifications/WoningType/V/hoekwoning)
			&& Eigendom_rel == Classifications/Eigendom/V/parthuur
			&& BouwjaarOf9999 < 1930[yr_uint16]
			)), 0.0);
		parameter<ratio> hoek_21kp_parthuur_1931_1959 := MakeDefined((0196[float64] + 0000[float64]) / sum(float64(
			   (Woningtype_rel == Classifications/WoningType/V/twee_onder_1_kap || Woningtype_rel == Classifications/WoningType/V/hoekwoning)
			&& Eigendom_rel == Classifications/Eigendom/V/parthuur
			&& (BouwjaarOf9999 >= 1930[yr_uint16] && BouwjaarOf9999 < 1960[yr_uint16])
			)), 0.0);
		parameter<ratio> hoek_21kp_parthuur_1960_1980 := MakeDefined((0289[float64] + 0000[float64]) / sum(float64(
			   (Woningtype_rel == Classifications/WoningType/V/twee_onder_1_kap || Woningtype_rel == Classifications/WoningType/V/hoekwoning)
			&& Eigendom_rel == Classifications/Eigendom/V/parthuur
			&& (BouwjaarOf9999 >= 1960[yr_uint16] && BouwjaarOf9999 < 1980[yr_uint16])
			)), 0.0);

		parameter<uint32> HRseed   := /Invoer/TechnischeInstellingen/RandomSeed * 314[uint32];
		parameter<uint32> Oseed    := /Invoer/TechnischeInstellingen/RandomSeed * 315[uint32];
		parameter<uint32> HWPseed  := /Invoer/TechnischeInstellingen/RandomSeed * 316[uint32];
		parameter<uint32> LWPseed  := /Invoer/TechnischeInstellingen/RandomSeed * 317[uint32];
		parameter<uint32> BWPseed  := /Invoer/TechnischeInstellingen/RandomSeed * 318[uint32];

		parameter<ratio>  R_Bodem  := 0.13[ratio], Source = "Datasheet TNO ingroei warmtepompen";
	}

	//heeft gebouw een warmtenetaansluiting? initiele check o.b.v. ligging warmtenetten (gebouw ligt in warmtenetgebied, en dat gebied is eerder dan eerste rekenjaar aangelegd)
	attribute<bool> AllocWarmtenet  (results) := MakeDefined(BestaandAflevergebied/StartJaar_or_2000[BestaandAflevergebied_rel], 9999w) <= first(/Rekenstap/Jaar);

	container WPallocatie
	{
		//heeft gebouw een warmtepomp? initiele check o.b.v. ligging gasnetten en warmtenetten (gebouw ligt niet in warmtenet, is wel gasloos, en heeft een goed label)
		attribute<bool> AllocWarmtepomp_i (results) := gasloos && not(AllocWarmtenet) && Defaultlabel_rel <= par/label_cutoff_ewp;
		attribute<bool> AllocLWP_i        (results) := AllocWarmtepomp_i && not(AllocBWP_i);
		attribute<bool> AllocBWP_i        (results) := AllocWarmtepomp_i && rnd_uniform(par/BWPseed, results, range(float64, 0d, 1d)) < par/R_Bodem;

		unit<uint32> ObjectKlassen := Invoer/Kengetallen/Bebouwing/Woning/Results
		{
			attribute<nrAsl> nr_candidate   := sum(Results/nrAansluitingen_i,ModelObject_rel);
			attribute<ratio> R_HWP          := ModelObject/InstallatieFrequentie/R_HWP;
			attribute<ratio> R_LWP          := ModelObject/InstallatieFrequentie/R_LWP;
			attribute<ratio> R_BWP          := ModelObject/InstallatieFrequentie/R_BWP;
			attribute<bool>  ToekomstKlasse := Invoer/Kengetallen/Bebouwing/Woning/Results/BouwJaar_rel >= Classifications/BouwjaarWoning/V/v2030;

			unit<uint32> HWP := results
			{
				attribute<bool>    kanAllocHWP                  := not(AllocWarmtenet || AllocWarmtepomp_i || AllocBioketel || AllocOlieketel);
				attribute<float64> rnd                          := rnd_uniform(par/HWPseed, results, range(float64, 0d, 1d));
				attribute<nrAsl>   CandidateHWP   (ModelObject) := sum(nrAansluitingen_i * float64(kanAllocHWP), ModelObject_rel);
				attribute<nrAsl>   toAllocate     (ModelObject) := ToekomstKlasse ? 0.0[nrAsl] : R_HWP * nr_candidate;
				attribute<float64> P              (ModelObject) := makedefined(float64(toAllocate / CandidateHWP),0.0[float64]);
				attribute<bool>    Allocated                    := kanAllocHWP && rnd < P[ModelObject_rel];
			}

			unit<uint32> LWP := results
			{
				attribute<bool>    kanAllocLWP                  := not(AllocWarmtenet || AllocWarmtepomp_i || AllocBioketel || AllocOlieketel || HWP/Allocated);
				attribute<float64> rnd                          := rnd_uniform(par/LWPseed, results, range(float64, 0d, 1d));
				attribute<nrAsl>   CandidateLWP   (ModelObject) := sum(nrAansluitingen_i * float64(kanAllocLWP), ModelObject_rel);
				attribute<nrAsl>   LWP_allocated  (ModelObject) := ToekomstKlasse ? 0.0[nrAsl] : sum(float64(AllocLWP_i) * Results/nrAansluitingen_i, ModelObject_rel);
				attribute<nrAsl>   LWP_target     (ModelObject) := ToekomstKlasse ? 0.0[nrAsl] : R_LWP * nr_candidate;
				attribute<nrAsl>   toAllocate     (ModelObject) := max_elem(LWP_target - LWP_allocated, 0.0[nrAsl]);
				attribute<float64> P              (ModelObject) := makedefined(float64(toAllocate / CandidateLWP),0.0[float64]);
				attribute<bool>    Allocated                    := kanAllocLWP && rnd < P[ModelObject_rel];
				attribute<nrAsl>   Allocated_check(ModelObject) := sum(float64(Allocated) * nrAansluitingen_i, ModelObject_rel);
			}

			unit<uint32> BWP := results
			{
				attribute<bool>    kanAllocBWP                  := not(AllocWarmtenet || AllocWarmtepomp_i || AllocBioketel || AllocOlieketel || HWP/Allocated || LWP/Allocated);
				attribute<float64> rnd                          := rnd_uniform(par/BWPseed, results, range(float64, 0d, 1d));
				attribute<nrAsl>   CandidateBWP   (ModelObject) := sum(nrAansluitingen_i * float64(kanAllocBWP), ModelObject_rel);
				attribute<nrAsl>   BWP_allocated  (ModelObject) := ToekomstKlasse ? 0.0[nrAsl] : sum(float64(AllocBWP_i) * Results/nrAansluitingen_i, ModelObject_rel);
				attribute<nrAsl>   BWP_target     (ModelObject) := ToekomstKlasse ? 0.0[nrAsl] : R_BWP * nr_candidate;
				attribute<nrAsl>   toAllocate     (ModelObject) := max_elem(BWP_target - BWP_allocated, 0.0[nrAsl]);
				attribute<float64> P              (ModelObject) := makedefined(float64(toAllocate / CandidateBWP),0.0[float64]);
				attribute<bool>    Allocated                    := kanAllocBWP && rnd < P[ModelObject_rel];
				attribute<nrAsl>   Allocated_check(ModelObject) := sum(float64(Allocated) * nrAansluitingen_i, ModelObject_rel);
			}

			unit<uint32> LWP_remove := results
			{
				attribute<nrAsl>   PrevAllocated  (ModelObject) := LWP/LWP_allocated;
				attribute<nrAsl>   LWP_toRemove   (ModelObject) := abs(min_elem(LWP/LWP_target - PrevAllocated, 0.0[nrAsl]));
				attribute<float64> P              (ModelObject) := makedefined(float64(LWP_toRemove / PrevAllocated),0.0[float64]);
				attribute<bool>    Remove                       := AllocLWP_i && LWP_toRemove[ModelObject_rel] > 0.0[nrAsl] && LWP/rnd < P[ModelObject_rel];
				attribute<nrAsl>   Removed_check  (ModelObject) := sum(float64(Remove) * nrAansluitingen_i, ModelObject_rel);
			}

			unit<uint32> BWP_remove := results
			{
				attribute<nrAsl>   PrevAllocated  (ModelObject) := BWP/BWP_allocated;
				attribute<nrAsl>   BWP_toRemove   (ModelObject) := abs(min_elem(BWP/BWP_target - PrevAllocated, 0.0[nrAsl]));
				attribute<float64> P              (ModelObject) := makedefined(float64(BWP_toRemove / PrevAllocated),0.0[float64]);
				attribute<bool>    Remove                       := AllocBWP_i && BWP_toRemove[ModelObject_rel] > 0.0[nrAsl] && BWP/rnd < P[ModelObject_rel];
				attribute<nrAsl>   Removed_check  (ModelObject) := sum(float64(Remove) * nrAansluitingen_i, ModelObject_rel);
			}
		}
	}
	
	attribute<yr_uint16> BouwjaarOf9999(results) := MakeDefined(Bouwjaar, 9999[yr_uint16]);

	container WPnormering
	{
		attribute<bool> WPnormering_geldig  (results) := 
			  BouwjaarOf9999  < 2020[yr_uint16] ? false
			: Bouwjaar == 2020[yr_uint16] ? rnd_uniform(/Invoer/TechnischeInstellingen/RandomSeed * 441[uint32], results, range(float64, 0d, 1d)) < 0.86[float64]
			: Bouwjaar == 2021[yr_uint16] ? rnd_uniform(/Invoer/TechnischeInstellingen/RandomSeed * 442[uint32], results, range(float64, 0d, 1d)) < 0.91[float64]
			: true;

		attribute<bool> BWP_normering (results) := WPnormering_geldig && rnd_uniform(/Invoer/TechnischeInstellingen/RandomSeed * 443[uint32], results, range(float64, 0d, 1d)) < par/R_Bodem;
		attribute<bool> LWP_normering (results) := WPnormering_geldig && not(BWP_normering);
	}

	attribute<bool> AllocHWP  (results) := WPallocatie/ObjectKlassen/hWP/Allocated;
	attribute<bool> AllocLWP  (results) := or(WPallocatie/AllocLWP_i && not(WPallocatie/ObjectKlassen/LWP_remove/Remove), WPallocatie/ObjectKlassen/LWP/Allocated, WPnormering/LWP_normering );
	attribute<bool> AllocBWP  (results) := or(WPallocatie/AllocBWP_i && not(WPallocatie/ObjectKlassen/BWP_remove/Remove), WPallocatie/ObjectKlassen/BWP/Allocated, WPnormering/BWP_normering );

	//heeft gebouw een bioketel? initiele check o.b.v. ligging gasnetten en warmtenetten (overige gasloze gebouwen gebouwen)
	attribute<bool> AllocBioketel   (results) := gasloos && not(AllocWarmtenet) && not(WPallocatie/AllocWarmtepomp_i);
	//attribute<bool> AllocBioketel   (results) := gasloos && not(AllocWarmtenet) && not(AllocHWP) && not(AllocBWP) && not(AllocLWP);

	//heeft gebouw een oliekachel? o.b.v. sampling
	attribute<float64> rnd_1        (results) := rnd_uniform(par/HRseed, results, range(float64, 0d, 1d));
	attribute<bool> AllocOlieketel  (results) := not(AllocWarmtenet) && not( WPallocatie/AllocWarmtepomp_i) && not(AllocBioketel) && (
			  Woningtype_rel == Classifications/WoningType/V/vrijstaand ?
				( Eigendom_rel == Classifications/Eigendom/V/koop ?
				  	( BouwjaarOf9999 < 1930[yr_uint16] ? (rnd_1 < par/vrst_koop_1930)
				  	: BouwjaarOf9999 < 1960[yr_uint16] ? (rnd_1 < par/vrst_koop_1931_1959)
				  	: BouwjaarOf9999 < 1980[yr_uint16] ? (rnd_1 < par/vrst_koop_1960_1980)
				  	: false)
				: Eigendom_rel == Classifications/Eigendom/V/parthuur ?
					( BouwjaarOf9999 < 1930[yr_uint16] ? (rnd_1 < par/vrst_parthuur_1930)
				  	: BouwjaarOf9999 < 1960[yr_uint16] ? (rnd_1 < par/vrst_parthuur_1931_1959)
				  	: BouwjaarOf9999 < 1980[yr_uint16] ? (rnd_1 < par/vrst_parthuur_1960_1980)			
				  	: false) : false)
			: Woningtype_rel == Classifications/WoningType/V/twee_onder_1_kap || Woningtype_rel == Classifications/WoningType/V/hoekwoning ?
				( Eigendom_rel == Classifications/Eigendom/V/koop ?
				  	( BouwjaarOf9999 < 1930[yr_uint16] ? (rnd_1 < par/hoek_21kp_koop_1930)
				  	: BouwjaarOf9999 < 1960[yr_uint16] ? (rnd_1 < par/hoek_21kp_koop_1931_1959)
				  	: BouwjaarOf9999 < 1980[yr_uint16] ? (rnd_1 < par/hoek_21kp_koop_1960_1980)
				  	: false)
				: Eigendom_rel == Classifications/Eigendom/V/parthuur ?
					( BouwjaarOf9999 < 1930[yr_uint16] ? (rnd_1 < par/hoek_21kp_parthuur_1930)
				  	: BouwjaarOf9999 < 1960[yr_uint16] ? (rnd_1 < par/hoek_21kp_parthuur_1931_1959)
				  	: BouwjaarOf9999 < 1980[yr_uint16] ? (rnd_1 < par/hoek_21kp_parthuur_1960_1980)
				  	: false) : false)
			: false
		);

	//heeft gebouw een moderne HR ketel? o.b.v. sampling
	attribute<float64> rnd_2        (results) := rnd_uniform(par/HRseed, results, range(float64, 0d, 1d));
	attribute<bool> AllocHRketel    (results) := not(AllocWarmtenet) && not(AllocHWP) && not(AllocBWP) && not(AllocLWP) && not(AllocBioketel) && not(AllocOlieketel) && float64(par/aandeelHR) > rnd_2;



	attribute<Classifications/GebouwOptie> GebouwOptie_rel (results) :=
				AllocBioketel   ? par/optie_bioketel
			:	AllocHWP        ? par/optie_HWP
			:	AllocLWP        ? par/optie_LWP
			:	AllocBWP        ? par/optie_BWP
			:	AllocWarmtenet  ? par/optie_warmtenet
			:	AllocOlieketel  ? par/optie_olieketel
			:   AllocHRketel    ? par/optie_HRketel
			:	ModelObject/StartOptie_rel[ModelObject_rel];
}
