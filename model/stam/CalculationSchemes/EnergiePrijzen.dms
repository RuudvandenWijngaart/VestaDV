//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2021 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container EnergiePrijzen
{
	template GebruiksSectie
	{
		// begin case parameters
		unit<uint32>      table;
		parameter<string> code;
		// end case parameters

		attribute<Eur_GJ> netwerk          (table) := ='table/netkosten_eur_e[Eur_per_eenheid] * OmrekenFactor';
		attribute<Eur_GJ> CommodityPrice   (table) := ='table/commodity_eur_e[Eur_per_eenheid] * OmrekenFactor';
		attribute<Eur_GJ> Marge            (table) := ='table/marge_eur_e[Eur_per_eenheid] * OmrekenFactor';
		attribute<Eur_GJ> EnergieHeffing   (table) := ='(table/EB_eur_e[Eur_per_eenheid] + table/ODE_eur_e[Eur_per_eenheid]) * OmrekenFactor';
		attribute<Eur_GJ> Maatschappelijk  (table) := CommodityPrice + Marge + netwerk;
		attribute<Eur_GJ> eindgebruik_excl (table) := Maatschappelijk + EnergieHeffing;
	}

	template ImportElekGas
	{
		// begin case parameters
		parameter<string>     FileName;
		unit<float64>         model_eenheid;
		unit<float64>         eenheid_GJ;
		parameter<eenheid_GJ> OmrekenFactor;
		// end case parameters

		unit<float64> Eur_per_eenheid := units/Eur / model_eenheid, IsHidden = "True";
		unit<float64> kg_per_eenheid  := units/kg  / model_eenheid, IsHidden = "True";

		unit<uint32> table
		:	StorageName     = "='%HestiaDataDir%/EnergiePrijzen/'+ FileName + '.csv'"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	SyncMode        = "All"
		,	IsHidden        = "True";

		container Results
		{
			attribute<yr_uint16>  Jaar            (table) := table/Jaar[yr_uint16 ];
			attribute<kg_GJ>      CO2_GJ          (table) := table/RAT_CO2_KWH[KG / model_eenheid] * OmrekenFactor;
			attribute<eur_yr_asl> Heffingskorting (table) := table/Heffingskorting_eur_asl[Eur_yr_asl ];
			
			container LuchtEmissie : IsHidden = "True"
			{
				attribute<kg_GJ> NOx_GJ (table) := table/RAT_NOx_GJ[KG_GJ];
				attribute<kg_GJ> SO2_GJ (table) := table/RAT_SO2_GJ[KG_GJ];
				attribute<kg_GJ> VOS_GJ (table) := table/RAT_VOS_GJ[KG_GJ];
				attribute<kg_GJ> TS_GJ  (table) := table/RAT_TS_GJ[KG_GJ] ;
			}

			container Vastrecht
			{
				attribute<Eur_yr_asl> aansluitvergoeding (table) := table/aansluitvergoeding_eur_asl[Eur_yr_asl];
				attribute<Eur_yr_asl> vastrechttarief    (table) := table/vastrecht_eur_asl[Eur_yr_asl];
				attribute<Eur_yr_asl> capaciteitstarief  (table) := table/capaciteitstarief_eur_asl[Eur_yr_asl];
				attribute<Eur_yr_asl> meettarief         (table) := table/meettarief_eur_asl[Eur_yr_asl];
				attribute<Eur_yr_asl> Vastrecht          (table) := aansluitvergoeding + vastrechttarief + capaciteitstarief + meettarief;
			}
			
			container Teruglevering
			{
				parameter<string> code := 'TL';

				attribute<Eur_GJ> netwerk          (table) := const(0[Eur_GJ], table);
				attribute<Eur_GJ> CommodityPrice   (table) := KleinGebruik/CommodityPrice;
				attribute<Eur_GJ> Marge            (table) := KleinGebruik/Marge;
				attribute<Eur_GJ> EnergieHeffing   (table) := const(0[Eur_GJ], table);
				attribute<Eur_GJ> Maatschappelijk  (table) := CommodityPrice + Marge + netwerk;
				attribute<Eur_GJ> eindgebruik_excl (table) := Maatschappelijk + EnergieHeffing;
			}

			container KleinGebruik        := GebruiksSectie(table, 'KG');
			container KleinMiddelGebruik  := GebruiksSectie(table, 'KMG');
			container MiddelMiddelGebruik := GebruiksSectie(table, 'MMG');
			container GrootGebruik        := GebruiksSectie(table, 'GG');
		}
	}

	template ImportOverig
	{
		// begin case parameters
		parameter<string> FileName;
		// end case parameters

		unit<uint32> table
		:	StorageName     = "='%EnergieDataProjDir%/'+ FileName + '.csv'"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	SyncMode        = "All"
		,	IsHidden        = "True";

		container Results
		{
			attribute<yr_uint16> Jaar        (table) := table/Jaar[yr_uint16];
			attribute<Eur_GJ>    BioBron     (table) := table/KGJ_BioBron    [Eur_GJ] ;
			attribute<Eur_GJ>    BioMassa    (table) := table/KGJ_BioMassa   [Eur_GJ] ;
			attribute<Eur_GJ>    Olie        (table) := table/KGJ_Olie       [Eur_GJ] ;
			attribute<Eur_GJ>    Olie_EH     (table) := table/KGJ_Olie_EH    [Eur_GJ] ;
			attribute<Eur_GJ>    Pellets     (table) := table/KGJ_Pellets    [Eur_GJ] ;
			attribute<Eur_GJ>    Kolen_Excl  (table) := table/KGJ_Kolen_Excl [Eur_GJ] ;
			attribute<Eur_GJ>    Kolen_CO2   (table) := table/KGJ_Kolen_CO2  [Eur_GJ] ;
			attribute<Eur_GJ>    Waterstof   (table) := (H2mix/K_kg / Kengetallen/H2kentallen/H2energie_onder) * 1000[mj / gj];

			attribute<kg_GJ>     CO2BioMassa (table) := DefaultInstellingen/Basis/Rapportage/ReportCO2Biomassa ? table/CO2_BioMassa[KG_GJ] : 0.0[kg_GJ];
			attribute<kg_GJ>     CO2Pellets  (table) := DefaultInstellingen/Basis/Rapportage/ReportCO2Biomassa ? table/CO2_Pellets [KG_GJ] : 0.0[kg_GJ];
			attribute<kg_GJ>     CO2Olie     (table) := DefaultInstellingen/Basis/Rapportage/ReportCO2Biomassa ? table/CO2_Olie    [KG_GJ] : 0.0[kg_GJ];
			
			container H2mix
			{
				attribute<Eur_KG> K_H2_bla (table) := table/EurKG_H2_B[Eur_KG] ;
				attribute<Eur_KG> K_H2_gro (table) := table/EurKG_H2_G[Eur_KG] ;
				attribute<ratio>  R_groen  (table) := table/R_groen [ratio];
				attribute<ratio>  R_blauw  (table) := table/R_blauw [ratio];
				attribute<Eur_KG> K_kg     (table) := K_H2_bla * R_blauw + K_H2_gro * R_groen, IntegrityCheck = "(R_groen + R_blauw) == 1.0[ratio]";
			}
		}
	}

	template All
	{
		// begin case parameters
		parameter<string> FileName;
		// end case parameters

		container Elektriciteit := ImportElekGas(
			 FileName + '_Elek'
			,kWh
			,kWh / GJ
			,value(1000000.0 / 3600.0, kWh / GJ)
		);

		container AardGas := ImportElekGas(
			 FileName + '_Gas'
			,m3
			,m3 / GJ
			,1.0 / Kengetallen/constanten/GasEnergie
		);
		
		container Overig := ImportOverig ('OverigeKosten');
	}
}