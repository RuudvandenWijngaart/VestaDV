//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2020 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template BebouwingsComponentT
{
	// begin case parameters
	unit<uint32>      BebouwingsObjectZonderNieuwbouw;
	parameter<string> BCname;
	parameter<bool>   IsNieuwbouw;
	parameter<bool>   HasResterendFactors;

	container       ResterendFactorMaps;
	unit<uint32>    ModelObject;
	attribute<bool> SchilSprong_sel(Classifications/SchilSprong);
	container       LocatieSpecifiekeOpties;
	container       VraagKentallenComponent;
	unit<uint32>    PrevObject;

	unit<uint8> PrijzenAardgas;

	parameter<string> NcwRefBase;
	parameter<ratio>  BTW_Factor;
	parameter<ratio>  BTW_Factor_gv;
	// end of case parameters

	parameter<Classifications/BebouwingsComponent> BC_rel := rlookup(BCname, Classifications/BebouwingsComponent/name); // TODO_OV: Laat dit de parameter zijn en zoek de rest op.

	container NcwRefs
	{
		container _15 := ='NCW/'+NcwRefBase+'15';
		container _30 := ='NCW/'+NcwRefBase+'30';
		container _50 := ='NCW/'+NcwRefBase+'50';
		container _28 := ='NCW/'+NcwRefBase+'28';
		container _20 := ='NCW/'+NcwRefBase+'20';
	}

	unit<uint8> PrijzenElektriciteit := Prijzen/Elektriciteit/Staffel;

	unit<uint8> BebouwingsTypeDomein := BO/BebouwingsTypeDomein;

	container union := =IsNieuwbouw ? 'CalculationSchemes/BebouwingsOperaties/union(PrevObject, BebouwingsObjectZonderNieuwbouw)' : '..';

	unit<uint32> BO := = IsNieuwbouw ? 'union/result' : 'BebouwingsObjectZonderNieuwbouw'
	{
		container BebouwingsComponent_UpRef := ..; // TODO_OV: used sporadically, try to avoid this CHECK
		container NcwRefs                   := BebouwingsComponent_UpRef/NcwRefs;
		container Opbrengsten               := BebouwingsComponent_UpRef/Opbrengsten;
		container VraagKentallen            := VraagKentallenComponent;
		container BcKentallen               := BC_kentallen;

		unit<uint32>    ModelObjectDomain := ModelObject;
		attribute<Invoer/SpecifiekeInstellingen/PlanRegio> PlanRegio_rel (BO) := BO/buurt_rel;
		attribute<ModelObject>                             Model_rel     (BO) := rlookup(BO/ModelObjectKey, ModelObject/ModelObjectKey), KeepData = "True";
		attribute<PrevObject>                              PrevObject_rel(BO) := rlookup(BO/code, PrevObject/code);

		unit<uint32>  AfnameGebied         := PrevState/AfnameGebied;

		attribute<Classifications/Schillabel>  Schillabel_rel  (BO) := makedefined(PrevObject/Schillabel_rel[PrevObject_rel], ModelObject/SchilLabel_rel[Model_rel]);
		
		attribute<Units/yr> GeenLabel_Bouwjaar (BO) := =BCname == 'BestaandeWoning' ? 
			 'Schillabel_rel == Classifications/schillabel/V/N ? Invoer/RuimtelijkeData/BAG/vbo_woonfunctie_studiegebied/bouwjaar : (0/0)[Units/yr]'
			:'const((0/0)[Units/yr], BO)';
		attribute<Classifications/WarmteOptie> WarmteOptie_rel (BO) := PrevObject/WarmteOptie_rel[PrevObject_rel];

		
		attribute<Classifications/Schillabel>  Startlabel_rel  (BO) := =../isNieuwbouw ? 'const(Classifications/schillabel/V/A, BO)' : 'StartJaar/BebouwingsComponenten/' + BCname + '/BO/SchilLabel_rel';
		
		container Interpolate
		{
			attribute<Classifications/Schillabel>  Defaultlabel_lower (BO) :=
					not(Schillabel_rel == Classifications/schillabel/V/N) ? (0/0)[Classifications/Schillabel] :
						Functioneel/RV/A >= Functioneel/RV/N ? Classifications/schillabel/V/A
					: 	Functioneel/RV/B >= Functioneel/RV/N ? Classifications/schillabel/V/A
					: 	Functioneel/RV/C >= Functioneel/RV/N ? Classifications/schillabel/V/B
					: 	Functioneel/RV/D >= Functioneel/RV/N ? Classifications/schillabel/V/C
					: 	Functioneel/RV/E >= Functioneel/RV/N ? Classifications/schillabel/V/D
					: 	Functioneel/RV/F >= Functioneel/RV/N ? Classifications/schillabel/V/E
					: 	Functioneel/RV/G >= Functioneel/RV/N ? Classifications/schillabel/V/F
					: 	Classifications/schillabel/V/G;
			
			attribute<GJ_yr> RV_upper  (BO) := ='merge(Defaultlabel_new, GJ_yr, '+AsItemList('Functioneel/RV_raw/'+Classifications/Schillabel/name)+')';
			attribute<GJ_yr> RV_lower  (BO) := ='merge(Defaultlabel_lower, GJ_yr, '+AsItemList('Functioneel/RV_raw/'+Classifications/Schillabel/name)+')';
			attribute<GJ_yr> D_total   (BO) := RV_upper - RV_lower;
			
			attribute<ratio> R_upper   (BO) := makedefined(1.0[ratio]-((RV_upper - Functioneel/CurrRV) / D_total), 0.5[ratio]);
			attribute<ratio> R_lower   (BO) := makedefined(1.0[ratio]-((Functioneel/CurrRV - RV_lower) / D_total), 0.5[ratio]);
			attribute<ratio> R_sum     (BO) := R_upper + R_lower;
		}
		
		attribute<Classifications/Schillabel>  Defaultlabel_new (BO) :=
				not(Schillabel_rel == Classifications/schillabel/V/N) ? (0/0)[Classifications/Schillabel] :
					Functioneel/RV/A >= Functioneel/RV/N ? Classifications/schillabel/V/A
				: 	Functioneel/RV/B >= Functioneel/RV/N ? Classifications/schillabel/V/B
				: 	Functioneel/RV/C >= Functioneel/RV/N ? Classifications/schillabel/V/C
				: 	Functioneel/RV/D >= Functioneel/RV/N ? Classifications/schillabel/V/D
				: 	Functioneel/RV/E >= Functioneel/RV/N ? Classifications/schillabel/V/E
				: 	Functioneel/RV/F >= Functioneel/RV/N ? Classifications/schillabel/V/F
				: 	Classifications/schillabel/V/G;
		
		attribute<Classifications/Schillabel>  SchillabelOrDefault_rel (BO) :=
			Schillabel_rel == Classifications/schillabel/V/N ? Defaultlabel_new	: Schillabel_rel;
		
		container Summary
		{
			unit<uint32> label_N := subset(Schillabel_rel == Classifications/schillabel/V/N)
			{			
				attribute<m2>    MeanOpp (ModelObject) := mean(oppervlakte[nr_orgentity], Model_rel[nr_orgentity]);
				attribute<nrAsl> nrAansl (ModelObject) := sum(nrAansluitingen[nr_orgentity], Model_rel[nr_orgentity]);
			}
			unit<uint32> label_G := subset(Schillabel_rel == Classifications/schillabel/V/G)
			{			
				attribute<m2>    MeanOpp (ModelObject) := mean(oppervlakte[nr_orgentity], Model_rel[nr_orgentity]);
				attribute<nrAsl> nrAansl (ModelObject) := sum(nrAansluitingen[nr_orgentity], Model_rel[nr_orgentity]);
			}
			unit<uint32> label_F := subset(Schillabel_rel == Classifications/schillabel/V/F)
			{			
				attribute<m2>    MeanOpp (ModelObject) := mean(oppervlakte[nr_orgentity], Model_rel[nr_orgentity]);
				attribute<nrAsl> nrAansl (ModelObject) := sum(nrAansluitingen[nr_orgentity], Model_rel[nr_orgentity]);
			}
			unit<uint32> label_E := subset(Schillabel_rel == Classifications/schillabel/V/E)
			{			
				attribute<m2>    MeanOpp (ModelObject) := mean(oppervlakte[nr_orgentity], Model_rel[nr_orgentity]);
				attribute<nrAsl> nrAansl (ModelObject) := sum(nrAansluitingen[nr_orgentity], Model_rel[nr_orgentity]);
			}
			unit<uint32> label_D := subset(Schillabel_rel == Classifications/schillabel/V/D)
			{			
				attribute<m2>    MeanOpp (ModelObject) := mean(oppervlakte[nr_orgentity], Model_rel[nr_orgentity]);
				attribute<nrAsl> nrAansl (ModelObject) := sum(nrAansluitingen[nr_orgentity], Model_rel[nr_orgentity]);
			}
			unit<uint32> label_C := subset(Schillabel_rel == Classifications/schillabel/V/C)
			{			
				attribute<m2>    MeanOpp (ModelObject) := mean(oppervlakte[nr_orgentity], Model_rel[nr_orgentity]);
				attribute<nrAsl> nrAansl (ModelObject) := sum(nrAansluitingen[nr_orgentity], Model_rel[nr_orgentity]);
			}
			unit<uint32> label_B := subset(Schillabel_rel == Classifications/schillabel/V/B)
			{			
				attribute<m2>    MeanOpp (ModelObject) := mean(oppervlakte[nr_orgentity], Model_rel[nr_orgentity]);
				attribute<nrAsl> nrAansl (ModelObject) := sum(nrAansluitingen[nr_orgentity], Model_rel[nr_orgentity]);
			}
			unit<uint32> label_A := subset(Schillabel_rel == Classifications/schillabel/V/A)
			{			
				attribute<m2>    MeanOpp (ModelObject) := mean(oppervlakte[nr_orgentity], Model_rel[nr_orgentity]);
				attribute<nrAsl> nrAansl (ModelObject) := sum(nrAansluitingen[nr_orgentity], Model_rel[nr_orgentity]);
			}
			
			container RV
			{
				attribute<GJ_yr> MeanRV_A (ModelObject) := mean(Functioneel/RV/A, Model_rel);
				attribute<GJ_yr> MeanRV_B (ModelObject) := mean(Functioneel/RV/B, Model_rel);
				attribute<GJ_yr> MeanRV_C (ModelObject) := mean(Functioneel/RV/C, Model_rel);
				attribute<GJ_yr> MeanRV_D (ModelObject) := mean(Functioneel/RV/D, Model_rel);
				attribute<GJ_yr> MeanRV_E (ModelObject) := mean(Functioneel/RV/E, Model_rel);
				attribute<GJ_yr> MeanRV_F (ModelObject) := mean(Functioneel/RV/F, Model_rel);
				attribute<GJ_yr> MeanRV_G (ModelObject) := mean(Functioneel/RV/G, Model_rel);
				
				attribute<GJ_yr> Besparing_B (ModelObject) := mean(Functioneel/CurrRV - Functioneel/RV/B, Model_rel);
				attribute<GJ_yr> Besparing_D (ModelObject) := mean(Functioneel/CurrRV - Functioneel/RV/D, Model_rel);
			}
		}
		
		container InstallatiePerProduct := for_each_nedv(Classifications/Product/name
		, 'PrevObject/InstallatiePerProduct/'+Classifications/Product/name+'[PrevObject_rel]'
		, BO
		, Classifications/Installatie
		)
		{
			attribute<Classifications/Installatie> Dak (BO) := const(Classifications/Installatie/V/geen, BO); // for future use
		}

		attribute<Classifications/AfgifteSysteem> AfgifteSysteem_rel (BO) := PrevObject/AfgifteSysteem_rel[PrevObject_rel];
		attribute<AfnameGebied>                   AfnameGebied_rel   (BO) := value(PrevObject/AfnameGebied_rel[PrevObject_rel],Afnamegebied);
		attribute<Classifications/GebouwOptie>    GebouwOptie_rel    (BO) := PrevObject/GebouwOptie_rel[PrevObject_rel]; // REMOVE, OBSOLETE, vervangen door Schillabel_rel, InstallatiePerProduct en GebiedsOptie
		attribute<Geography/rdc_grids/m100>       gridm100_rel       (BO) := point[Geography/rdc_grids/m100];

		attribute<bool> IsMeergezins (.) := BebouwingsTypeDomein/IsMeergezins[BebouwingsType];
		attribute<bool> IsNieuwbouw  (.) := const(../isNieuwBouw,.);
		attribute<bool> IsHoogbouw   (.) := BebouwingsTypeDomein/IsHoogbouw  [BebouwingsType];

		attribute<ratio> ResterendFactorBase := = HasResterendFactors
			? 'MakeDefined(merge(BebouwingsType, ratio, '+AsItemList('ResterendFactorMaps/'+BebouwingsTypeDomein/ResterendFactorName+'[gridm100_rel]')+'), 1.0)'
			: 'const(1.0, BO)';

		attribute<ratio> ResterendFactor := ResterendFactorBase * float64(IsDefined(PlanRegio_rel));
		attribute<nrAsl> nrAansluitingen := ResterendFactor * nrAansluitingen_i;
		attribute<m2>    Oppervlakte     := ResterendFactor * Oppervlakte_i;

		// TODO_OV: Optimaliseer domein voor Niet woningen tbv specifiek BCcDomein
		parameter<string> BCname  := ../BCname;
		attribute<string> BCc (.) :=
			(BCname == 'BestaandeUtil' || BCname == 'NieuwBouwUtil'  ) 
				? 'u' 
				: (BCname == 'BestaandeGLTB' || BCname == 'NieuwBouwGLTB'  ) 
					? 't' 
					: IsMeergezins 
						? 'wh' 
						: 'wl';

		container AansluitCapaciteit
		{
			attribute<kW> RV    (..) := ASW_RVmt;
			attribute<kW> TW    (..) := ASW_TWmt;
			attribute<kW> Warmte(..) := RV + TW;
			attribute<kW> K     (..) := ASW_K;
			attribute<kW> eWP   (..) := max_elem(RV, TW);
			attribute<kW> eZ    (..) := ASW_Eapp;
			attribute<kW> eM    (..) := ASW_Eewp;

			attribute<ratio> GTF_RVmt (..) := switch(case(BCc=='t', Vermogens/GTF_t_RVmt) , case(BCc=='u', Vermogens/GTF_u_RVmt), Vermogens/GTF_w_RVmt) ;
			attribute<ratio> GTF_RVlt (..) := switch(case(BCc=='t', Vermogens/GTF_t_RVlt) , case(BCc=='u', Vermogens/GTF_u_RVlt), Vermogens/GTF_w_RVlt) ;
			attribute<ratio> GTF_TW   (..) := switch(case(BCc=='t', Vermogens/GTF_t_TW  ) , case(BCc=='u', Vermogens/GTF_u_TW  ), Vermogens/GTF_w_TW  ) ;
			attribute<ratio> GTF_K    (..) := switch(case(BCc=='t', Vermogens/GTF_t_K   ) , case(BCc=='u', Vermogens/GTF_u_K   ), Vermogens/GTF_w_K   ) ;
			attribute<ratio> GTF_Enet (..) := switch(case(BCc=='t', Vermogens/GTF_t_Enet) , case(BCc=='u', Vermogens/GTF_u_Enet), Vermogens/GTF_w_Enet) ;

			attribute<kW>    ASW_RVmt (..) := =( BCname == 'BestaandeUtil' || BCname == 'NieuwBouwUtil' ) ? 'Vermogens/ASW_RVmt_u_opp_specific[BebouwingsType] * Oppervlakte' : 'ASW_RVmt_flat';
			attribute<kW>    ASW_RVlt (..) := =( BCname == 'BestaandeUtil' || BCname == 'NieuwBouwUtil' ) ? 'Vermogens/ASW_RVlt_u_opp_specific[BebouwingsType] * Oppervlakte' : 'ASW_RVlt_flat';
			
			attribute<kW>    ASW_RVmt_flat (..) :=  
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_RVmt_t_opp) , case(BCc=='u', Vermogens/ASW_RVmt_u_opp), case(BCc=='wl',Vermogens/ASW_RVmt_wl_opp), Vermogens/ASW_RVmt_wh_opp)
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_RVmt_t_asl) , case(BCc=='u', Vermogens/ASW_RVmt_u_asl), case(BCc=='wl',Vermogens/ASW_RVmt_wl_asl), Vermogens/ASW_RVmt_wh_asl);

			attribute<kW>    ASW_TWmt (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_TWmt_t_opp) , case(BCc=='u', Vermogens/ASW_TWmt_u_opp), case(BCc=='wl',Vermogens/ASW_TWmt_wl_opp), Vermogens/ASW_TWmt_wh_opp)
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_TWmt_t_asl) , case(BCc=='u', Vermogens/ASW_TWmt_u_asl), case(BCc=='wl',Vermogens/ASW_TWmt_wl_asl), Vermogens/ASW_TWmt_wh_asl);

			attribute<kW>    ASW_RVlt_flat (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_RVlt_t_opp) , case(BCc=='u', Vermogens/ASW_RVlt_u_opp), case(BCc=='wl',Vermogens/ASW_RVlt_wl_opp), Vermogens/ASW_RVlt_wh_opp)
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_RVlt_t_asl) , case(BCc=='u', Vermogens/ASW_RVlt_u_asl), case(BCc=='wl',Vermogens/ASW_RVlt_wl_asl), Vermogens/ASW_RVlt_wh_asl);

			attribute<kW>    ASW_TWlt (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_TWlt_t_opp) , case(BCc=='u', Vermogens/ASW_TWlt_u_opp), case(BCc=='wl',Vermogens/ASW_TWlt_wl_opp), Vermogens/ASW_TWlt_wh_opp)
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_TWlt_t_asl) , case(BCc=='u', Vermogens/ASW_TWlt_u_asl), case(BCc=='wl',Vermogens/ASW_TWlt_wl_asl), Vermogens/ASW_TWlt_wh_asl);

			attribute<kW>    ASW_K    (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_K_t_opp)    , case(BCc=='u', Vermogens/ASW_K_u_opp),    case(BCc=='wl',Vermogens/ASW_K_wl_opp),    Vermogens/ASW_K_wh_opp)
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_K_t_asl)    , case(BCc=='u', Vermogens/ASW_K_u_asl),    case(BCc=='wl',Vermogens/ASW_K_wl_asl),    Vermogens/ASW_K_wh_asl);

			attribute<kW>    ASW_Eapp (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_Eapp_t_opp) , case(BCc=='u', Vermogens/ASW_Eapp_u_opp), case(BCc=='wl',Vermogens/ASW_Eapp_wl_opp), Vermogens/ASW_Eapp_wh_opp)
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_Eapp_t_asl) , case(BCc=='u', Vermogens/ASW_Eapp_u_asl), case(BCc=='wl',Vermogens/ASW_Eapp_wl_asl), Vermogens/ASW_Eapp_wh_asl);

			attribute<kW>    ASW_Ehwp (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_Ehwp_t_opp) , case(BCc=='u', Vermogens/ASW_Ehwp_u_opp), case(BCc=='wl',Vermogens/ASW_Ehwp_wl_opp), Vermogens/ASW_Ehwp_wh_opp)
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_Ehwp_t_asl) , case(BCc=='u', Vermogens/ASW_Ehwp_u_asl), case(BCc=='wl',Vermogens/ASW_Ehwp_wl_asl), Vermogens/ASW_Ehwp_wh_asl);

			attribute<kW>    ASW_Eewp (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_Eewp_t_opp) , case(BCc=='u', Vermogens/ASW_Eewp_u_opp), case(BCc=='wl',Vermogens/ASW_Eewp_wl_opp), Vermogens/ASW_Eewp_wh_opp)
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_Eewp_t_asl) , case(BCc=='u', Vermogens/ASW_Eewp_u_asl), case(BCc=='wl',Vermogens/ASW_Eewp_wl_asl), Vermogens/ASW_Eewp_wh_asl);
		}

		container Functioneel
		{
			container DragerSpecifiekeOpties := SpecifiekeInstellingen/RuimtelijkeVraag/Drager;

			attribute<ratio> Klimaateffect (..) := KlimaatFactorMap[gridm100_rel];

			attribute<GJ_yr> TW(..) := (nrAansluitingen * ModelObject/V_TW_asl [Model_rel] + Oppervlakte * ModelObject/V_TW_opp [Model_rel]) * DragerSpecifiekeOpties/TapWater;
			attribute<GJ_yr> K (..) := =
				 '('
					+ (all(ModelObject/V_K_asl == 0[GJ_yr_asl]) 
						? ''
						: 'NrAansluitingen * ModelObject/V_K_asl[Model_rel] +')
					+ 'Oppervlakte * ModelObject/V_K_opp[Model_rel] '
				+ ') 
				* DragerSpecifiekeOpties/Koude * ( 1.0 + 3.66 *(1.0 - Klimaateffect))';

			attribute<GJ_yr> EA(..) := (nrAansluitingen * ModelObject/V_EA_asl [Model_rel] + Oppervlakte * ModelObject/V_EA_opp [Model_rel]) * DragerSpecifiekeOpties/ElektrischeApparatuur;

			// TODO_OV, OPTIMIZE, V_RV_asl/@SL@ alleen meenemen indien niet allemaal 0, zoals bij utiliteiten wel het geval is
			container RV_raw := for_each_nedv(Classifications/Schillabel/name
			 , replace(
				'(nrAansluitingen * ModelObject/V_RV_asl/@SL@[Model_rel] + Oppervlakte * ModelObject/V_RV_opp/@SL@[Model_rel])'
					'* DragerSpecifiekeOpties/RuimteVerwarming'
					'* Klimaateffect'
				,'@SL@', Classifications/Schillabel/name)
			 ,..
			 , GJ_yr
			);
			
			container RV := RV_raw
			{			
				attribute<GJ_yr> A (...) := not(Startlabel_rel == Classifications/Schillabel/V/N) && Startlabel_rel > Classifications/Schillabel/V/A ? min_elem(StartlabelRV, RV_raw/A) : RV_raw/A;
				attribute<GJ_yr> B (...) := not(Startlabel_rel == Classifications/Schillabel/V/N) && Startlabel_rel > Classifications/Schillabel/V/B ? min_elem(StartlabelRV, RV_raw/B) : RV_raw/B;
				attribute<GJ_yr> C (...) := not(Startlabel_rel == Classifications/Schillabel/V/N) && Startlabel_rel > Classifications/Schillabel/V/C ? min_elem(StartlabelRV, RV_raw/C) : RV_raw/C;
				attribute<GJ_yr> D (...) := not(Startlabel_rel == Classifications/Schillabel/V/N) && Startlabel_rel > Classifications/Schillabel/V/D ? min_elem(StartlabelRV, RV_raw/D) : RV_raw/D;
				attribute<GJ_yr> E (...) := not(Startlabel_rel == Classifications/Schillabel/V/N) && Startlabel_rel > Classifications/Schillabel/V/E ? min_elem(StartlabelRV, RV_raw/E) : RV_raw/E;
				attribute<GJ_yr> F (...) := not(Startlabel_rel == Classifications/Schillabel/V/N) && Startlabel_rel > Classifications/Schillabel/V/F ? min_elem(StartlabelRV, RV_raw/F) : RV_raw/F;
				attribute<GJ_yr> G (...) := not(Startlabel_rel == Classifications/Schillabel/V/N) && Startlabel_rel > Classifications/Schillabel/V/G ? min_elem(StartlabelRV, RV_raw/G) : RV_raw/G;
			}

			attribute<GJ_yr> CurrRV       (..) := ='merge(Schillabel_rel, GJ_yr, '+AsItemList('RV_raw/'+Classifications/Schillabel/name)+')';	
			attribute<GJ_yr> StartlabelRV (..) := ='merge(Startlabel_rel, GJ_yr, '+AsItemList('RV_raw/'+Classifications/Schillabel/name)+')';
			attribute<GJ_yr> Ventilatie   (..) := =
				'('
					+ (all(ModelObject/V_Vent_asl == 0[GJ_yr_asl]) ? '' : 'NrAansluitingen * ModelObject/V_Vent_asl + ')
					+ 'Oppervlakte * ModelObject/V_Vent_opp[Model_rel]'
				+ ') 
				* DragerSpecifiekeOpties/ElektrischeApparatuur'
				;
		}
	}

	//============== Voorwaarden voor het wel of niet toepassen van een gebouwoptie. Welke geldt is opgegeven in de runinstellingen per Rekenstap.
	container Criteria := BO/Criteria
	{
		//"always" : Wordt altijd toegepast indien technisch mogelijk
		attribute<bool> always (BO) := const(true,  BO);

		//"never" : Wordt nooit toegepast en er worden geen berekeningen voor deze optie gedaan
		attribute<bool> never  (BO) := const(false, BO);

		//"gebied" : Wordt niet op gebouwniveau toegepast maar kan wel in werking gaan bij toekenning van een gebiedsoptie
		attribute<bool> gebied (BO) := never;

		//"WP_na_gebied" : Wordt niet bij initiele Rekenstappen op gebouwniveau toegekend maar kan toegekend worden aanvullend op een gebiedsoptie
		attribute<bool> WP_na_gebied (BO) := never;

		//"Alloc" : Wordt alleen toegepast bij kandidaten die al deelnemer zijn in een gebiedsoptie
		attribute<bool> Alloc  (BO) := Classifications/WarmteOptie/isGebiedsOptie[BO/WarmteOptie_rel];

		//"NoAlloc" : Wordt alleen toegepast bij kandidaten die geen deelnemer zijn in een gebiedsoptie
		attribute<bool> NoAlloc(BO) := not(Alloc);

		//"S1isS1a" : Wordt toegepast als ingevoerde Startanalyse-runs tonen dat in deze buurt luchtwarmtepompen gunstiger zijn dan bodemwarmtepompen
		attribute<bool> S1isS1a(BO) := NoAlloc && Invoer/RuimtelijkeData/leidraad_oktober_2019/buurt/S1_variant_keuze_code[BO/Planregio_rel] == 0d; //s1 == 's1a';

		//"S1isS1b" : Wordt toegepast als ingevoerde Startanalyse-runs tonen dat in deze buurt bodemwarmtepompen gunstiger zijn dan luchtwarmtepompen
		attribute<bool> S1isS1b(BO) := NoAlloc && Invoer/RuimtelijkeData/leidraad_oktober_2019/buurt/S1_variant_keuze_code[BO/Planregio_rel] == 1d; //s1 == 's1b';

		//"isUtilGroot" : Wordt alleen toegepast bij kandidaten met een capaciteitsvraag voor verwarming van meer dan 100 kilowatt
		attribute<bool> isUtilGroot(BO) := BO/AansluitCapaciteit/RV >= 100 kW;

		//"isUtilKlein" : Wordt alleen toegepast bij kandidaten met een capaciteitsvraag voor verwarming van meer dan 100 kilowatt
		attribute<bool> isUtilKlein(BO) := not(isUtilGroot);

		//"S1isS1b_uG" : Wordt toegepast als ingevoerde Startanalyse-runs tonen dat in deze buurt bodemwarmtepompen gunstiger zijn dan luchtwarmtepompen en ook alleen bij kandidaten met een capaciteitsvraag voor verwarming van meer dan 100 kilowatt
		attribute<bool> S1isS1b_uG (BO) := S1isS1b && isUtilGroot;

		//"S1isS1b_uK" : Wordt toegepast als ingevoerde Startanalyse-runs tonen dat in deze buurt bodemwarmtepompen gunstiger zijn dan luchtwarmtepompen en ook alleen bij kandidaten met een capaciteitsvraag voor verwarming van meer dan 100 kilowatt
		attribute<bool> S1isS1b_uK (BO) := S1isS1b && isUtilKlein;
	}

	container EIA_Opties := ='SpecifiekeInstellingen/Beleid/EIA/E_'+NcwRefBase;

	container VerbruiksOpties 
	{
		unit<uint8> SchilSprong_set := subset(SchilSprong_sel)
		{
			attribute<Classifications/SchilSprong>     SchilSprong_rel     := nr_OrgEntity;
			attribute<string>                          name                := Classifications/SchilSprong/name[SchilSprong_rel];
			attribute<Classifications/Schillabel>      Naar_rel            := Classifications/SchilSprong/Naar_rel[SchilSprong_rel];
			attribute<Classifications/SchilSprongCode> SchilSprongCode_rel := Classifications/SchilSprong/SchilSprongCode_rel[SchilSprong_rel];

			attribute<string> LeerCurveName := Classifications/Schillabel/LeerCurveName[Naar_rel];

			unit<uint32> xMO := combine(., ModelObject)
			{
				attribute<Eur_asl> Ki_asl := =#.=0?'const(0[Eur_asl],.)':'union_data(.,'+AsItemList(replace('(ModelObject/Ki_min_asl/@SS@ * Schuiven/KostenMin + ModelObject/Ki_max_asl/@SS@ * Schuiven/KostenMax) * Leercurves/'+LeerCurveName+'/Curve', '@SS@', name))+')';
				attribute<Eur_m2 > Ki_opp := =#.=0?'const(0[Eur_m2 ],.)':'union_data(.,'+AsItemList(replace('(ModelObject/Ki_min_opp/@SS@ * Schuiven/KostenMin + ModelObject/Ki_max_opp/@SS@ * Schuiven/KostenMax) * Leercurves/'+LeerCurveName+'/Curve', '@SS@', name))+')';
			}
		}

		unit<uint8> SchilSprongOrIdle_set := union_unit_uint8(Classifications/Schillabel, SchilSprong_set) 
		{
			attribute<Classifications/Schillabel> Van_rel  := union_data(., id(Classifications/Schillabel), Classifications/SchilSprong/Van_rel [SchilSprong_set/nr_OrgEntity]);
			attribute<Classifications/Schillabel> Naar_rel := union_data(., id(Classifications/Schillabel), Classifications/SchilSprong/Naar_rel[SchilSprong_set/nr_OrgEntity]);

			attribute<string> name := union_data(., 'S'+repeat(Classifications/Schillabel/name,2), SchilSprong_set/name);

			unit<uint32> xMO := combine(., ModelObject) 
			{
				attribute<Eur_asl> Ki_asl := ='union_data(., ' + AsItemList(const('const(0[Eur_asl], ModelObject)', Classifications/Schillabel))+', SchilSprong_set/xMO/Ki_asl)';
				attribute<Eur_m2 > Ki_opp := ='union_data(., ' + AsItemList(const('const(0[Eur_m2 ], ModelObject)', Classifications/Schillabel))+', SchilSprong_set/xMO/Ki_opp)';
			}
		}

		parameter<string> BcCode := Classifications/BebouwingsComponent/BcCode[BC_rel];

		unit<uint32> Installatie := Classifications/Installatie
		{
			// TODO_OV, MTA: remove const in merge wanneer void domain hier zal worden toegestaan, issue XXX.
			attribute<Eur_asl>   Ki_asl := =replace('(Ki_asl_min_@BC * Schuiven/KostenMin + Ki_asl_max_@BC * Schuiven/KostenMax)* merge(LeerCurve_rel, float64, '+AsItemList('const(LeerCurves/'+Classifications/LeerCurves/name+'/Curve, .)')+')', '@BC', BcCode);
			attribute<Eur_kW>    Ki_cap := =replace('(Ki_cap_min_@BC * Schuiven/KostenMin + Ki_cap_max_@BC * Schuiven/KostenMax)* merge(LeerCurve_rel, float64, '+AsItemList('const(LeerCurves/'+Classifications/LeerCurves/name+'/Curve, .)')+')', '@BC', BcCode);
			attribute<Eur_m2>    Ki_opp := =replace('(Ki_opp_min_@BC * Schuiven/KostenMin + Ki_opp_max_@BC * Schuiven/KostenMax)* merge(LeerCurve_rel, float64, '+AsItemList('const(LeerCurves/'+Classifications/LeerCurves/name+'/Curve, .)')+')', '@BC', BcCode);

			attribute<Eur_kW>    Ki30_cap   := Ki_cap * AT30;
			attribute<Eur_kW>    Ki20_cap   := Ki_cap * AT20;
			attribute<Eur_kW>    Ki15_cap   := Ki_cap * AT15;
			attribute<Eur_yr_kW> Kj_OH_cap  := Ki_cap * R_OH;
			attribute<Eur_yr_kW> Kj_Adm_cap := Ki_cap * R_Adm;
		}
		
		unit<uint8> GebouwOptie := Classifications/GebouwOptie
		{
			attribute<Eur_asl> Ki_asl := sum(Installatie/Ki_asl[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_m2 > Ki_opp := sum(Installatie/Ki_opp[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);

			attribute<Eur_yr_asl> Kj_Adm_asl := sum((Installatie/Ki_asl * Installatie/R_Adm)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_yr_asl> Kj_OH_asl  := sum((Installatie/Ki_asl * Installatie/R_OH )[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_yr_m2 > Kj_Adm_opp := sum((Installatie/Ki_opp * Installatie/R_Adm)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_yr_m2 > Kj_OH_opp  := sum((Installatie/Ki_opp * Installatie/R_OH )[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);

			attribute<Eur_asl> Ki30_asl := sum((Installatie/Ki_asl * Installatie/AT30)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_asl> Ki20_asl := sum((Installatie/Ki_asl * Installatie/AT20)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_asl> Ki15_asl := sum((Installatie/Ki_asl * Installatie/AT15)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);

			attribute<Eur_m2 > Ki30_opp := sum((Installatie/Ki_opp * Installatie/AT30)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_m2 > Ki20_opp := sum((Installatie/Ki_opp * Installatie/AT20)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_m2 > Ki15_opp := sum((Installatie/Ki_opp * Installatie/AT15)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
		}
	}
	
	container Doellabels := for_each_ne(Classifications/Doellabel_NaSprong/name, 'DoellabelT(BO, Classifications/Doellabel_NaSprong/V/'+Classifications/Doellabel_NaSprong/name+')') 
	{
		container geen  // handle as special case
		{
			attribute<Eur> Ki_GV (BO) := const(0[Eur], BO);
		}
	}

	attribute<string> GebouwOptie_sel_Expr (Classifications/GebouwOptie) := 'LowerCase(LocatieSpecifiekeOpties/GebouwOpties/'+Classifications/GebouwOptie/name+') != ' + Quote('criteria/never');
	attribute<bool>   GebouwOptie_sel      (Classifications/GebouwOptie) := ='union_data(Classifications/GebouwOptie, '+AsItemList(GebouwOptie_sel_Expr)+')';
	
	unit<uint8> BcGebouwOptie := subset(GebouwOptie_sel) 
	{
		attribute<string> name           := Classifications/GebouwOptie/name[nr_OrgEntity];
		attribute<string> label          := name, DialogType = "labelText";
		attribute<string> Criterium_expr := ='replace_value(LowerCase(union_data(., '+AsItemList('LocatieSpecifiekeOpties/GebouwOpties/'+name)+')), ''criteria/always'', '''')';
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}

	container GebouwOpties := for_each_ne(BcGebouwOptie/name, 'GebouwOptieT(BO, Classifications/GebouwOptie/V/'+BcGebouwOptie/name+', '+Quote(BcGebouwOptie/Criterium_expr)+')');
	
	unit<uint32> BebouwingsObjectMetGebouwOptie := BO
	{
		unit<uint8>              BcGebouwOptie   := BebouwingsComponent_UpRef/BcGebouwOptie;
		attribute<BcGebouwOptie> GebouwOptie_rel := =(#BcGebouwOptie == 1)? 'const(0[BcGebouwOptie],BO)' : 'argmin('+AsItemList('GebouwOpties/'+BcGebouwOptie/name+'/kosten_or_undefined')+')[BcGebouwOptie]';

		attribute<Classifications/WarmteOptie> WarmteOptie_rel := Classifications/WarmteOptie/IsGebiedsOptie[BO/WarmteOptie_rel]
			? BO/WarmteOptie_rel
			: Classifications/GebouwOptie/WarmteOptie_rel[BcGebouwOptie/nr_OrgEntity[GebouwOptie_rel]];

		attribute<Classifications/Schillabel> Schillabel_rel := ='merge(GebouwOptie_rel, Classifications/Schillabel, '+AsItemList('GebouwOpties/'+BcGebouwOptie/name+'/Schillabel_rel')+')';

		container InstallatiePerProduct := for_each_nedv(Classifications/Product/name
			, replace('merge(GebouwOptie_rel, Classifications/Installatie, '+AsItemList('GebouwOpties/'+BcGebouwOptie/name+'/InstallatiePerProduct/@P')+')', '@P', Classifications/Product/name)
			,.
			, Classifications/Installatie
			);

		attribute<Classifications/AfgifteSysteem> AfgifteSysteem_rel (BO) := ='merge(GebouwOptie_rel, Classifications/AfgifteSysteem, '+AsItemList('GebouwOpties/'+BcGebouwOptie/name+'/AfgifteSysteem_rel')+')';

		// Extra info
		attribute<string> WarmteOptie (BO) := Classifications/WarmteOptie/name[WarmteOptie_rel];
	}

//REMOVE, dit wordt bepaald in StateNaAllocatie	container Kapitaallasten := results/Kapitaallasten;

	container BC_kentallen := kengetallen/BCkentallen/BC_kentallen(
		Schuiven/EfficiencySchuif,
		LeerCurves/eWPlw/Curve,
		LeerCurves/eWPww/Curve,
		LeerCurves/hWP/Curve,
		LeerCurves/ZonPV/Curve,
		LeerCurves/ZonB/Curve,
		LeerCurves/mWKK/Curve,
		LeerCurves/LTAS/Curve,
		Schuiven/KostenMin,
		Schuiven/KostenMax,
		BCname,
		BebouwingsTypeDomein);

	// voor info over gebruik hWP etc voor RW gelieve de resulterende InstallatiePerProduct te raadplegen

	container Functioneel2
	{
		attribute<GJ_yr> V_RV     (BO) := ='merge(BebouwingsObjectMetGebouwOptie/GebouwOptie_rel, GJ_yr, '+AsItemList('GebouwOpties/'+BcGebouwOptie/name+'/Functioneel/RV')+')';
		attribute<GJ_yr> V_TW     (BO) := ='merge(BebouwingsObjectMetGebouwOptie/GebouwOptie_rel, GJ_yr, '+AsItemList('GebouwOpties/'+BcGebouwOptie/name+'/Functioneel/TW')+')';
		attribute<GJ_yr> V_Warmte (BO) :=  V_RV + V_TW;
	}
	container Opbrengsten
	{
		attribute<float64> AansluitTarief (BO) :=
			  (VraagKentallenComponent/Opbrengsten/AansluitTarief_min[BO/BebouwingsType] * Schuiven/OpbrMin
			+  VraagKentallenComponent/Opbrengsten/AansluitTarief_max[BO/BebouwingsType] * Schuiven/OpbrMax);

		parameter<Eur_yr_asl> VastRechtMT :=
			( VraagKentallenComponent/Opbrengsten/VastRechtMT_Min * Schuiven/OpbrMin 
			+ VraagKentallenComponent/Opbrengsten/VastRechtMT_Max * Schuiven/OpbrMax);

		parameter<Eur_yr_asl> VastRechtLT :=
			( VraagKentallenComponent/Opbrengsten/VastRechtLT_Min * Schuiven/OpbrMin 
			+ VraagKentallenComponent/Opbrengsten/VastRechtLT_Max * Schuiven/OpbrMax);

		parameter<Eur_yr_asl> VastRechtK  :=
			( VraagKentallenComponent/Opbrengsten/VastRechtK_Min  * Schuiven/OpbrMin 
			+ VraagKentallenComponent/Opbrengsten/VastRechtK_Max  * Schuiven/OpbrMax);

		attribute<Eur>    AansluitBijdrageG  (BO) := =
			BO/BCname == 'NieuwbouwWoning' ? 'BO/nrAansluitingen * Kengetallen/Infra/AansluitTarief_nw_g' :
			BO/BCname == 'BestaandeWoning' ? 'BO/nrAansluitingen * Kengetallen/Infra/AansluitTarief_bw_g' :
			BO/BCname == 'NieuwbouwUtil'   ? 'BO/oppervlakte     * Kengetallen/Infra/AansluitTarief_nu_g' :
			BO/BCname == 'BestaandeUtil'   ? 'BO/oppervlakte     * Kengetallen/Infra/AansluitTarief_bu_g' : 'const(0[Eur],BO)'
			, Descr = "Aansluitbijdrage voor nieuwe aansluiting op het gasnet";
			
		attribute<Eur>    AansluitBijdrageE  (BO) := =
			BO/BCname == 'NieuwbouwWoning' ? 'BO/nrAansluitingen * Kengetallen/Infra/AansluitTarief_nw_e' :
			BO/BCname == 'BestaandeWoning' ? 'BO/nrAansluitingen * Kengetallen/Infra/AansluitTarief_bw_e' :
			BO/BCname == 'NieuwbouwUtil'   ? 'BO/oppervlakte     * Kengetallen/Infra/AansluitTarief_nu_e' :
			BO/BCname == 'BestaandeUtil'   ? 'BO/oppervlakte     * Kengetallen/Infra/AansluitTarief_bu_e' : 'const(0[Eur],BO)'
			, Descr = "Aansluitbijdrage voor nieuwe aansluiting op het elektriciteitsnetnet";
			
		attribute<Eur>    AansluitBijdrageT  (BO) := BO/nrAansluitingen * AansluitTarief                       , Descr = "Aansluitbijdrage voor nieuwe aansluiting op warmtenetten, niet gecorrigeerd voor deelname";

		attribute<Eur_yr> VastRechtBijdrageG (BO) := BO/nrAansluitingen * Kengetallen/Infra/jaarlijksVast_g    , Descr = "VastRechtBijdrage voor aansluiting op het gasnet";
		attribute<Eur_yr> VastRechtBijdrageE (BO) := BO/nrAansluitingen * Kengetallen/Infra/jaarlijksVast_e    , Descr = "VastRechtBijdrage voor aansluiting op het elektriciteitsnetnet";
		attribute<Eur_yr> VastRechtMT_T      (BO) := BO/nrAansluitingen * VastRechtMT                          , Descr = "VastRechtBijdrage voor aansluiting op warmtenetten, niet gecorrigeerd voor deelname";
		attribute<Eur_yr> VastRechtLT_T      (BO) := BO/nrAansluitingen * VastRechtLT                          , Descr = "VastRechtBijdrage voor aansluiting op warmtenetten, niet gecorrigeerd voor deelname";
		attribute<Eur_yr> VastRechtK_T       (BO) := BO/nrAansluitingen * VastRechtK                           , Descr = "VastRechtBijdrage voor aansluiting op warmtenetten, niet gecorrigeerd voor deelname";

		attribute<Eur_yr> HeffingskortingE   (BO) := BO/nrAansluitingen * SpecifiekeInstellingen/Beleid/Heffingskorting;
	}

	unit<uint32> Results := BebouwingsObjectMetGebouwOptie
	{
		unit<uint8> BcGebouwOptie := BebouwingsComponent_UpRef/BcGebouwOptie;
		container GebouwOpties  := BebouwingsComponent_UpRef/GebouwOpties;
		container BC_kentallen  := BebouwingsComponent_UpRef/BC_kentallen;
		container Functioneel   := BebouwingsComponent_UpRef/BO/Functioneel;
		
		container OrgKapitaallasten := = ../IsNieuwbouw ? 'Union/result/Kapitaallasten' : 'PrevObject/Kapitaallasten';
		
		container Warmtewet := Functioneel2
		{
			attribute<GJ_yr> V_gas (BO) := ='merge(GebouwOptie_rel, GJ_yr, '+AsItemList('GebouwOpties/'+BcGebouwOptie/name+'/Metervraag/gas')+')';

			unit<uint32> GasVerbruikers := subset(V_Gas > 0.0[gj_yr])
			{
				attribute<GJ_yr> V_gas    := ../V_gas[nr_OrgEntity];
				attribute<GJ_yr> V_warmte := V_RV[nr_OrgEntity] + V_TW[nr_OrgEntity];
				//TODO_OV bij V_warmte aftrek eventuele installaties die al een deel van de vraag vullen binnen deze groep (bijv Zonneboilers, future use)
			}
			parameter<float64> PrijsFactor_impl :=  sum(GasVerbruikers/V_gas) / sum(GasVerbruikers/V_warmte) * VoorkEuren/MinderDanAndersFactor;
			parameter<float64> PrijsFactor_corr :=  MakeDefined(PrijsFactor_impl, 1.25);
			parameter<float64> PrijsFactor      :=  = Classifications/BebouwingsComponent/name[Classifications/BebouwingsComponent/Warmtewet_BC_rel[BC_rel]]+'/results/Warmtewet/PrijsFactor_corr';

			parameter<Eur_GJ> WarmtePrijs := = VoorkEuren/IsVasteWarmtePrijs 
				? 'VoorkEuren/VasteWarmtePrijs'
				: 'PrijsFactor * PrijzenAardgas/KGJ_eindgebruik_excl[classify(0[GJ_yr], PrijzenAardgas/ClassBreak)]';
		}
	}
}
