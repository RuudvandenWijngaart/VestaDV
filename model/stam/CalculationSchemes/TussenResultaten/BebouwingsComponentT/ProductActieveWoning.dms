//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2021 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//           Dit is de container met rekenschema's die werken op Bebouwing              //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//====== Berekeningen voor woningen die actief zijn op minimaal één functioneel product =====
unit<uint32> ProductActieveWoning := select_with_org_rel(PGBO/ProductActief)
{		
	attribute<BO> BO_rel := collect_by_cond(ProductActieveWoning, IsInDezeProcesGroep && BO/Activatie/ProductActief, ID(BO)), ishidden = "True";
	attribute<rdc_meter> Geometry := collect_by_cond(ProductActieveWoning, PGBO/Geometry), ishidden = "True";
	
//	attribute<ProductActieveWoning> per_BO(BO) := invert(BO_rel), ishidden = "True";
	
	//====== Indeling van gebouwopties in categorieën: ketelopties (vaak gas), all-electric opties, en hybride opties =====
	unit<uint8> OptiesHere := select_with_org_rel(IsDefined(classifications/gebouwoptie/categorie_rel)), ishidden = "True"
	{
		attribute<classifications/gebouwoptie> GebouwOptie_rel := org_rel;
		attribute<Classifications/GebouwOptieCategorie> Categorie_rel := lookup(GebouwOptie_rel, classifications/gebouwoptie/categorie_rel);
		attribute<string> name  := lookup(GebouwOptie_rel, classifications/gebouwoptie/name);
		attribute<string> label := name, DialogType = "LabelText";
		
		attribute<string> Criterium_expr := ='replace_value(LowerCase(union_data(., '+AsItemList('LocatieSpecifiekeOpties/GebouwOpties/'+name)+')), ''criteria/always'', '''')';
		attribute<string> Criterium_Expr2 := 
			  Criterium_expr ==  '' ? 'const(true, xIsolatieAmbitie)'
			: Criterium_expr == 'criteria/never' ? 'const(false, xIsolatieAmbitie)'
			: 'collect_by_cond(ProductActieveWoning, IsInDezeProcesGroep && BO/Activatie/ProductActief, '+Criterium_expr+')[ProductActieveWoning_rel]';
	}
	
	attribute<bool> is_BouwdeelActief     := collect_by_cond(ProductActieveWoning, PGBO/BouwdeelActief), Descr = "Check of ook bouwdelen actief zijn";
	
	//====== Berekeningen voor woningen die actief zijn op minimaal één functioneel product en ook op één of meerdere bouwdelen =====
	unit<uint32> sub_BouwdeelActief   := select_with_org_rel(is_BouwdeelActief)
	{
		attribute<ProductActieveWoning> ProductActieveWoning_rel := org_rel, IsHidden = "True";
		attribute<BO>                   BO_rel                   := ProductActieveWoning_rel->BO_rel, IsHidden = "True";
		
		attribute<BouwdeelActieveWoning> BouwdeelActieveWoning_rel := rlookup(BO_rel, BouwdeelActieveWoning/BO_rel), ishidden = "True";
		
		//===== voor woningen met ook actieve bouwdelen worden de gebouwopties per uniek ambitieniveau (max 5) berekend =====
		attribute<.> per_UA(BouwdeelActieveWoning/UniekAmbitie) := rlookup(BouwdeelActieveWoning/UniekAmbitie/BouwdeelActieveWoning_rel->BO_rel, sub_Bouwdeelactief/BO_rel);
		unit<uint32> xIsolatieAmbitie := select(IsDefined(per_UA))
		{
			attribute<sub_BouwdeelActief> sub_BouwdeelActief_rel := collect_by_cond(xIsolatieAmbitie, per_UA), ishidden = "True";
			attribute<classifications/IsolatieAmbitie> MinIsolatieAmbitie_rel := collect_by_cond(xIsolatieAmbitie, BouwdeelActieveWoning/UniekAmbitie/MinIsolatieAmbitie_rel), ishidden = "True";
			attribute<classifications/IsolatieAmbitie> MaxIsolatieAmbitie_rel := collect_by_cond(xIsolatieAmbitie, BouwdeelActieveWoning/UniekAmbitie/MaxIsolatieAmbitie_rel), ishidden = "True";
			
			attribute<BO> BO_rel := sub_BouwdeelActief_rel->BO_rel, ishidden = "True";
			
			attribute<BouwdeelActieveWoning> BouwdeelActieveWoning_rel := sub_BouwdeelActief_rel->BouwdeelActieveWoning_rel, ishidden = "True";
			attribute<ProductActieveWoning>  ProductActieveWoning_rel  := sub_BouwdeelActief_rel->ProductActieveWoning_rel, ishidden = "True";
			
			attribute<Classifications/SchilLabel> SchilLabel_rel := select_data(xIsolatieAmbitie, BouwdeelActieveWoning/UniekAmbitie/schillabel_rel);
			attribute<Eur   > Ki_gv  := select_data(xIsolatieAmbitie, BouwdeelActieveWoning/UniekAmbitie/Ki_gv );
			attribute<Eur_yr> Kji_gv := select_data(xIsolatieAmbitie, BouwdeelActieveWoning/UniekAmbitie/Kji_gv);
			attribute<Eur_yr> Kmi_gv := select_data(xIsolatieAmbitie, BouwdeelActieveWoning/UniekAmbitie/Kmi_gv);
			
			container Bouwdelen {
				container Isolatie := for_each_nedv(Classifications/Bouwdeel/name
				,	replace('select_data(xIsolatieAmbitie, BouwdeelActieveWoning/UniekAmbitie/Bouwdelen/Isolatie/@BN)', '@BN', Classifications/Bouwdeel/name)
				,	xIsolatieAmbitie, Classifications/IsolatieNiveau
				);
			}
			
			container AansluitCapaciteit
			{
				attribute<kW> RV (xIsolatieAmbitie) := select_data(xIsolatieAmbitie, BouwdeelActieveWoning/UniekAmbitie/AansluitCapaciteit/RV);
				attribute<kW> KD (xIsolatieAmbitie) := select_data(xIsolatieAmbitie, BouwdeelActieveWoning/UniekAmbitie/AansluitCapaciteit/KD);
				attribute<kW> TW (xIsolatieAmbitie) := select_data(xIsolatieAmbitie, BouwdeelActieveWoning/UniekAmbitie/AansluitCapaciteit/TW);
			}
		}
	}
	//====== Berekeningen voor woningen die actief zijn op minimaal één functioneel product waarbij de bouwdelen allen inactief zijn =====
	unit<uint32> sub_BouwdeelInactief := select_with_org_rel(not(is_BouwdeelActief)), IsHidden = "True"
	{
		attribute<ProductActieveWoning> ProductActieveWoning_rel := org_rel;
//		attribute<PGBO>                 PGBO_rel                 := ProductActieveWoning_rel->PGBO_rel;
		attribute<BO>                   BO_rel                   := ProductActieveWoning_rel->BO_rel;
	}
	
	unit<uint32> xIsolatieAmbitie := union_unit(sub_BouwdeelActief/xIsolatieAmbitie, sub_BouwdeelInactief)
	{
		attribute<classifications/IsolatieAmbitie> MinIsolatieAmbitie_rel := union_data(., sub_BouwdeelActief/xIsolatieAmbitie/MinIsolatieAmbitie_rel, const(classifications/IsolatieAmbitie/V/geen, sub_BouwdeelInactief)), ishidden = "True";
		attribute<classifications/IsolatieAmbitie> MaxIsolatieAmbitie_rel := union_data(., sub_BouwdeelActief/xIsolatieAmbitie/MaxIsolatieAmbitie_rel, const(classifications/IsolatieAmbitie/V/geen, sub_BouwdeelInactief)), ishidden = "True";
		
		attribute<BO> BO_rel := union_data(., sub_BouwdeelActief/xIsolatieAmbitie/BO_rel, sub_BouwdeelInactief/BO_rel), ishidden = "True";
		
		attribute<ProductActieveWoning> ProductActieveWoning_rel := union_data(., sub_BouwdeelActief/xIsolatieAmbitie/ProductActieveWoning_rel, sub_BouwdeelInactief/ProductActieveWoning_rel), ishidden = "True";
		
		attribute<Classifications/SchilLabel> SchilLabel_rel := union_data(.
			, sub_BouwdeelActief/xIsolatieAmbitie/SchilLabel_rel
			, collect_by_cond(ProductActieveWoning, IsInDezeProcesGroep && BO/Activatie/ProductActief, BO/SchilLabel_rel)[sub_BouwdeelInactief/ProductActieveWoning_rel]
			);
		attribute<Eur   >               Ki_gv  := union_data(., sub_BouwdeelActief/xIsolatieAmbitie/Ki_gv , const(0[EUR],    sub_BouwdeelInactief));
		attribute<Eur_yr>               Kji_gv := union_data(., sub_BouwdeelActief/xIsolatieAmbitie/Kji_gv, const(0[EUR_yr], sub_BouwdeelInactief));
		attribute<Eur_yr>               Kmi_gv := union_data(., sub_BouwdeelActief/xIsolatieAmbitie/Kmi_gv, const(0[EUR_yr], sub_BouwdeelInactief));
		
		container Bouwdelen {
			container Isolatie := for_each_nedv(Classifications/Bouwdeel/name
			,	replace('union_data(xIsolatieAmbitie'
					', sub_BouwdeelActief/xIsolatieAmbitie/Bouwdelen/Isolatie/@BN'
					', collect_by_cond(ProductActieveWoning, IsInDezeProcesGroep && BO/Activatie/ProductActief, BO/Bouwdelen/Isolatie/@BN)[sub_BouwdeelInactief/ProductActieveWoning_rel])'
				, '@BN', Classifications/Bouwdeel/name)
			,	xIsolatieAmbitie, Classifications/IsolatieNiveau
			);
		}

		container AansluitCapaciteit
		{
			attribute<kW> RV (xIsolatieAmbitie) := union_data(.., sub_BouwdeelActief/xIsolatieAmbitie/AansluitCapaciteit/RV, collect_by_cond(ProductActieveWoning, IsInDezeProcesGroep && BO/Activatie/ProductActief, BO/AansluitCapaciteit/RV)[sub_BouwdeelInactief/ProductActieveWoning_rel]);
			attribute<kW> KD (xIsolatieAmbitie) := union_data(.., sub_BouwdeelActief/xIsolatieAmbitie/AansluitCapaciteit/KD, collect_by_cond(ProductActieveWoning, IsInDezeProcesGroep && BO/Activatie/ProductActief, BO/AansluitCapaciteit/KD)[sub_BouwdeelInactief/ProductActieveWoning_rel]);
			attribute<kW> TW (xIsolatieAmbitie) := union_data(.., sub_BouwdeelActief/xIsolatieAmbitie/AansluitCapaciteit/TW, collect_by_cond(ProductActieveWoning, IsInDezeProcesGroep && BO/Activatie/ProductActief, BO/AansluitCapaciteit/TW)[sub_BouwdeelInactief/ProductActieveWoning_rel]);
		}
		container functioneel := for_each_nedv(
				Classifications/FunctioneleVraag/name,
				replace(
					'union_data(.., '
						'select_data(sub_BouwdeelActief/xIsolatieAmbitie, BouwdeelActieveWoning/UniekAmbitie/functioneel/@PT@), '
						'collect_by_cond(ProductActieveWoning, IsInDezeProcesGroep && BO/Activatie/ProductActief, BO/functioneel/@PT@)[sub_BouwdeelInactief/ProductActieveWoning_rel])'
				, '@PT@', Classifications/FunctioneleVraag/name ),
				xIsolatieAmbitie,
				GJ_yr);
		
		unit<uint32> Optie_xIsolatieAmbitie := combine_unit(OptiesHere, xIsolatieAmbitie), ishidden = "True"
		{
			attribute<bool> Criterium := ='union_data(Optie_xIsolatieAmbitie, '+AsItemList(OptiesHere/Criterium_Expr2)+')';
		}
		
		unit<uint32> PAW_xInvesteringsOptie := combine(xIsolatieAmbitie, Classifications/GebouwOptieCategorie)
		{
//			attribute<BO>                                   BO_rel                   := xIsolatieAmbitie/BO_rel[xIsolatieAmbitie_rel], ishidden = "True";
			attribute<xIsolatieAmbitie>                     xIsolatieAmbitie_rel     := first_rel, ishidden = "True";
			attribute<Classifications/GebouwOptieCategorie> GebouwOptieCategorie_rel := second_rel, ishidden = "True";
			
			attribute<ProductActieveWoning>                 ProductActieveWoning_rel := xIsolatieAmbitie_rel->ProductActieveWoning_rel, ishidden = "True"; //[xIsolatieAmbitie_rel];
			attribute<Classifications/IsolatieAmbitie>      MinIsolatieAmbitie_rel   := xIsolatieAmbitie_rel->MinIsolatieAmbitie_rel, ishidden = "True";
			attribute<Classifications/IsolatieAmbitie>      MaxIsolatieAmbitie_rel   := xIsolatieAmbitie_rel->MaxIsolatieAmbitie_rel, ishidden = "True";
			
			attribute<Classifications/InvesteringsOptie>    MinInvesteringsOptie_rel    := combine_data(Classifications/InvesteringsOptie, GebouwOptieCategorie_rel, MinIsolatieAmbitie_rel), ishidden = "True";
			attribute<Classifications/InvesteringsOptie>    MaxInvesteringsOptie_rel    := combine_data(Classifications/InvesteringsOptie, GebouwOptieCategorie_rel, MaxIsolatieAmbitie_rel), ishidden = "True";
			
			container Bouwdelen {
				container Isolatie := for_each_nedv(Classifications/Bouwdeel/name
				,	replace('xIsolatieAmbitie/Bouwdelen/Isolatie/@BN[xIsolatieAmbitie_rel]', '@BN', Classifications/Bouwdeel/name)
				,	PAW_xInvesteringsOptie, Classifications/IsolatieNiveau
				);
			}
			container AansluitCapaciteit
			{
				attribute<kW> RV (PAW_xInvesteringsOptie) := xIsolatieAmbitie/AansluitCapaciteit/RV[xIsolatieAmbitie_rel];
				attribute<kW> KD (PAW_xInvesteringsOptie) := xIsolatieAmbitie/AansluitCapaciteit/KD[xIsolatieAmbitie_rel];
				attribute<kW> TW (PAW_xInvesteringsOptie) := xIsolatieAmbitie/AansluitCapaciteit/TW[xIsolatieAmbitie_rel];
			}
		}
		
		// TODO OPTIMIZE: consider gebruik Optie_xIsolatieAmbitie zonder transponeren in fast mode
		unit<uint32> xGebouwOptie := combine(xIsolatieAmbitie, OptiesHere), LazyCalculated = "True"
		{
			attribute<xIsolatieAmbitie>  xIsolatieAmbitie_rel := first_rel, ishidden = "True";
			attribute<OptiesHere>        OptiesHere_rel       := second_rel, ishidden = "True";
			
			attribute<BO>                                    BO_rel                 := xIsolatieAmbitie_rel->BO_rel, ishidden = "True";
			attribute<Classifications/GebouwOptie>           GebouwOptie_rel        := OptiesHere_rel->GebouwOptie_rel;
			attribute<Classifications/GebouwOptieCategorie>  Categorie_rel          := OptiesHere_rel->Categorie_rel  ;
			attribute<Classifications/IsolatieAmbitie>       MinIsolatieAmbitie_rel := xIsolatieAmbitie_rel->MinIsolatieAmbitie_rel, ishidden = "True";
			attribute<Classifications/IsolatieAmbitie>       MaxIsolatieAmbitie_rel := xIsolatieAmbitie_rel->MaxIsolatieAmbitie_rel, ishidden = "True";
			attribute<PAW_xInvesteringsOptie> PAW_xInvesteringsOptie_rel := combine_data(PAW_xInvesteringsOptie, xIsolatieAmbitie_rel, Categorie_rel), ishidden = "True";
			
			attribute<Optie_xIsolatieAmbitie> Optie_xIsolatieAmbitie_rel := combine_data(Optie_xIsolatieAmbitie, OptiesHere_rel, xIsolatieAmbitie_rel), ishidden = "True";
			
			attribute<bool> Criterium := Optie_xIsolatieAmbitie/Criterium[Optie_xIsolatieAmbitie_rel], ishidden = "True";
			
			attribute<Classifications/SchilLabel>  Schillabel_rel := xIsolatieAmbitie/Schillabel_rel[xIsolatieAmbitie_rel];
			
			container Bouwdelen {
				container Isolatie := for_each_nedv(Classifications/Bouwdeel/name
				,	replace('xIsolatieAmbitie/Bouwdelen/Isolatie/@BN[xIsolatieAmbitie_rel]', '@BN', Classifications/Bouwdeel/name)
				,	xGebouwOptie, Classifications/IsolatieNiveau
				);
			}
			container AansluitCapaciteit
			{
				attribute<kW> RV (xGebouwOptie) := xIsolatieAmbitie/AansluitCapaciteit/RV[xIsolatieAmbitie_rel];
				attribute<kW> KD (xGebouwOptie) := xIsolatieAmbitie/AansluitCapaciteit/KD[xIsolatieAmbitie_rel];
				attribute<kW> TW (xGebouwOptie) := xIsolatieAmbitie/AansluitCapaciteit/TW[xIsolatieAmbitie_rel];
			}
			container functioneel := for_each_nedv(
				Classifications/FunctioneleVraag/name,
				replace(
					'xIsolatieAmbitie/functioneel/@PT@[xIsolatieAmbitie_rel]'
				,	'@PT@', Classifications/FunctioneleVraag/name ),
				xGebouwOptie,
				GJ_yr);
			attribute<EUR>    Ki_gv  := xIsolatieAmbitie/Ki_gv[xIsolatieAmbitie_rel];
			attribute<EUR_yr> Kji_gv := xIsolatieAmbitie/Kji_gv[xIsolatieAmbitie_rel];
			attribute<EUR_yr> Kmi_gv := xIsolatieAmbitie/Kmi_gv[xIsolatieAmbitie_rel];
		}
	}	
}
