//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2021 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//           Dit is de container met rekenschema's die werken op Bebouwing              //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//====== Berekeningen voor woningen die actief zijn op minimaal ??n functioneel product =====
unit<uint32> ActieveWoning := select_with_org_rel(PGBO/ProductActief || PGBO/BouwdeelActief)
{			
	attribute<PGBO> PGBO_rel := collect_by_cond(ActieveWoning, PGBO/ProductActief || PGBO/BouwdeelActief, ID(PGBO)), ishidden = "True";
	attribute<BO> BO_rel := collect_by_cond(ActieveWoning, IsInDezeProcesGroep && (BO/Activatie/ProductActief || BO/Activatie/BouwdeelActief), ID(BO)), ishidden = "True";
	attribute<rdc_meter> Geometry := collect_by_cond(ActieveWoning, PGBO/Geometry), ishidden = "True";
	attribute<ActieveWoning> per_PGBO(PGBO) := invert(PGBO_rel), ishidden = "True";
	
	unit<uint32> xInvesteringsOptie := union_unit(ProductActieveWoning/xIsolatieAmbitie/PAW_xInvesteringsOptie, BouwdeelActieveWoning/ProductInactieveAmbitie)
	{
		parameter<string> constr_expr2 := 'union_data(xInvesteringsOptie, ProductActieveWoning/xIsolatieAmbitie/PAW_xInvesteringsOptie/@A, BouwdeelActieveWoning/ProductInactieveAmbitie/@A)';
		
		attribute<BO> BO_rel := union_data(xInvesteringsOptie
			, ProductActieveWoning/xIsolatieAmbitie/PAW_xInvesteringsOptie/productActieveWoning_rel->BO_rel
			, BouwdeelActieveWoning/ProductInactieveAmbitie/BouwdeelActieveWoning_rel->BO_rel
		);

		attribute<ActieveWoning> ActieveWoning_rel := rlookup(BO_rel, ActieveWoning/BO_rel);
		
		container Bouwdelen {
			container Isolatie := for_each_nedv(Classifications/Bouwdeel/name
			,	replace(constr_expr2, '@A', 'Bouwdelen/Isolatie/@BN', '@BN', Classifications/Bouwdeel/name)
			,	xInvesteringsOptie, Classifications/IsolatieNiveau
			);
		}
		container AansluitCapaciteit
		{
			attribute<kW> RV (xInvesteringsOptie) := =replace(constr_expr2, '@A', 'AansluitCapaciteit/RV');
			attribute<kW> KD (xInvesteringsOptie) := =replace(constr_expr2, '@A', 'AansluitCapaciteit/KD');
			attribute<kW> TW (xInvesteringsOptie) := =replace(constr_expr2, '@A', 'AansluitCapaciteit/TW');
		}
	}
	
	unit<uint32> xGebouwOptie := union_unit(ProductActieveWoning/xIsolatieAmbitie/xGebouwOptie, BouwdeelActieveWoning/ProductInactieveAmbitie)
	{
			parameter<string> constr_expr2 := 'union_data(xGebouwOptie, ProductActieveWoning/xIsolatieAmbitie/xGebouwOptie/@A, BouwdeelActieveWoning/ProductInactieveAmbitie/@A)';
			parameter<string> constr_expr1 := 'union_data(xGebouwOptie, ProductActieveWoning/xIsolatieAmbitie/xGebouwOptie/@A, const(@C, BouwdeelActieveWoning/ProductInactieveAmbitie))';
			
			attribute<BO>                          BO_rel          := =replace(constr_expr2, '@A', 'BO_rel');
			attribute<Classifications/GebouwOptie> GebouwOptie_rel := =replace(constr_expr1, '@A', 'GebouwOptie_rel', '@C', 'Classifications/GebouwOptie/V/geen');
			
			// voor ProductInactieveAmbitie wordt GebouwOptieCategorie Hybride genoteerd, hoewel die woning ook Ketel of AllElectric kan zijn; als er maar 1 categorie is zodat keuzeset goed is
			// TODO: Check dat AansluitCapaciteit niet ook van categorie afhangt of gaat afhangen
			// TODO2: AansluitCapaciteit enkel afhankelijk van xIsolatieAmbitie of xInvesteringsOptie ? Dan liever niet uit gebouwoptie ophalen
			attribute<Classifications/GebouwOptieCategorie>  Categorie_rel := =replace(constr_expr1, '@A', 'Categorie_rel', '@C', 'Classifications/GebouwOptieCategorie/V/Hybride');
			attribute<Classifications/IsolatieAmbitie> MinIsolatieAmbitie_rel := =replace(constr_expr2, '@A', 'MinIsolatieAmbitie_rel');
			attribute<Classifications/IsolatieAmbitie> MaxIsolatieAmbitie_rel := =replace(constr_expr2, '@A', 'MaxIsolatieAmbitie_rel');
			
			attribute<xInvesteringsOptie> xInvesteringsOptie_rel := 
				union_data(.
				,	convert( ProductActieveWoning/xIsolatieAmbitie/xGebouwOptie/PAW_xInvesteringsOptie_rel , xInvesteringsOptie)
				,	convert( ID(BouwdeelActieveWoning/ProductInactieveAmbitie) + #ProductActieveWoning/xIsolatieAmbitie/PAW_xInvesteringsOptie, xInvesteringsOptie)
				);
			
			attribute<bool> Criterium := =replace(constr_expr1, '@A', 'Criterium', '@C', 'true');
			
			attribute<Classifications/SchilLabel>  Schillabel_rel := =replace(constr_expr2, '@A', 'SchilLabel_rel');
			
			container Bouwdelen {
				container Isolatie := for_each_nedv(Classifications/Bouwdeel/name
				,	replace('xInvesteringsOptie/Bouwdelen/Isolatie/@BN[xInvesteringsOptie_rel]', '@BN', Classifications/Bouwdeel/name)
				,	xGebouwOptie, Classifications/IsolatieNiveau
				);
			}
			container AansluitCapaciteit
			{
				attribute<kW> RV (xGebouwOptie) := =replace(constr_expr2, '@A', 'AansluitCapaciteit/RV');
				attribute<kW> KD (xGebouwOptie) := =replace(constr_expr2, '@A', 'AansluitCapaciteit/KD');
				attribute<kW> TW (xGebouwOptie) := =replace(constr_expr2, '@A', 'AansluitCapaciteit/TW');
			}
			container functioneel := for_each_nedv(
				Classifications/FunctioneleVraag/name,
				replace(constr_expr2
				,	'@A', 'functioneel/@PT'
				,	'@PT', Classifications/FunctioneleVraag/name ),
				xGebouwOptie,
				GJ_yr);
			attribute<EUR>    Ki_gv  := =replace(constr_expr2, '@A', 'Ki_gv');
			attribute<EUR_yr> Kji_gv := =replace(constr_expr2, '@A', 'Kji_gv');
			attribute<EUR_yr> Kmi_gv := =replace(constr_expr2, '@A', 'Kmi_gv');
	}

	container GeschikteOptieBerekening := select_with_org_relGebouwOptieT(xGebouwOptie, BO);
			
	unit<uint32> GeschikteOptie := GeschikteOptieBerekening/results, ishidden = "True"
	{
		attribute<xInvesteringsOptie>          xInvesteringsOptie_rel := select_data(GeschikteOptie, xGebouwOptie/xInvesteringsOptie_rel);
		attribute<Classifications/GebouwOptie> GebouwOptie_rel        := select_data(GeschikteOptie, xGebouwOptie/GebouwOptie_rel);
	}
	
	// Kies GebouwOptie per xInvesteringsOptie
	container Choice_per_xInvesteringsOptie {
	
		attribute<Classifications/Gebouwoptie>          GebouwOptie          (GeschikteOptie) := GeschikteOptie/GebouwOptie_rel;
		attribute<Classifications/IsolatieAmbitie>      MinIsolatieAmbitie   (GeschikteOptie) := GeschikteOptie/MinIsolatieAmbitie_rel;
		attribute<Classifications/IsolatieAmbitie>      MaxIsolatieAmbitie   (GeschikteOptie) := GeschikteOptie/MaxIsolatieAmbitie_rel;
		attribute<Classifications/GebouwOptieCategorie> GebouwOptieCategorie (GeschikteOptie) := Classifications/Gebouwoptie/Categorie_rel[Gebouwoptie];
		attribute<Classifications/Eigendom>             Eigendom             (GeschikteOptie) := BO/Eigendom_rel[GeschikteOptie/BO_rel];

		attribute<GeschikteOptie> min_GeschikteOptie_rel (xInvesteringsOptie) := min_index(GeschikteOptie/kosten_tbv_afweging, GeschikteOptie/xInvesteringsOptie_rel);	
		
		parameter<float64> LOG_MAX_FLOAT64 := 700.0; // slightly less than ln( 2^1024 / pcount(xInvesteringsOptie/ActieveWoning_rel) )
		parameter<float64> beta            := 1d;//SpecifiekeInstellingen/Probabilisering/NonspecificBeta / max(GeschikteOptie/kosten_tbv_afweging); // monetary sensitivity

		attribute<Float64> SpecificBeta  (GeschikteOptie)     := Classifications/Scurve_gebouwoptie/beta_f[combine_data(Classifications/Scurve_gebouwoptie, BO/Eigendom_rel[GeschikteOptie/BO_rel], GeschikteOptie/GebouwOptie_rel)];
		attribute<Float64> MaxKosten     (xInvesteringsOptie) := max(GeschikteOptie/kosten_tbv_afweging, GeschikteOptie/xInvesteringsOptie_rel);
		attribute<Float64> Geschiktheid  (GeschikteOptie)     := MaxKosten[GeschikteOptie/xInvesteringsOptie_rel] - GeschikteOptie/kosten_tbv_afweging;
		attribute<Float64> OddsRatio     (GeschikteOptie)     := IsDefined(Geschiktheid) ? exp(min_elem(Geschiktheid * beta * SpecificBeta, LOG_MAX_FLOAT64)) : 0.0;
		attribute<Float64> TotalOddsRatio(xInvesteringsOptie) := sum(OddsRatio, GeschikteOptie/xInvesteringsOptie_rel);
		attribute<Float64> Probability   (GeschikteOptie)     := OddsRatio / TotalOddsRatio[GeschikteOptie/xInvesteringsOptie_rel];
		attribute<Float64> CumulProb     (GeschikteOptie)     := cumulate(Probability, GeschikteOptie/xInvesteringsOptie_rel);
		attribute<Float64> rnd           (xInvesteringsOptie) := rnd_uniform(JaarSeed * 5u, xInvesteringsOptie, range(float64, 0.0, 1.0));
		attribute<bool>    isSelected    (GeschikteOptie)     := MakeDefined(CumulProb - Probability, -1.0) <= rnd[GeschikteOptie/xInvesteringsOptie_rel] && rnd[GeschikteOptie/xInvesteringsOptie_rel] < MakeDefined(CumulProb, 0.0);
		attribute<uint32>  nrSelected    (xInvesteringsOptie) := sum_uint32(isSelected, GeschikteOptie/xInvesteringsOptie_rel); // Diagnostic IntegrityCheck = "all(nrSelected == 1)"

		attribute<GeschikteOptie>              SCurve_GeschikteOptie_rel (xInvesteringsOptie) := max_index( isSelected, GeschikteOptie/xInvesteringsOptie_rel);	
		attribute<GeschikteOptie>              GeschikteOptie_rel        (xInvesteringsOptie) := SCurve_GeschikteOptie_rel;
		attribute<Classifications/GebouwOptie> GebouwOptie_rel           (xInvesteringsOptie) := GeschikteOptie/GebouwOptie_rel[GeschikteOptie_rel];	
		
		attribute<Float64>                     P50P                      (xInvesteringsOptie) := 
			Classifications/Scurve_investering/P50P_f[
				combine_data(Classifications/Scurve_investering,
					Eigendom[Choice_per_xInvesteringsOptie/GeschikteOptie_rel],
					combine_data(combine(Classifications/IsolatieAmbitie,Classifications/GebouwOptieCategorie),
						MinIsolatieAmbitie[Choice_per_xInvesteringsOptie/GeschikteOptie_rel],
						GebouwOptieCategorie[Choice_per_xInvesteringsOptie/GeschikteOptie_rel]))
				];		 	
		attribute<eur_yr>                      kosten_tbv_afweging       (xInvesteringsOptie) := GeschikteOptie/kosten_tbv_afweging[GeschikteOptie_rel] * P50P;
	}	
	
	// Kies uit results_Per_xInvesteringsOptie een InvesteringsOptie per ProductActieveWoning
	container Choice_per_ActieveWoning
	{
		attribute<Classifications/Gebouwoptie>          GebouwOptie          (xInvesteringsOptie) := Choice_per_xInvesteringsOptie/GebouwOptie         [Choice_per_xInvesteringsOptie/GeschikteOptie_rel];
		attribute<Classifications/IsolatieAmbitie>      MinIsolatieAmbitie   (xInvesteringsOptie) := Choice_per_xInvesteringsOptie/MinIsolatieAmbitie  [Choice_per_xInvesteringsOptie/GeschikteOptie_rel];
		attribute<Classifications/IsolatieAmbitie>      MaxIsolatieAmbitie   (xInvesteringsOptie) := Choice_per_xInvesteringsOptie/MaxIsolatieAmbitie  [Choice_per_xInvesteringsOptie/GeschikteOptie_rel];
		attribute<Classifications/GebouwOptieCategorie> GebouwOptieCategorie (xInvesteringsOptie) := Choice_per_xInvesteringsOptie/GebouwOptieCategorie[Choice_per_xInvesteringsOptie/GeschikteOptie_rel];
		attribute<Classifications/Eigendom>             Eigendom             (xInvesteringsOptie) := Choice_per_xInvesteringsOptie/Eigendom[Choice_per_xInvesteringsOptie/GeschikteOptie_rel];

		attribute<xInvesteringsOptie>  min_xInvesteringsOptie_rel   (ActieveWoning) := min_index( Choice_per_xInvesteringsOptie/kosten_tbv_afweging, xInvesteringsOptie/ActieveWoning_rel);
		
		parameter<float64> LOG_MAX_FLOAT64 := 700.0; // slightly less than ln( 2^1024 / pcount(xInvesteringsOptie/ActieveWoning_rel) )
		parameter<float64> beta            := 1d;//SpecifiekeInstellingen/Probabilisering/NonspecificBeta / max(choice_per_xInvesteringsOptie/kosten_tbv_afweging); // monetary sensitivity

		attribute<Float64> SpecificBeta  (xInvesteringsOptie) := 
			Classifications/Scurve_investering/beta_f[
					combine_data(Classifications/Scurve_investering,
						Eigendom,
						combine_data(combine_unit_uint32(Classifications/IsolatieAmbitie,Classifications/GebouwOptieCategorie),
							MinIsolatieAmbitie,
							GebouwOptieCategorie))
				];		 
		attribute<Float64> MaxKosten     (ActieveWoning)      := max(Choice_per_xInvesteringsOptie/kosten_tbv_afweging, xInvesteringsOptie/ActieveWoning_rel);
		attribute<Float64> Geschiktheid  (xInvesteringsOptie) := MaxKosten[xInvesteringsOptie/ActieveWoning_rel] - Choice_per_xInvesteringsOptie/kosten_tbv_afweging;
		attribute<Float64> OddsRatio     (xInvesteringsOptie) := IsDefined(Geschiktheid) ? exp(min_elem(Geschiktheid * beta * SpecificBeta, LOG_MAX_FLOAT64)) : 0.0;
		attribute<Float64> TotalOddsRatio(ActieveWoning)      := sum(OddsRatio, xInvesteringsOptie/ActieveWoning_rel);
		attribute<Float64> Probability   (xInvesteringsOptie) := OddsRatio / TotalOddsRatio[xInvesteringsOptie/ActieveWoning_rel];
		attribute<Float64> CumulProb     (xInvesteringsOptie) := cumulate(Probability, xInvesteringsOptie/ActieveWoning_rel);
		attribute<Float64> rnd           (ActieveWoning)      := rnd_uniform(JaarSeed * 6u, ActieveWoning, range(float64, 0.0, 1.0));
		attribute<bool>    isSelected    (xInvesteringsOptie) := MakeDefined(CumulProb - Probability, -1.0) <= rnd[xInvesteringsOptie/ActieveWoning_rel] && rnd[xInvesteringsOptie/ActieveWoning_rel] < CumulProb;
		attribute<uint32>  nrSelected    (ActieveWoning)      := sum_uint32(isSelected, xInvesteringsOptie/ActieveWoning_rel); // Diagnostic IntegrityCheck = "all(nrSelected == 1)"

		attribute<xInvesteringsOptie>  SCurve_xInvesteringsOptie_rel (ActieveWoning) := max_index( isSelected, xInvesteringsOptie/ActieveWoning_rel);
		attribute<xInvesteringsOptie>  xInvesteringsOptie_rel        (ActieveWoning) := SCurve_xInvesteringsOptie_rel;
		attribute<GeschikteOptie>      GeschikteOptie_rel            (ActieveWoning) := Choice_per_xInvesteringsOptie/GeschikteOptie_rel[ xInvesteringsOptie_rel ];
	}
	container Choice_Per_PGBO : ishidden = "True"
	{
		attribute<xInvesteringsOptie> xInvesteringsOptie_rel (PGBO) := Choice_per_ActieveWoning/xInvesteringsOptie_rel[per_PGBO];
		attribute<GeschikteOptie>     GeschikteOptie_rel     (PGBO) := Choice_per_ActieveWoning/GeschikteOptie_rel[per_PGBO];
	}
	
	unit<uint32> BebouwingsObjectMetGebouwOptie := PGBO
	{
//		unit<uint32> BO := PGBO; // TODO: substitute
//		attribute<BO> BO_rel := org_rel;
		attribute<Classifications/Schillabel>  Schillabel_rel   (PGBO) := makedefined(GeschikteOptie/SchilLabel_rel   [Choice_per_PGBO/GeschikteOptie_rel], collect_by_cond(PGBO, BO/SchilLabel_rel));
		attribute<Classifications/Schillabel>  Energielabel_rel (PGBO) := makedefined(GeschikteOptie/Energielabel_rel [Choice_per_PGBO/GeschikteOptie_rel], collect_by_cond(PGBO, BO/Energielabel_rel));
		attribute<Classifications/GebouwOptie> GebouwOptie_rel  (PGBO) := makedefined(GeschikteOptie/GebouwOptie_rel  [Choice_per_PGBO/GeschikteOptie_rel], collect_by_cond(PGBO, BO/GebouwOptie_rel));
		
		container BemeterdeGebouwInput_rel := for_each_nedv(
				Classifications/Product/name,
				replace('makedefined(GeschikteOptie/BemeterdeGebouwInput_rel/@PT@[Choice_per_PGBO/GeschikteOptie_rel], collect_by_cond(PGBO, BO/BemeterdeGebouwInput_rel/@PT@))', '@PT@', Classifications/Product/name ),
				BebouwingsObjectMetGebouwOptie,
				Classifications/BemeterdeGebouwInput);
		container metervraag := for_each_nedv(
				Classifications/BemeterdeGebouwInput/name,
				replace('makedefined(GeschikteOptie/metervraag/@GI@[Choice_per_PGBO/GeschikteOptie_rel], collect_by_cond(PGBO, BO/metervraag/@GI@))', '@GI@', Classifications/BemeterdeGebouwInput/name ),
				BebouwingsObjectMetGebouwOptie,
				GJ_yr)
		{
			attribute<GJ_yr> Vj_e_RV    (PGBO) := makedefined(  GeschikteOptie/Upref/Func2Meter/Metervraag_per_product/RVb           [ Choice_per_PGBO/GeschikteOptie_rel ]
															* float64(GeschikteOptie/Upref/Func2Meter/BemeterdeGebouwInput_rel/RVb [ Choice_per_PGBO/GeschikteOptie_rel ] == Classifications/BemeterdeGebouwInput/V/e)
															+ GeschikteOptie/Upref/Func2Meter/Metervraag_per_product/RVp           [ Choice_per_PGBO/GeschikteOptie_rel ]
															* float64(GeschikteOptie/Upref/Func2Meter/BemeterdeGebouwInput_rel/RVp [ Choice_per_PGBO/GeschikteOptie_rel ] == Classifications/BemeterdeGebouwInput/V/e)
															, collect_by_cond(PGBO, BO/metervraagBerekening/Metervraag_per_product/RVb)
															* float64(collect_by_cond(PGBO, BO/metervraagBerekening/BemeterdeGebouwInput_rel/RVb == Classifications/BemeterdeGebouwInput/V/e))
															+ collect_by_cond(PGBO, BO/metervraagBerekening/Metervraag_per_product/RVp)
															* float64(collect_by_cond(PGBO, BO/metervraagBerekening/BemeterdeGebouwInput_rel/RVp == Classifications/BemeterdeGebouwInput/V/e)) ) ;

			attribute<GJ_yr> Vj_e_TW    (PGBO) := makedefined(  GeschikteOptie/Upref/Func2Meter/Metervraag_per_product/TWb           [ Choice_per_PGBO/GeschikteOptie_rel ]
															* float64(GeschikteOptie/Upref/Func2Meter/BemeterdeGebouwInput_rel/TWb [ Choice_per_PGBO/GeschikteOptie_rel ] == Classifications/BemeterdeGebouwInput/V/e)
															+ GeschikteOptie/Upref/Func2Meter/Metervraag_per_product/TWp           [ Choice_per_PGBO/GeschikteOptie_rel ]
															* float64(GeschikteOptie/Upref/Func2Meter/BemeterdeGebouwInput_rel/TWp [ Choice_per_PGBO/GeschikteOptie_rel ] == Classifications/BemeterdeGebouwInput/V/e)
															, collect_by_cond(PGBO, BO/metervraagBerekening/Metervraag_per_product/TWb)
															* float64(collect_by_cond(PGBO, BO/metervraagBerekening/BemeterdeGebouwInput_rel/TWb == Classifications/BemeterdeGebouwInput/V/e))
															+ collect_by_cond(PGBO, BO/metervraagBerekening/Metervraag_per_product/TWp)
															* float64(collect_by_cond(PGBO, BO/metervraagBerekening/BemeterdeGebouwInput_rel/TWp == Classifications/BemeterdeGebouwInput/V/e)) ) ;

			attribute<GJ_yr> Vj_e_KD    (PGBO) := makedefined(  GeschikteOptie/Upref/Func2Meter/Metervraag_per_product/KDb           [ Choice_per_PGBO/GeschikteOptie_rel ]
															* float64(GeschikteOptie/Upref/Func2Meter/BemeterdeGebouwInput_rel/KDb [ Choice_per_PGBO/GeschikteOptie_rel ] == Classifications/BemeterdeGebouwInput/V/e)
															+ GeschikteOptie/Upref/Func2Meter/Metervraag_per_product/KDp           [ Choice_per_PGBO/GeschikteOptie_rel ]
															* float64(GeschikteOptie/Upref/Func2Meter/BemeterdeGebouwInput_rel/KDp [ Choice_per_PGBO/GeschikteOptie_rel ] == Classifications/BemeterdeGebouwInput/V/e)
															, collect_by_cond(PGBO, BO/metervraagBerekening/Metervraag_per_product/KDb)
															* float64(collect_by_cond(PGBO, BO/metervraagBerekening/BemeterdeGebouwInput_rel/KDb == Classifications/BemeterdeGebouwInput/V/e))
															+ collect_by_cond(PGBO, BO/metervraagBerekening/Metervraag_per_product/KDp)
															* float64(collect_by_cond(PGBO, BO/metervraagBerekening/BemeterdeGebouwInput_rel/KDp == Classifications/BemeterdeGebouwInput/V/e) )) ;

			
			attribute<GJ_yr> Vj_e_EA    (PGBO) := makedefined( GeschikteOptie/Upref/Func2Meter/VraagBO/Functioneel/EA     [ Choice_per_PGBO/GeschikteOptie_rel ], collect_by_cond(PGBO, BO/metervraagBerekening/VraagBO/Functioneel/EA     )) ;
			attribute<GJ_yr> Oj_e_ZonPV (PGBO) := makedefined( GeschikteOptie/Upref/Func2Meter/eEffect/ZonPV/Oj_elek      [ Choice_per_PGBO/GeschikteOptie_rel ], collect_by_cond(PGBO, BO/metervraagBerekening/eEffect/ZonPV/Oj_elek      )) ;
			attribute<GJ_yr> Vj_e_VT    (PGBO) := makedefined( GeschikteOptie/Upref/Func2Meter/eEffect/ventilatie/Vj_elek [ Choice_per_PGBO/GeschikteOptie_rel ], collect_by_cond(PGBO, BO/metervraagBerekening/eEffect/ventilatie/Vj_elek )) ;
			attribute<GJ_yr> Vj_e_koken (PGBO) := makedefined( GeschikteOptie/Upref/Func2Meter/koken/Vj_elek              [ Choice_per_PGBO/GeschikteOptie_rel ], collect_by_cond(PGBO, BO/metervraagBerekening/koken/Vj_elek              )) ;

			attribute<GJ_yr> Vj_e_pomp  (PGBO) := makedefined(  GeschikteOptie/Upref/Func2Meter/eEffect/volume/Vj_elek     [ Choice_per_PGBO/GeschikteOptie_rel ]
															+ GeschikteOptie/Upref/Func2Meter/eEffect/capaciteit/Vj_elek [ Choice_per_PGBO/GeschikteOptie_rel ]
															, collect_by_cond(PGBO, BO/metervraagBerekening/eEffect/volume/Vj_elek)        
															+ collect_by_cond(PGBO, BO/metervraagBerekening/eEffect/capaciteit/Vj_elek)) ;

		} 

		container functioneel := for_each_nedv(
				Classifications/FunctioneleVraag/name,
				replace('makedefined(GeschikteOptie/functioneel/@FV@[Choice_per_PGBO/GeschikteOptie_rel], collect_by_cond(PGBO, BO/functioneel/@FV@))', '@FV@', Classifications/FunctioneleVraag/name ),
				PGBO,
				GJ_yr);

		container kapitaallasten := for_each_nedv(
			Classifications/Gebouw_kapitaallasten/name,
			replace('makedefined(GeschikteOptie/kapitaallasten/@GK@[Choice_per_PGBO/GeschikteOptie_rel], collect_by_cond(PGBO, BO/kapitaallasten/@GK@))', '@GK@', Classifications/Gebouw_kapitaallasten/name ),
			PGBO,
			Eur_yr);
		container eenmalig := for_each_nedv(
			Classifications/GebouwOptie_eenmalig/name,
			replace('makedefined(GeschikteOptie/eenmalig/@GE@[Choice_per_PGBO/GeschikteOptie_rel], 0[Eur])', '@GE@', Classifications/GebouwOptie_eenmalig/name ),
			PGBO,
			Eur)
		{
			attribute<eur> Ki_gv (PGBO) := makedefined(GeschikteOptie/eenmalig/Ki_gv[Choice_per_PGBO/GeschikteOptie_rel], 0.0[eur]);
		}
		container jaarlijks := for_each_nedv(
			Classifications/GebouwOptie_jaarlijks/name,
			replace('makedefined(GeschikteOptie/jaarlijks/@GJ@[Choice_per_PGBO/GeschikteOptie_rel], collect_by_cond(PGBO, BO/jaarlijks/@GJ@))', '@GJ@', Classifications/GebouwOptie_jaarlijks/name ),
			PGBO,
			Eur_yr)
			{
				attribute<Eur_yr> oh_KD  (PGBO) := makedefined(GeschikteOptie/jaarlijks/oh_KD[Choice_per_PGBO/GeschikteOptie_rel], collect_by_cond(PGBO, BO/jaarlijks/oh_KD));
				attribute<Eur_yr> adm_KD (PGBO) := makedefined(GeschikteOptie/jaarlijks/adm_KD[Choice_per_PGBO/GeschikteOptie_rel], collect_by_cond(PGBO, BO/jaarlijks/adm_KD));
			}
		container subsidie := for_each_nedv(
			Zichtjaarbeleid/Subsidie/name,
			replace('makedefined(GeschikteOptie/Subsidie/@SB@[Choice_per_PGBO/GeschikteOptie_rel], 0[Eur])', '@SB@', Zichtjaarbeleid/Subsidie/name ),
			PGBO,
			Eur);
			
		container InstallatiePerProduct := for_each_nedv(
				Classifications/Product/name,
				replace('makedefined(GeschikteOptie/InstallatiePerProduct/@PT@[Choice_per_PGBO/GeschikteOptie_rel], collect_by_cond(PGBO, BO/InstallatiePerProduct/@PT@))', '@PT@', Classifications/Product/name ),
				PGBO,
				Classifications/Installatie)
		{
			attribute<Classifications/AfgifteSysteem>                             AS (PGBO) := makedefined(GeschikteOptie/InstallatiePerProduct/AS[Choice_per_PGBO/GeschikteOptie_rel], collect_by_cond(PGBO, BO/InstallatiePerProduct/AS));
			attribute<Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes> VT (PGBO) := makedefined(GeschikteOptie/InstallatiePerProduct/VT[Choice_per_PGBO/GeschikteOptie_rel], collect_by_cond(PGBO, BO/InstallatiePerProduct/VT));
			attribute<Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes> DK (PGBO) := makedefined(GeschikteOptie/InstallatiePerProduct/DK[Choice_per_PGBO/GeschikteOptie_rel], collect_by_cond(PGBO, BO/InstallatiePerProduct/DK));
			attribute<Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes> KK (PGBO) := makedefined(GeschikteOptie/InstallatiePerProduct/KK[Choice_per_PGBO/GeschikteOptie_rel], collect_by_cond(PGBO, BO/InstallatiePerProduct/KK));

			container LastVervanging := for_each_nedv(
				classifications/Product/name,
				replace('collect_by_cond(PGBO, BO/Activatie/Producten/@PT@) ? Zichtjaar_jaar : collect_by_cond(PGBO, BO/InstallatiePerProduct/lastvervanging/@PT@)', '@PT@', Classifications/Product/name ),
				PGBO,
				yr_uint16)
			{
				attribute<yr_uint16> KK (PGBO) := InstallatiePerProduct/KK != collect_by_cond(PGBO, BO/InstallatiePerProduct/KK) ? Zichtjaar_jaar : collect_by_cond(PGBO, BO/InstallatiePerProduct/lastvervanging/KK);
				attribute<yr_uint16> VT (PGBO) := InstallatiePerProduct/VT != collect_by_cond(PGBO, BO/InstallatiePerProduct/VT) ? Zichtjaar_jaar : collect_by_cond(PGBO, BO/InstallatiePerProduct/lastvervanging/VT);
				attribute<yr_uint16> DK (PGBO) := InstallatiePerProduct/DK != collect_by_cond(PGBO, BO/InstallatiePerProduct/DK) ? Zichtjaar_jaar : collect_by_cond(PGBO, BO/InstallatiePerProduct/lastvervanging/DK);
			}
		}
		
		container Bouwdelen
		{
			container Isolatie := for_each_nedv(
				Classifications/Bouwdeel/name,
				replace('makedefined(xInvesteringsOptie/Bouwdelen/Isolatie/@BN@[Choice_per_PGBO/xInvesteringsOptie_rel], collect_by_cond(PGBO, BO/Bouwdelen/Isolatie/@BN@))', '@BN@', Classifications/Bouwdeel/name ),
				PGBO,
				Classifications/IsolatieNiveau);
				
			container lastvervanging := for_each_nedv(
				classifications/bouwdeel/name,
				replace('collect_by_cond(PGBO, BO/activatie/bouwdelen/@BN@) ? Zichtjaar_jaar : collect_by_cond(PGBO, BO/bouwdelen/lastvervanging/@BN@)','@BN@', Classifications/Bouwdeel/name ),
				PGBO,
				yr_uint16);
		}
		container AansluitCapaciteit
		{
			attribute<kW> RV (PGBO) := makedefined(xInvesteringsOptie/AansluitCapaciteit/RV[Choice_per_PGBO/xInvesteringsOptie_rel], collect_by_cond(PGBO, BO/AansluitCapaciteit/RV));
			attribute<kW> KD (PGBO) := makedefined(xInvesteringsOptie/AansluitCapaciteit/KD[Choice_per_PGBO/xInvesteringsOptie_rel], collect_by_cond(PGBO, BO/AansluitCapaciteit/KD));
			attribute<kW> TW (PGBO) := makedefined(xInvesteringsOptie/AansluitCapaciteit/TW[Choice_per_PGBO/xInvesteringsOptie_rel], collect_by_cond(PGBO, BO/AansluitCapaciteit/TW));
		}
	}
	unit<uint32> results := FenceContainer(BebouwingsObjectMetGebouwOptie, RekenstapName + ' PG ' + string(PGBO_rel));
}
