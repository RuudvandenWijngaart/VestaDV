//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2021 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//           Dit is de container met rekenschema's die werken op Bebouwing              //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//====== Berekeningen voor woningen die actief zijn op minimaal één functioneel product =====
unit<uint32> ActieveWoning := select_orgrel(BO/Activatie/ProductActief || BO/Activatie/BouwdeelActief)
{		
	attribute<BO> BO_rel := org_rel, ishidden = "True";
	attribute<rdc_meter> Geometry := select_data(ActieveWoning, BO/Geometry), ishidden = "True";
	attribute<ActieveWoning> per_BO(BO) := invert(BO_rel), ishidden = "True";
	
	unit<uint32> xInvesteringsOptie_org := union_unit(ProductActieveWoning/xIsolatieAmbitie/PAW_xInvesteringsOptie, BouwdeelActieveWoning/ProductInactieveAmbitie), ishidden = "True";
	unit<uint32> xInvesteringsOptie := TiledUnit(Invoer/TechnischeInstellingen/TileSize[xInvesteringsOptie_org])
	{
		parameter<string> constr_expr2 := 'union_data(xInvesteringsOptie, ProductActieveWoning/xIsolatieAmbitie/PAW_xInvesteringsOptie/@A, BouwdeelActieveWoning/ProductInactieveAmbitie/@A)';
		
		attribute<ActieveWoning> ActieveWoning_rel := union_data(xInvesteringsOptie
		,	ProductActieveWoning/xIsolatieAmbitie/PAW_xInvesteringsOptie/ProductActieveWoning_rel
		,	ID(BouwdeelActieveWoning/ProductInactieveAmbitie) + #ProductActieveWoning
		)[ActieveWoning];
		
		container Bouwdelen {
			container Isolatie := for_each_nedv(Classifications/Bouwdeel/name
			,	replace(constr_expr2, '@A', 'Bouwdelen/Isolatie/@BN', '@BN', Classifications/Bouwdeel/name)
			,	xInvesteringsOptie, Classifications/IsolatieNiveau
			);
		}
		container AansluitCapaciteit
		{
			attribute<kW> RV (xInvesteringsOptie) := =replace(constr_expr2, '@A', 'AansluitCapaciteit/RV');
			attribute<kW> KD (xInvesteringsOptie) := =replace(constr_expr2, '@A', 'AansluitCapaciteit/KD');
			attribute<kW> TW (xInvesteringsOptie) := =replace(constr_expr2, '@A', 'AansluitCapaciteit/TW');
		}
	}
	
	unit<uint32> xGebouwOptie_org := union_unit(ProductActieveWoning/xIsolatieAmbitie/xGebouwOptie, BouwdeelActieveWoning/ProductInactieveAmbitie), ishidden = "True";
	unit<uint32> xGebouwOptie := TiledUnit(Invoer/TechnischeInstellingen/TileSize[xGebouwOptie_org])
	{
			parameter<string> constr_expr2 := 'union_data(xGebouwOptie, ProductActieveWoning/xIsolatieAmbitie/xGebouwOptie/@A, BouwdeelActieveWoning/ProductInactieveAmbitie/@A)';
			parameter<string> constr_expr1 := 'union_data(xGebouwOptie, ProductActieveWoning/xIsolatieAmbitie/xGebouwOptie/@A, const(@C, BouwdeelActieveWoning/ProductInactieveAmbitie))';
			
			attribute<BO>                          BO_rel          := =replace(constr_expr2, '@A', 'BO_rel');
			attribute<Classifications/GebouwOptie> GebouwOptie_rel := =replace(constr_expr1, '@A', 'GebouwOptie_rel', '@C', 'Classifications/GebouwOptie/V/geen');
			
			// voor ProductInactieveAmbitie wordt GebouwOptieCategorie Hybride genoteerd, hoewel die woning ook Ketel of AllElectric kan zijn; als er maar 1 categorie is zodat keuzeset goed is
			// TODO: Check dat AansluitCapaciteit niet ook van categorie afhangt of gaat afhangen
			// TODO2: AansluitCapaciteit enkel afhankelijk van xIsolatieAmbitie of xInvesteringsOptie ? Dan liever niet uit gebouwoptie ophalen
			attribute<Classifications/GebouwOptieCategorie>  Categorie_rel := =replace(constr_expr1, '@A', 'Categorie_rel', '@C', 'Classifications/GebouwOptieCategorie/V/Hybride');
			attribute<Classifications/IsolatieAmbitie> MinIsolatieAmbitie_rel := =replace(constr_expr2, '@A', 'MinIsolatieAmbitie_rel');
			attribute<Classifications/IsolatieAmbitie> MaxIsolatieAmbitie_rel := =replace(constr_expr2, '@A', 'MaxIsolatieAmbitie_rel');
			attribute<xInvesteringsOptie> xInvesteringsOptie_rel := union_data(., ProductActieveWoning/xIsolatieAmbitie/xGebouwOptie/PAW_xInvesteringsOptie_rel, ID(BouwdeelActieveWoning/ProductInactieveAmbitie)+#ProductActieveWoning/xIsolatieAmbitie/PAW_xInvesteringsOptie)[xInvesteringsOptie];
			
			attribute<bool> Criterium := =replace(constr_expr1, '@A', 'Criterium', '@C', 'true');
			
			attribute<Classifications/SchilLabel>  Schillabel_rel := =replace(constr_expr2, '@A', 'SchilLabel_rel');
			
			container Bouwdelen {
				container Isolatie := for_each_nedv(Classifications/Bouwdeel/name
				,	replace('xInvesteringsOptie/Bouwdelen/Isolatie/@BN[xInvesteringsOptie_rel]', '@BN', Classifications/Bouwdeel/name)
				,	xGebouwOptie, Classifications/IsolatieNiveau
				);
			}
			container AansluitCapaciteit
			{
				attribute<kW> RV (xGebouwOptie) := =replace(constr_expr2, '@A', 'AansluitCapaciteit/RV');
				attribute<kW> KD (xGebouwOptie) := =replace(constr_expr2, '@A', 'AansluitCapaciteit/KD');
				attribute<kW> TW (xGebouwOptie) := =replace(constr_expr2, '@A', 'AansluitCapaciteit/TW');
			}
			container functioneel := for_each_nedv(
				Classifications/FunctioneleVraag/name,
				replace(constr_expr2
				,	'@A', 'functioneel/@PT'
				,	'@PT', Classifications/FunctioneleVraag/name ),
				xGebouwOptie,
				GJ_yr);
			attribute<EUR>    Ki_gv  := =replace(constr_expr2, '@A', 'Ki_gv');
			attribute<EUR_yr> Kji_gv := =replace(constr_expr2, '@A', 'Kji_gv');
			attribute<EUR_yr> Kmi_gv := =replace(constr_expr2, '@A', 'Kmi_gv');
	}

	container GeschikteOptieBerekening := SubsetGebouwOptieT(xGebouwOptie);
			
	unit<uint32> GeschikteOptie := GeschikteOptieBerekening/results, ishidden = "True"
	{
		attribute<xInvesteringsOptie>          xInvesteringsOptie_rel := select_data(GeschikteOptie, xGebouwOptie/xInvesteringsOptie_rel);
		attribute<Classifications/GebouwOptie> GebouwOptie_rel        := select_data(GeschikteOptie, xGebouwOptie/GebouwOptie_rel);
	}
	
	// Kies GebouwOptie per xInvesteringsOptie
	container Choice_per_xInvesteringsOptie {
	
		attribute<Classifications/Gebouwoptie>          GebouwOptie          (GeschikteOptie) := GeschikteOptie/GebouwOptie_rel;
		attribute<Classifications/IsolatieAmbitie>      MinIsolatieAmbitie   (GeschikteOptie) := GeschikteOptie/MinIsolatieAmbitie_rel;
		attribute<Classifications/IsolatieAmbitie>      MaxIsolatieAmbitie   (GeschikteOptie) := GeschikteOptie/MaxIsolatieAmbitie_rel;
		attribute<Classifications/GebouwOptieCategorie> GebouwOptieCategorie (GeschikteOptie) := Classifications/Gebouwoptie/Categorie_rel[Gebouwoptie];
		attribute<Classifications/Eigendom>             Eigendom             (GeschikteOptie) := BO/Eigendom_rel[GeschikteOptie/BO_rel];

		attribute<GeschikteOptie> min_GeschikteOptie_rel (xInvesteringsOptie) := min_index(GeschikteOptie/kosten_tbv_afweging, GeschikteOptie/xInvesteringsOptie_rel);	
		
		parameter<float64> LOG_MAX_FLOAT64 := 700.0; // slightly less than ln( 2^1024 / pcount(xInvesteringsOptie/ActieveWoning_rel) )
		parameter<float64> beta            := SpecifiekeInstellingen/Probabilisering/NonspecificBeta / max(GeschikteOptie/kosten_tbv_afweging); // monetary sensitivity

		attribute<Float64> SpecificBeta  (GeschikteOptie)     := Classifications/Scurve_gebouwoptie/beta_f[combine_data(Classifications/Scurve_gebouwoptie, BO/Eigendom_rel[GeschikteOptie/BO_rel], GeschikteOptie/GebouwOptie_rel)];
		attribute<Float64> MaxKosten     (xInvesteringsOptie) := max(GeschikteOptie/kosten_tbv_afweging, GeschikteOptie/xInvesteringsOptie_rel);
		attribute<Float64> Geschiktheid  (GeschikteOptie)     := MaxKosten[GeschikteOptie/xInvesteringsOptie_rel] - GeschikteOptie/kosten_tbv_afweging;
		attribute<Float64> OddsRatio     (GeschikteOptie)     := IsDefined(Geschiktheid) ? exp(min_elem(Geschiktheid * beta * SpecificBeta, LOG_MAX_FLOAT64)) : 0.0;
		attribute<Float64> TotalOddsRatio(xInvesteringsOptie) := sum(OddsRatio, GeschikteOptie/xInvesteringsOptie_rel);
		attribute<Float64> Probability   (GeschikteOptie)     := OddsRatio / TotalOddsRatio[GeschikteOptie/xInvesteringsOptie_rel];
		attribute<Float64> CumulProb     (GeschikteOptie)     := cumulate(Probability, GeschikteOptie/xInvesteringsOptie_rel);
		attribute<Float64> rnd           (xInvesteringsOptie) := rnd_uniform(JaarSeed * 5u, xInvesteringsOptie, range(float64, 0.0, 1.0));
		attribute<bool>    isSelected    (GeschikteOptie)     := CumulProb - Probability <= rnd[GeschikteOptie/xInvesteringsOptie_rel] && rnd[GeschikteOptie/xInvesteringsOptie_rel] < CumulProb;
		attribute<uint32>  nrSelected    (xInvesteringsOptie) := sum_uint32(isSelected, GeschikteOptie/xInvesteringsOptie_rel); // Diagnostic IntegrityCheck = "all(nrSelected == 1)"

		attribute<GeschikteOptie>              SCurve_GeschikteOptie_rel (xInvesteringsOptie) := max_index( isSelected, GeschikteOptie/xInvesteringsOptie_rel);	
		attribute<GeschikteOptie>              GeschikteOptie_rel        (xInvesteringsOptie) := SCurve_GeschikteOptie_rel;
		attribute<Classifications/GebouwOptie> GebouwOptie_rel           (xInvesteringsOptie) := GeschikteOptie/GebouwOptie_rel[GeschikteOptie_rel];	
		
		attribute<Float64>                     P50P                      (xInvesteringsOptie) := 
			Classifications/Scurve_investering/P50P_f[
				combine_data(Classifications/Scurve_investering,
					Eigendom[Choice_per_xInvesteringsOptie/GeschikteOptie_rel],
					combine_data(combine(Classifications/IsolatieAmbitie,Classifications/GebouwOptieCategorie),
						MinIsolatieAmbitie[Choice_per_xInvesteringsOptie/GeschikteOptie_rel],
						GebouwOptieCategorie[Choice_per_xInvesteringsOptie/GeschikteOptie_rel]))
				];		 	
		attribute<eur_yr>                      kosten_tbv_afweging       (xInvesteringsOptie) := GeschikteOptie/kosten_tbv_afweging[GeschikteOptie_rel] * P50P;
	}	
	
	// Kies uit results_Per_xInvesteringsOptie een InvesteringsOptie per ProductActieveWoning
	container Choice_per_ActieveWoning
	{
		attribute<Classifications/Gebouwoptie>          GebouwOptie          (xInvesteringsOptie) := Choice_per_xInvesteringsOptie/GebouwOptie         [Choice_per_xInvesteringsOptie/GeschikteOptie_rel];
		attribute<Classifications/IsolatieAmbitie>      MinIsolatieAmbitie   (xInvesteringsOptie) := Choice_per_xInvesteringsOptie/MinIsolatieAmbitie  [Choice_per_xInvesteringsOptie/GeschikteOptie_rel];
		attribute<Classifications/IsolatieAmbitie>      MaxIsolatieAmbitie   (xInvesteringsOptie) := Choice_per_xInvesteringsOptie/MaxIsolatieAmbitie  [Choice_per_xInvesteringsOptie/GeschikteOptie_rel];
		attribute<Classifications/GebouwOptieCategorie> GebouwOptieCategorie (xInvesteringsOptie) := Choice_per_xInvesteringsOptie/GebouwOptieCategorie[Choice_per_xInvesteringsOptie/GeschikteOptie_rel];
		attribute<Classifications/Eigendom>             Eigendom             (xInvesteringsOptie) := Choice_per_xInvesteringsOptie/Eigendom[Choice_per_xInvesteringsOptie/GeschikteOptie_rel];

		attribute<xInvesteringsOptie>  min_xInvesteringsOptie_rel   (ActieveWoning) := min_index( Choice_per_xInvesteringsOptie/kosten_tbv_afweging, xInvesteringsOptie/ActieveWoning_rel);
		
		parameter<float64> LOG_MAX_FLOAT64 := 700.0; // slightly less than ln( 2^1024 / pcount(xInvesteringsOptie/ActieveWoning_rel) )
		parameter<float64> beta            := SpecifiekeInstellingen/Probabilisering/NonspecificBeta / max(choice_per_xInvesteringsOptie/kosten_tbv_afweging); // monetary sensitivity

		attribute<Float64> SpecificBeta  (xInvesteringsOptie) := 
			Classifications/Scurve_investering/beta_f[
					combine_data(Classifications/Scurve_investering,
						Eigendom,
						combine_data(combine_unit_uint32(Classifications/IsolatieAmbitie,Classifications/GebouwOptieCategorie),
							MinIsolatieAmbitie,
							GebouwOptieCategorie))
				];		 
		attribute<Float64> MaxKosten     (ActieveWoning)      := max(Choice_per_xInvesteringsOptie/kosten_tbv_afweging, xInvesteringsOptie/ActieveWoning_rel);
		attribute<Float64> Geschiktheid  (xInvesteringsOptie) := MaxKosten[xInvesteringsOptie/ActieveWoning_rel] - Choice_per_xInvesteringsOptie/kosten_tbv_afweging;
		attribute<Float64> OddsRatio     (xInvesteringsOptie) := IsDefined(Geschiktheid) ? exp(min_elem(Geschiktheid * beta * SpecificBeta, LOG_MAX_FLOAT64)) : 0.0;
		attribute<Float64> TotalOddsRatio(ActieveWoning)      := sum(OddsRatio, xInvesteringsOptie/ActieveWoning_rel);
		attribute<Float64> Probability   (xInvesteringsOptie) := OddsRatio / TotalOddsRatio[xInvesteringsOptie/ActieveWoning_rel];
		attribute<Float64> CumulProb     (xInvesteringsOptie) := cumulate(Probability, xInvesteringsOptie/ActieveWoning_rel);
		attribute<Float64> rnd           (ActieveWoning)      := rnd_uniform(JaarSeed * 6u, ActieveWoning, range(float64, 0.0, 1.0));
		attribute<bool>    isSelected    (xInvesteringsOptie) := CumulProb - Probability <= rnd[xInvesteringsOptie/ActieveWoning_rel] && rnd[xInvesteringsOptie/ActieveWoning_rel] < CumulProb;
		attribute<uint32>  nrSelected    (ActieveWoning)      := sum_uint32(isSelected, xInvesteringsOptie/ActieveWoning_rel); // Diagnostic IntegrityCheck = "all(nrSelected == 1)"

		attribute<xInvesteringsOptie>  SCurve_xInvesteringsOptie_rel (ActieveWoning) := max_index( isSelected, xInvesteringsOptie/ActieveWoning_rel);
		attribute<xInvesteringsOptie>  xInvesteringsOptie_rel        (ActieveWoning) := SCurve_xInvesteringsOptie_rel;
		attribute<GeschikteOptie>      GeschikteOptie_rel            (ActieveWoning) := Choice_per_xInvesteringsOptie/GeschikteOptie_rel[ xInvesteringsOptie_rel ];
	}
	container Choice_Per_BO : ishidden = "True"
	{
		attribute<xInvesteringsOptie> xInvesteringsOptie_rel (BO) := Choice_per_ActieveWoning/xInvesteringsOptie_rel[per_BO];
		attribute<GeschikteOptie>     GeschikteOptie_rel     (BO) := Choice_per_ActieveWoning/GeschikteOptie_rel[per_BO];
	}
	
	unit<uint32> BebouwingsObjectMetGebouwOptie := BO
	{
		attribute<Classifications/GebouwOptie> GebouwOptie_rel  (BO) := makedefined(GeschikteOptie/GebouwOptie_rel  [Choice_per_BO/GeschikteOptie_rel], BO/GebouwOptie_rel);
		attribute<Classifications/Schillabel>  Schillabel_rel   (BO) := makedefined(GeschikteOptie/SchilLabel_rel   [Choice_per_BO/GeschikteOptie_rel], BO/SchilLabel_rel);
		attribute<Classifications/Schillabel>  Energielabel_rel (BO) := makedefined(GeschikteOptie/Energielabel_rel [Choice_per_BO/GeschikteOptie_rel], BO/Energielabel_rel);
		
		
		container BemeterdeGebouwInput_rel := for_each_nedv(
				Classifications/Product/name,
				replace('makedefined(GeschikteOptie/BemeterdeGebouwInput_rel/@PT@[Choice_per_BO/GeschikteOptie_rel], BO/BemeterdeGebouwInput_rel/@PT@)', '@PT@', Classifications/Product/name ),
				BO,
				Classifications/BemeterdeGebouwInput);
		container metervraag := for_each_nedv(
				Classifications/BemeterdeGebouwInput/name,
				replace('makedefined(GeschikteOptie/metervraag/@GI@[Choice_per_BO/GeschikteOptie_rel], BO/metervraag/@GI@)', '@GI@', Classifications/BemeterdeGebouwInput/name ),
				BO,
				GJ_yr);
		container functioneel := for_each_nedv(
				Classifications/FunctioneleVraag/name,
				replace('makedefined(GeschikteOptie/functioneel/@FV@[Choice_per_BO/GeschikteOptie_rel], BO/functioneel/@FV@)', '@FV@', Classifications/FunctioneleVraag/name ),
				BO,
				GJ_yr)
			{
				attribute<ratio> Fitfactor_VT (BO) := BO/Functioneel_base/Fitfactor_VT;
			}
				
		container kosten
		{
			container kapitaallasten := for_each_nedv(
				Classifications/Gebouw_kapitaallasten/name,
				replace('makedefined(GeschikteOptie/kapitaallasten/@GK@[Choice_per_BO/GeschikteOptie_rel], BO/kapitaallasten/@GK@)', '@GK@', Classifications/Gebouw_kapitaallasten/name ),
				BO,
				Eur_yr);
			container eenmalig := for_each_nedv(
				Classifications/GebouwOptie_eenmalig/name,
				replace('makedefined(GeschikteOptie/eenmalig/@GE@[Choice_per_BO/GeschikteOptie_rel], 0[Eur])', '@GE@', Classifications/GebouwOptie_eenmalig/name ),
				BO,
				Eur)
			{
				attribute<eur> Ki_gv (BO) := makedefined(GeschikteOptie/eenmalig/Ki_gv[Choice_per_BO/GeschikteOptie_rel], 0.0[eur]);
			}
			container jaarlijks := for_each_nedv(
				Classifications/GebouwOptie_jaarlijks/name,
				replace('makedefined(GeschikteOptie/jaarlijks/@GJ@[Choice_per_BO/GeschikteOptie_rel], BO/jaarlijks/@GJ@)', '@GJ@', Classifications/GebouwOptie_jaarlijks/name ),
				BO,
				Eur_yr)
			{
				attribute<eur_yr> kji_gv (BO) := makedefined( GeschikteOptie/jaarlijks/Kji_gv [ Choice_per_BO/GeschikteOptie_rel ], 0[ Eur_yr ]) ;
				attribute<eur_yr> kmi_gv (BO) := makedefined( GeschikteOptie/jaarlijks/Kmi_gv [ Choice_per_BO/GeschikteOptie_rel ], 0[ Eur_yr ]) ;
			}
			container subsidie := for_each_nedv(
				Zichtjaarbeleid/Subsidie/name,
				replace('makedefined(GeschikteOptie/Subsidie/@SB@[Choice_per_BO/GeschikteOptie_rel], 0[Eur])', '@SB@', Zichtjaarbeleid/Subsidie/name ),
				BO,
				Eur);
		}
			
		container InstallatiePerProduct := for_each_nedv(
				Classifications/Product/name,
				replace('makedefined(GeschikteOptie/InstallatiePerProduct/@PT@[Choice_per_BO/GeschikteOptie_rel], BO/InstallatiePerProduct/@PT@)', '@PT@', Classifications/Product/name ),
				BO,
				Classifications/Installatie)
		{
			attribute<Classifications/AfgifteSysteem>                             AS (BO) := makedefined(GeschikteOptie/InstallatiePerProduct/AS[Choice_per_BO/GeschikteOptie_rel], BO/InstallatiePerProduct/AS);
			attribute<Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes> VT (BO) := makedefined(GeschikteOptie/InstallatiePerProduct/VT[Choice_per_BO/GeschikteOptie_rel], BO/InstallatiePerProduct/VT);
			attribute<Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes> DK (BO) := makedefined(GeschikteOptie/InstallatiePerProduct/DK[Choice_per_BO/GeschikteOptie_rel], BO/InstallatiePerProduct/DK);
			attribute<Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes> KK (BO) := makedefined(GeschikteOptie/InstallatiePerProduct/KK[Choice_per_BO/GeschikteOptie_rel], BO/InstallatiePerProduct/KK);

			container LastVervanging := for_each_nedv(
				classifications/Product/name,
				replace('BO/Activatie/Producten/@PT@ ? Zichtjaar_jaar : BO/InstallatiePerProduct/lastvervanging/@PT@', '@PT@', Classifications/Product/name ),
				BO,
				yr_uint16)
			{
				attribute<yr_uint16> KK (BO) := InstallatiePerProduct/KK != BO/InstallatiePerProduct/KK ? Zichtjaar_jaar : BO/InstallatiePerProduct/lastvervanging/KK;
				attribute<yr_uint16> VT (BO) := InstallatiePerProduct/VT != BO/InstallatiePerProduct/VT ? Zichtjaar_jaar : BO/InstallatiePerProduct/lastvervanging/VT;
				attribute<yr_uint16> DK (BO) := InstallatiePerProduct/DK != BO/InstallatiePerProduct/DK ? Zichtjaar_jaar : BO/InstallatiePerProduct/lastvervanging/DK;
			}
		}
		
		container Bouwdelen := BO/Bouwdelen
		{
			container Isolatie := for_each_nedv(
				Classifications/Bouwdeel/name,
				replace('makedefined(xInvesteringsOptie/Bouwdelen/Isolatie/@BN@[Choice_per_BO/xInvesteringsOptie_rel], BO/Bouwdelen/Isolatie/@BN@)', '@BN@', Classifications/Bouwdeel/name ),
				BO,
				Classifications/IsolatieNiveau);
				
			container lastvervanging := for_each_nedv(
				classifications/bouwdeel/name,
				replace('BO/activatie/bouwdelen_base/@BN@ ? Zichtjaar_jaar : BO/bouwdelen/lastvervanging/@BN@','@BN@', Classifications/Bouwdeel/name ),
				BO,
				yr_uint16);
		}
		container AansluitCapaciteit := BO/AansluitCapaciteit
		{
			attribute<kW> RV (BO) := makedefined(xInvesteringsOptie/AansluitCapaciteit/RV[Choice_per_BO/xInvesteringsOptie_rel], BO/AansluitCapaciteit/RV);
			attribute<kW> KD (BO) := makedefined(xInvesteringsOptie/AansluitCapaciteit/KD[Choice_per_BO/xInvesteringsOptie_rel], BO/AansluitCapaciteit/KD);
			attribute<kW> TW (BO) := makedefined(xInvesteringsOptie/AansluitCapaciteit/TW[Choice_per_BO/xInvesteringsOptie_rel], BO/AansluitCapaciteit/TW);
		}
	}
}
