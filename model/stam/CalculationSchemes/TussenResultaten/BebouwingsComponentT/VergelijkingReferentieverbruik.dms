//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2021 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//           Dit is de container met rekenschema's die werken op Bebouwing              //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////
container VergelijkingReferentieverbruik
{
	container Class
	{
		unit<uint8> BouwjaarWoningTestWoningen : nrofrows = 7
		{
			attribute<units/yr_uint16> ClassBreak : [ -9998, 1946,  1965,  1975, 1992, 2006, 2014];
			attribute<string>   name       : ['v1946','v1965','v1975','v1922', 'v2006', 'v2014', 'n2014'];

			attribute<string> Excel_code:
			[
				 '< 1946'
				,'1946 - 1964'
				,'1965 - 1974'
				,'1975 - 1991'
				,'1992 - 2005'
				,'2006 - 2014'
				,'> 2014'
			];

			attribute<string> label:
			[
				 'voor 1946 '	
				,'van 1946 t/m 1964'
				,'van 1965 t/m 1974'
				,'van 1975 t/m 1991'			 
				,'van 1992 t/m 2005'	
				,'van 2006 t/m 2014'
				,'na 2014'
			];

			container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
			parameter<.> onbekend := V/v1946;
		}
		
		unit<uint32> WoningTypeBouwjaarKlasseTW := combine(Classifications/WoningType, BouwjaarWoningTestWoningen)
		{
			attribute<string> label (.) := Classifications/WoningType/label[first_rel] + '_' + BouwjaarWoningTestWoningen/label[second_rel];
			attribute<string> name (.) := Classifications/WoningType/name[first_rel] + '_' + BouwjaarWoningTestWoningen/name[second_rel];
			container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		}
		
		unit<uint32> WoningTypeBouwjaarKlasseTWPakketSoort := combine(WoningTypeBouwjaarKlasseTW, PakketSoort)
		{
			attribute<string> label (.) := WoningTypeBouwjaarKlasseTW/label[first_rel] + '_' + PakketSoort/label[second_rel];
			attribute<string> name (.) := WoningTypeBouwjaarKlasseTW/name[first_rel] + '_' + PakketSoort/name[second_rel];
			container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		}
		
		unit<uint8> PakketSoort : nrofrows = 2
		{
			attribute<string> name: ['Standaard', 'LaagTemp']; 
			attribute<string> label := name; 
		}
	}
	unit<uint32> Isolatiepakketten_input: StorageName = "%projDir%/data/20231030_Pakketen_input.csv", StorageType = "gdal.vect", StorageReadOnly = "True"
	{
		attribute<Classifications/WoningType>	WoningtypeHestia	(.)  	:= 
			  strcount(Woningtype, 'vrijstaand') > 0 	  	? Classifications/WoningType/V/vrijstaand
			: strcount(Woningtype, '2 onder 1 kap') > 0  	? Classifications/WoningType/V/twee_onder_1_kap
			: strcount(Woningtype, 'galerij') > 0 		  	? Classifications/WoningType/V/meergezinspand_laag_midden // Of hoog?
			: strcount(Woningtype, 'maisonnette') > 0 	  	? Classifications/WoningType/V/meergezinspand_laag_midden // Of hoog?
			: strcount(Woningtype, 'portiek') > 0 		  	? Classifications/WoningType/V/meergezinspand_laag_midden // Of hoog?
			: strcount(Woningtype, 'rijwoning hoek') > 0 	? Classifications/WoningType/V/hoekwoning
			: strcount(Woningtype, 'rijwoning tussen') > 0 ? Classifications/WoningType/V/tussenwoning																				
			: Classifications/WoningType/V/tussenwoning; // Bovenstaande classificatie omvat alle inputwaardes, dus deze waarde maakt niet uit. 
	
		attribute<class/BouwjaarWoningTestWoningen> BouwJaarKlasseTestWoningen (.) := rlookup(Bouwjaarklasse, class/BouwjaarWoningTestWoningen/excel_code);
		attribute<Classifications/schillabel> Energielabel_NTA8800 (.) := rlookup(NTA8800_v9, classifications/schillabel/name);
		attribute<Classifications/schillabel> Energielabel_NEN7120 (.) := rlookup(NEN7120_v9, classifications/schillabel/name);
		attribute<class/PakketSoort>		  PakketSoort		   (.) := rlookup(TypePakket, class/PakketSoort/name);
		
		attribute<class/WoningTypeBouwjaarKlasseTW> WoningTypeBouwjaarKlasseTW_rel (.) := combine_data(class/WoningTypeBouwjaarKlasseTW, WoningtypeHestia, BouwJaarKlasseTestWoningen);
		attribute<class/WoningTypeBouwjaarKlasseTWPakketSoort> WoningTypeBouwjaarKlasseTWPakketSoort_rel (.) := combine_data(class/WoningTypeBouwjaarKlasseTWPakketSoort, WoningTypeBouwjaarKlasseTW_rel, PakketSoort);
		
		container bouwdeelIsolatie := for_each_ind(
		'nedv'
		,Classifications/bouwdeel/name
		,'rlookup(IsolatieNiveau_'+Classifications/bouwdeel/name+', Classifications/IsolatieNiveau/name)[invert(WoningTypeBouwjaarKlasseTWPakketSoort_rel)]'
		,class/WoningTypeBouwjaarKlasseTWPakketSoort
		,Classifications/IsolatieNiveau
		);
		
	}	

	// Classificatie naar bouwjaarklasse testwonignen om pakketten op te kunnen leggen
	attribute<class/BouwjaarWoningTestWoningen> BouwjaarklasseTestwoningen (BO) := classify(bouwjaar, class/BouwjaarWoningTestWoningen/classbreak);
	attribute<class/WoningTypeBouwjaarKlasseTW>   WoningTypeBouwjaarKlasseTW_rel   (BO) := combine_data(class/WoningTypeBouwjaarKlasseTW, Woningtype_rel, BouwjaarklasseTestwoningen);

	// WBS_rel is op basis van label startsituatie
	attribute<classifications/combines/WBS> WBS_rel (BO) 	 := combine_data(classifications/combines/WBS, combine_data(classifications/combines/WB, woningtype_rel, classify(bouwjaar, classifications/bouwjaarwoning/classbreak)), energielabel_rel);

	container UitgangsSituatie
	{
		container Functioneel := BO/Functioneel;
	}
	container LaagTemperatuurGeschikt   := Templates/IsolatiepakketOplegT('LaagTemp');
	container StandaardEnStreefwaarden  := Templates/IsolatiepakketOplegT('Standaard');

	container outputs
	{
		// per woningtype/bouwjaarklasse/NENlabelsprong. Wat betkent NENlabelsprong? Van startlabel naar label behorend bij pakket?
			// aantal woningen
			// Warmtevraag volgend vivet
			// Warmtevraag volgens Hestia 
			
		/*	

		attribute<nrAsl> AantalWoningen              (classifications/combines/WBS) := sum(nrAansluitingen, WBS_rel);
		attribute<GJ_yr> RV_UitgangsSituatie         (classifications/combines/WBS) := sum(UitgangsSituatie/Functioneel/RV, WBS_rel);
		attribute<GJ_yr> RV_LaagTemperatuurGeschikt  (classifications/combines/WBS) := sum(LaagTemperatuurGeschikt/Functioneel/RV, WBS_rel);
		attribute<GJ_yr> RV_StandaardEnStreefwaarden (classifications/combines/WBS) := sum(StandaardEnStreefwaarden/Functioneel/RV, WBS_rel);
		

		// per woningtype/bouwjaarklasse/NTAlabelsprong
			// aantal woningen
			// Warmtevraag volgend vivet
			// Warmtevraag volgens Hestia 
	}

	container Templates
	{
		Template IsolatiepakketOplegT
		{
			// Start inputs
			// Deze input wordt waarschijnlijk ipv een container een verwijzing naar een inputbestand
			parameter<string> Pakketsoort_str;
			// End inputs
			
			attribute<class/PakketSoort> PakketSoort (BO) := const(rlookup(Pakketsoort_str, class/PakketSoort/name), BO);
			attribute<class/WoningTypeBouwjaarKlasseTWPakketSoort> WoningTypeBouwjaarKlasseTWPakketSoort_rel (BO) := combine_data(class/WoningTypeBouwjaarKlasseTWPakketSoort, WoningTypeBouwjaarKlasseTW_rel, PakketSoort);
			
			container IsolatieNiveausPakket := for_each_ind(
				'nedv'
				,Classifications/bouwdeel/name
				,'lookup(WoningTypeBouwjaarKlasseTWPakketSoort_rel, Isolatiepakketten_input/BouwdeelIsolatie/'+Classifications/bouwdeel/name+')'
				,BO
				,Classifications/IsolatieNiveau
				);
			
			container IsolatieNiveaus := for_each_ind(
			'nedv'
			,Classifications/bouwdeel/name
			,replace('IsolatieNiveausPakket/@BD@ > BO/Bouwdelen/Isolatie/@BD@ ? IsolatieNiveausPakket/@BD@ : BO/Bouwdelen/Isolatie/@BD@','@BD@',Classifications/bouwdeel/name)
			,BO
			,Classifications/IsolatieNiveau
			);
			
			container Functioneel          := Templates/BerekenFunctioneel(BO, BO, id(BO), IsolatieNiveaus);
			
		}
		
		Template BerekenFunctioneel
		{
		unit<uint32> BOdomain;
		unit<uint32> PrevState;
		attribute<PrevState> PrevState_rel (BOdomain);
		container IsolatieNiveaus;

		attribute<GJ_yr> VT (BOdomain) :=
			  Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes/V_E_asl[PrevState/InstallatiePerProduct/VT[PrevState_rel]]
			* PrevState/nrAansluitingen[PrevState_rel]
			* PrevState/Functioneel_base/Gedragfactor/VT;
			
		attribute<GJ_yr> KK (BOdomain) := PrevState/Functioneel_base/KK[PrevState_rel];
		attribute<GJ_yr> EA (BOdomain) := PrevState/Functioneel_base/EA[PrevState_rel];
		attribute<GJ_yr> TW (BOdomain) := PrevState/Functioneel_base/TW[PrevState_rel];
		attribute<GJ_yr> KD (BOdomain) := PrevState/Functioneel_base/KD[PrevState_rel];
		attribute<GJ_yr> RV (BOdomain) := (RV_per_Bouwdeel_now/Totaal  + Vrv_VT) * Correction_RV - warmtewinst/totaal;
		
		attribute<GJ_yr> Vrv_VT (BOdomain) :=
			  Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes/V_RV_asl[PrevState/InstallatiePerProduct/VT[PrevState_rel]]
			* PrevState/nrAansluitingen[PrevState_rel]
			* PrevState/Functioneel_base/Klimaateffect[PrevState_rel]
			* PrevState/Functioneel_base/Gedragfactor/VT
			* PrevState/Functioneel_base/Fitfactor_VT[PrevState_rel], ishidden = "True";

		attribute<Kwh_yr_m2>                  Kwh_m2_RV      (BOdomain) := makedefined(((RV_per_Bouwdeel_now/Totaal + Vrv_VT) / 3.6[MJ / kWh] * 1000 [ MJ / GJ]) / PrevState/Oppervlakte[PrevState_rel],0.0[Kwh_yr_m2]), ishidden = "True";
		attribute<Kwh_yr_m2>                  Kwh_m2_tot     (BOdomain) := makedefined(((PrevState/Functioneel_base/VT[PrevState_rel]+KK+ EA / Invoer/Kengetallen/Constanten/Efficiency_EA + TW/0.72+KD*0.0+RV/1.04) / 3.6[MJ / kWh] * 1000 [ MJ / GJ]) / PrevState/Oppervlakte[PrevState_rel],0.0[Kwh_yr_m2]), ishidden = "True";//, IntegrityCheck = "Kwh_m2_tot < 1000[Kwh_yr_m2]";
		attribute<Classifications/Schillabel> Schillabel_rel (BOdomain) := classify(Kwh_m2_tot, classifications/Schillabel/classbreak), ishidden = "True";
		attribute<ratio>                      Correction_RV  (BOdomain) := 1.0[ratio] + Invoer/Kengetallen/Constanten/BinnenTemp_A * Invoer/Kengetallen/Constanten/BinnenTemp_B ^ Kwh_m2_RV, ishidden = "True";

		container IsolatieNiveau_rel := IsolatieNiveaus;
			
		container BouwdeelIsolatie_rel := for_each_nedv(
			classifications/Bouwdeel/name,
			replace(
				'combine_data(Classifications/BouwdeelIsolatie, classifications/Bouwdeel/V/@BN@, IsolatieNiveau_rel/@BN@)'
			,	'@BN@', classifications/Bouwdeel/name),
			BOdomain,
			Classifications/BouwdeelIsolatie), ishidden = "True";

		attribute<ratio> R_RV (Classifications/BouwdeelIsolatie):= Classifications/BouwdeelIsolatie/R_RV / 100[percent], ishidden = "True";
		
		container RV_per_Bouwdeel_now := for_each_nedv(
			classifications/Bouwdeel/name,
			replace(
				'PrevState/Functioneel_base/RV_N0_per_Bouwdeel_now/@BN@[PrevState_rel] * makedefined(1.0[ratio] - R_RV[BouwdeelIsolatie_rel/@BN@], 1.0[ratio])'
			,	'@BN@', classifications/Bouwdeel/name),
			BOdomain,
			GJ_yr)
			{
			attribute<GJ_yr> Totaal (BOdomain):= ='add('+AsItemList(Classifications/bouwdeel/name)+')';
			}

		container warmtewinst := Model/CalculationSchemes/BerekenWarmtewinst(BOdomain, '((RV_per_Bouwdeel_now/totaal + Vrv_VT) * Correction_RV)');
		}
	}
}